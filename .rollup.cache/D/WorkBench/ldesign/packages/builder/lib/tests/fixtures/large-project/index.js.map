{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/tests/fixtures/large-project/index.ts"],"names":[],"mappings":"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","sourcesContent":["// 模拟一个较大的项目文件\nexport interface Config {\n  apiUrl: string\n  timeout: number\n  retries: number\n}\n\nexport class ApiClient {\n  private config: Config\n\n  constructor(config: Config) {\n    this.config = config\n  }\n\n  async get(endpoint: string): Promise<any> {\n    const url = `${this.config.apiUrl}${endpoint}`\n    let retries = this.config.retries\n    \n    while (retries > 0) {\n      try {\n        const response = await fetch(url, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        })\n        \n        if (response.ok) {\n          return await response.json()\n        }\n        \n        throw new Error(`HTTP ${response.status}`)\n      } catch (error) {\n        retries--\n        if (retries === 0) {\n          throw error\n        }\n        await new Promise(resolve => setTimeout(resolve, 1000))\n      }\n    }\n  }\n\n  async post(endpoint: string, data: any): Promise<any> {\n    const url = `${this.config.apiUrl}${endpoint}`\n    let retries = this.config.retries\n    \n    while (retries > 0) {\n      try {\n        const response = await fetch(url, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(data)\n        })\n        \n        if (response.ok) {\n          return await response.json()\n        }\n        \n        throw new Error(`HTTP ${response.status}`)\n      } catch (error) {\n        retries--\n        if (retries === 0) {\n          throw error\n        }\n        await new Promise(resolve => setTimeout(resolve, 1000))\n      }\n    }\n  }\n}\n\nexport function createApiClient(config: Config): ApiClient {\n  return new ApiClient(config)\n}\n\nexport const defaultConfig: Config = {\n  apiUrl: 'https://api.example.com',\n  timeout: 5000,\n  retries: 3\n}\n\n// 添加更多代码以增加文件大小\nexport class DataProcessor {\n  private data: any[] = []\n\n  addData(item: any): void {\n    this.data.push(item)\n  }\n\n  processData(): any[] {\n    return this.data.map(item => ({\n      ...item,\n      processed: true,\n      timestamp: Date.now()\n    }))\n  }\n\n  filterData(predicate: (item: any) => boolean): any[] {\n    return this.data.filter(predicate)\n  }\n\n  sortData(compareFn?: (a: any, b: any) => number): any[] {\n    return [...this.data].sort(compareFn)\n  }\n}\n\nexport class EventEmitter {\n  private events: Map<string, Function[]> = new Map()\n\n  on(event: string, listener: Function): void {\n    if (!this.events.has(event)) {\n      this.events.set(event, [])\n    }\n    this.events.get(event)!.push(listener)\n  }\n\n  off(event: string, listener: Function): void {\n    const listeners = this.events.get(event)\n    if (listeners) {\n      const index = listeners.indexOf(listener)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }\n\n  emit(event: string, ...args: any[]): void {\n    const listeners = this.events.get(event)\n    if (listeners) {\n      listeners.forEach(listener => listener(...args))\n    }\n  }\n}\n\nexport default {\n  ApiClient,\n  DataProcessor,\n  EventEmitter,\n  createApiClient,\n  defaultConfig\n}\n"]}