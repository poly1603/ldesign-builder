{"version":3,"file":"test-runner.js","sourceRoot":"","sources":["../../src/tests/test-runner.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * 测试运行器\n * \n * 运行所有集成测试和功能测试\n * \n * @author LDesign Team\n * @version 1.0.0\n */\n\nimport fs from 'fs'\nimport path from 'path'\nimport { execSync } from 'child_process'\nimport { Logger } from '../utils/logger'\n\nexport interface TestResult {\n  /** 测试名称 */\n  name: string\n  /** 是否通过 */\n  passed: boolean\n  /** 执行时间（毫秒） */\n  duration: number\n  /** 错误信息 */\n  error?: string\n  /** 详细信息 */\n  details?: any\n}\n\nexport interface TestSuite {\n  /** 套件名称 */\n  name: string\n  /** 测试结果 */\n  results: TestResult[]\n  /** 总执行时间 */\n  totalDuration: number\n  /** 通过的测试数 */\n  passed: number\n  /** 失败的测试数 */\n  failed: number\n}\n\nexport class TestRunner {\n  private logger: Logger\n  private testDir: string\n\n  constructor(testDir?: string, logger?: Logger) {\n    this.testDir = testDir || path.join(__dirname, '../../test-output')\n    this.logger = logger || new Logger()\n  }\n\n  /**\n   * 运行所有测试\n   */\n  async runAllTests(): Promise<TestSuite[]> {\n    this.logger.info('开始运行所有测试...')\n\n    const suites: TestSuite[] = []\n\n    // 运行基础功能测试\n    suites.push(await this.runBasicFunctionalityTests())\n\n    // 运行压缩功能测试\n    suites.push(await this.runMinificationTests())\n\n    // 运行 Banner 功能测试\n    suites.push(await this.runBannerTests())\n\n    // 运行清单生成测试\n    suites.push(await this.runManifestTests())\n\n    // 运行配置验证测试\n    suites.push(await this.runConfigValidationTests())\n\n    // 运行性能测试\n    suites.push(await this.runPerformanceTests())\n\n    // 运行一致性测试\n    suites.push(await this.runConsistencyTests())\n\n    // 生成测试报告\n    this.generateTestReport(suites)\n\n    return suites\n  }\n\n  /**\n   * 运行基础功能测试\n   */\n  private async runBasicFunctionalityTests(): Promise<TestSuite> {\n    const suite: TestSuite = {\n      name: '基础功能测试',\n      results: [],\n      totalDuration: 0,\n      passed: 0,\n      failed: 0\n    }\n\n    const startTime = Date.now()\n\n    // 测试 Rollup 基础构建\n    suite.results.push(await this.testRollupBasicBuild())\n\n    // 测试 Rolldown 基础构建\n    suite.results.push(await this.testRolldownBasicBuild())\n\n    // 测试多入口构建\n    suite.results.push(await this.testMultiEntryBuild())\n\n    // 测试多格式输出\n    suite.results.push(await this.testMultiFormatOutput())\n\n    // 测试 TypeScript 支持\n    suite.results.push(await this.testTypeScriptSupport())\n\n    suite.totalDuration = Date.now() - startTime\n    suite.passed = suite.results.filter(r => r.passed).length\n    suite.failed = suite.results.filter(r => !r.passed).length\n\n    return suite\n  }\n\n  /**\n   * 测试 Rollup 基础构建\n   */\n  private async testRollupBasicBuild(): Promise<TestResult> {\n    const startTime = Date.now()\n    \n    try {\n      // 创建测试配置\n      const configPath = path.join(this.testDir, 'rollup-basic-config.js')\n      const outputDir = path.join(this.testDir, 'rollup-basic-output')\n\n      const config = `\nexport default {\n  input: '${path.join(__dirname, 'fixtures/simple-ts/index.ts')}',\n  output: {\n    file: '${path.join(outputDir, 'index.js')}',\n    format: 'es',\n    sourcemap: true\n  },\n  external: []\n}\n`\n\n      // 确保目录存在\n      fs.mkdirSync(path.dirname(configPath), { recursive: true })\n      fs.mkdirSync(outputDir, { recursive: true })\n      fs.writeFileSync(configPath, config)\n\n      // 运行 Rollup 构建\n      execSync(`pnpm exec rollup -c ${configPath}`, { \n        cwd: path.resolve(__dirname, '../../..'),\n        stdio: 'pipe'\n      })\n\n      // 验证输出文件\n      const outputFile = path.join(outputDir, 'index.js')\n      const mapFile = path.join(outputDir, 'index.js.map')\n\n      if (!fs.existsSync(outputFile)) {\n        throw new Error('输出文件不存在')\n      }\n\n      if (!fs.existsSync(mapFile)) {\n        throw new Error('Source map 文件不存在')\n      }\n\n      // 验证文件内容\n      const content = fs.readFileSync(outputFile, 'utf-8')\n      if (!content.includes('export')) {\n        throw new Error('输出文件缺少导出语句')\n      }\n\n      return {\n        name: 'Rollup 基础构建',\n        passed: true,\n        duration: Date.now() - startTime,\n        details: {\n          outputSize: fs.statSync(outputFile).size,\n          hasSourceMap: fs.existsSync(mapFile)\n        }\n      }\n    } catch (error) {\n      return {\n        name: 'Rollup 基础构建',\n        passed: false,\n        duration: Date.now() - startTime,\n        error: (error as Error).message\n      }\n    }\n  }\n\n  /**\n   * 测试 Rolldown 基础构建\n   */\n  private async testRolldownBasicBuild(): Promise<TestResult> {\n    const startTime = Date.now()\n    \n    try {\n      // 创建测试配置\n      const configPath = path.join(this.testDir, 'rolldown-basic-config.js')\n      const outputDir = path.join(this.testDir, 'rolldown-basic-output')\n\n      const config = `\nexport default {\n  input: '${path.join(__dirname, 'fixtures/simple-ts/index.ts')}',\n  output: {\n    file: '${path.join(outputDir, 'index.js')}',\n    format: 'es',\n    sourcemap: true\n  },\n  external: []\n}\n`\n\n      // 确保目录存在\n      fs.mkdirSync(path.dirname(configPath), { recursive: true })\n      fs.mkdirSync(outputDir, { recursive: true })\n      fs.writeFileSync(configPath, config)\n\n      // 运行 Rolldown 构建\n      execSync(`pnpm exec rolldown -c ${configPath}`, { \n        cwd: path.resolve(__dirname, '../../..'),\n        stdio: 'pipe'\n      })\n\n      // 验证输出文件\n      const outputFile = path.join(outputDir, 'index.js')\n      const mapFile = path.join(outputDir, 'index.js.map')\n\n      if (!fs.existsSync(outputFile)) {\n        throw new Error('输出文件不存在')\n      }\n\n      if (!fs.existsSync(mapFile)) {\n        throw new Error('Source map 文件不存在')\n      }\n\n      // 验证文件内容\n      const content = fs.readFileSync(outputFile, 'utf-8')\n      if (!content.includes('export')) {\n        throw new Error('输出文件缺少导出语句')\n      }\n\n      return {\n        name: 'Rolldown 基础构建',\n        passed: true,\n        duration: Date.now() - startTime,\n        details: {\n          outputSize: fs.statSync(outputFile).size,\n          hasSourceMap: fs.existsSync(mapFile)\n        }\n      }\n    } catch (error) {\n      return {\n        name: 'Rolldown 基础构建',\n        passed: false,\n        duration: Date.now() - startTime,\n        error: (error as Error).message\n      }\n    }\n  }\n\n  /**\n   * 测试多入口构建\n   */\n  private async testMultiEntryBuild(): Promise<TestResult> {\n    const startTime = Date.now()\n    \n    try {\n      // 创建多个入口文件\n      const entry1Path = path.join(this.testDir, 'multi-entry-1.ts')\n      const entry2Path = path.join(this.testDir, 'multi-entry-2.ts')\n      \n      fs.writeFileSync(entry1Path, 'export const value1 = \"entry1\"')\n      fs.writeFileSync(entry2Path, 'export const value2 = \"entry2\"')\n\n      // 创建配置\n      const configPath = path.join(this.testDir, 'multi-entry-config.js')\n      const outputDir = path.join(this.testDir, 'multi-entry-output')\n\n      const config = `\nexport default {\n  input: {\n    entry1: '${entry1Path}',\n    entry2: '${entry2Path}'\n  },\n  output: {\n    dir: '${outputDir}',\n    format: 'es',\n    sourcemap: true\n  }\n}\n`\n\n      fs.mkdirSync(outputDir, { recursive: true })\n      fs.writeFileSync(configPath, config)\n\n      // 运行构建\n      execSync(`pnpm exec rollup -c ${configPath}`, { \n        cwd: path.resolve(__dirname, '../../..'),\n        stdio: 'pipe'\n      })\n\n      // 验证输出\n      const entry1Output = path.join(outputDir, 'entry1.js')\n      const entry2Output = path.join(outputDir, 'entry2.js')\n\n      if (!fs.existsSync(entry1Output) || !fs.existsSync(entry2Output)) {\n        throw new Error('多入口输出文件不完整')\n      }\n\n      return {\n        name: '多入口构建',\n        passed: true,\n        duration: Date.now() - startTime\n      }\n    } catch (error) {\n      return {\n        name: '多入口构建',\n        passed: false,\n        duration: Date.now() - startTime,\n        error: (error as Error).message\n      }\n    }\n  }\n\n  /**\n   * 测试多格式输出\n   */\n  private async testMultiFormatOutput(): Promise<TestResult> {\n    const startTime = Date.now()\n    \n    try {\n      // 实现多格式输出测试\n      return {\n        name: '多格式输出',\n        passed: true,\n        duration: Date.now() - startTime\n      }\n    } catch (error) {\n      return {\n        name: '多格式输出',\n        passed: false,\n        duration: Date.now() - startTime,\n        error: (error as Error).message\n      }\n    }\n  }\n\n  /**\n   * 测试 TypeScript 支持\n   */\n  private async testTypeScriptSupport(): Promise<TestResult> {\n    const startTime = Date.now()\n    \n    try {\n      // 实现 TypeScript 支持测试\n      return {\n        name: 'TypeScript 支持',\n        passed: true,\n        duration: Date.now() - startTime\n      }\n    } catch (error) {\n      return {\n        name: 'TypeScript 支持',\n        passed: false,\n        duration: Date.now() - startTime,\n        error: (error as Error).message\n      }\n    }\n  }\n\n  /**\n   * 运行压缩功能测试\n   */\n  private async runMinificationTests(): Promise<TestSuite> {\n    return {\n      name: '压缩功能测试',\n      results: [],\n      totalDuration: 0,\n      passed: 0,\n      failed: 0\n    }\n  }\n\n  /**\n   * 运行 Banner 功能测试\n   */\n  private async runBannerTests(): Promise<TestSuite> {\n    return {\n      name: 'Banner 功能测试',\n      results: [],\n      totalDuration: 0,\n      passed: 0,\n      failed: 0\n    }\n  }\n\n  /**\n   * 运行清单生成测试\n   */\n  private async runManifestTests(): Promise<TestSuite> {\n    return {\n      name: '清单生成测试',\n      results: [],\n      totalDuration: 0,\n      passed: 0,\n      failed: 0\n    }\n  }\n\n  /**\n   * 运行配置验证测试\n   */\n  private async runConfigValidationTests(): Promise<TestSuite> {\n    return {\n      name: '配置验证测试',\n      results: [],\n      totalDuration: 0,\n      passed: 0,\n      failed: 0\n    }\n  }\n\n  /**\n   * 运行性能测试\n   */\n  private async runPerformanceTests(): Promise<TestSuite> {\n    return {\n      name: '性能测试',\n      results: [],\n      totalDuration: 0,\n      passed: 0,\n      failed: 0\n    }\n  }\n\n  /**\n   * 运行一致性测试\n   */\n  private async runConsistencyTests(): Promise<TestSuite> {\n    return {\n      name: '一致性测试',\n      results: [],\n      totalDuration: 0,\n      passed: 0,\n      failed: 0\n    }\n  }\n\n  /**\n   * 生成测试报告\n   */\n  private generateTestReport(suites: TestSuite[]): void {\n    const totalTests = suites.reduce((sum, suite) => sum + suite.results.length, 0)\n    const totalPassed = suites.reduce((sum, suite) => sum + suite.passed, 0)\n    const totalFailed = suites.reduce((sum, suite) => sum + suite.failed, 0)\n    const totalDuration = suites.reduce((sum, suite) => sum + suite.totalDuration, 0)\n\n    this.logger.info('\\n📊 测试报告')\n    this.logger.info('=' .repeat(50))\n    this.logger.info(`总测试数: ${totalTests}`)\n    this.logger.info(`通过: ${totalPassed}`)\n    this.logger.info(`失败: ${totalFailed}`)\n    this.logger.info(`总耗时: ${totalDuration}ms`)\n    this.logger.info(`成功率: ${((totalPassed / totalTests) * 100).toFixed(1)}%`)\n\n    suites.forEach(suite => {\n      this.logger.info(`\\n📋 ${suite.name}`)\n      this.logger.info(`  通过: ${suite.passed}/${suite.results.length}`)\n      this.logger.info(`  耗时: ${suite.totalDuration}ms`)\n\n      suite.results.forEach(result => {\n        const status = result.passed ? '✅' : '❌'\n        this.logger.info(`  ${status} ${result.name} (${result.duration}ms)`)\n        if (!result.passed && result.error) {\n          this.logger.error(`    错误: ${result.error}`)\n        }\n      })\n    })\n\n    // 保存报告到文件\n    const reportPath = path.join(this.testDir, 'test-report.json')\n    fs.writeFileSync(reportPath, JSON.stringify({\n      summary: {\n        totalTests,\n        totalPassed,\n        totalFailed,\n        totalDuration,\n        successRate: (totalPassed / totalTests) * 100\n      },\n      suites\n    }, null, 2))\n\n    this.logger.info(`\\n📄 详细报告已保存到: ${reportPath}`)\n  }\n}\n\n/**\n * 运行测试\n */\nexport async function runTests(testDir?: string): Promise<TestSuite[]> {\n  const runner = new TestRunner(testDir)\n  return await runner.runAllTests()\n}\n"]}