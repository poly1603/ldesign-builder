{"version":3,"file":"watch.js","sourceRoot":"","sources":["../../../src/cli/commands/watch.ts"],"names":[],"mappings":"AAAA;;GAEG;AAEH,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAA;AACnC,OAAO,EAAE,cAAc,EAAE,MAAM,2BAA2B,CAAA;AAC1D,OAAO,EAAE,MAAM,EAAE,MAAM,oBAAoB,CAAA;AAG3C,MAAM,CAAC,MAAM,YAAY,GAAG,IAAI,OAAO,CAAC,OAAO,CAAC;KAC7C,WAAW,CAAC,aAAa,CAAC;KAC1B,MAAM,CAAC,wBAAwB,EAAE,sBAAsB,EAAE,SAAS,CAAC;KACnE,MAAM,CAAC,oBAAoB,EAAE,QAAQ,EAAE,MAAM,CAAC;KAC9C,MAAM,CAAC,UAAU,EAAE,MAAM,CAAC;KAC1B,MAAM,CAAC,aAAa,EAAE,eAAe,EAAE,IAAI,CAAC;KAC5C,MAAM,CAAC,KAAK,EAAE,OAAO,EAAE,EAAE;IACxB,IAAI,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;QAExB,MAAM,OAAO,GAAG,IAAI,cAAc,CAAC;YACjC,MAAM;YACN,UAAU,EAAE,IAAI;SACjB,CAAC,CAAA;QAEF,MAAM,OAAO,CAAC,UAAU,EAAE,CAAA;QAE1B,MAAM,MAAM,GAAkB;YAC5B,MAAM,EAAE;gBACN,GAAG,EAAE,OAAO,CAAC,MAAM;gBACnB,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC;gBACjC,SAAS,EAAE,OAAO,CAAC,SAAS;aAC7B;YACD,MAAM,EAAE,OAAO,CAAC,MAAM;SACvB,CAAA;QAED,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC,CAAA;QAEhD,SAAS;QACT,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE,EAAE;YAC5B,MAAM,CAAC,IAAI,CAAC,SAAS,IAAI,EAAE,CAAC,CAAA;QAC9B,CAAC,CAAC,CAAA;QAEF,OAAO,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,OAAO,EAAE,EAAE;YAC9B,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;QACxB,CAAC,CAAC,CAAA;QAEF,SAAS;QACT,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,KAAK,IAAI,EAAE;YAC9B,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;YACtB,MAAM,OAAO,CAAC,KAAK,EAAE,CAAA;YACrB,MAAM,OAAO,CAAC,OAAO,EAAE,CAAA;YACvB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;QACjB,CAAC,CAAC,CAAA;QAEF,MAAM,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAA;IAEvC,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,CAAA;QAC5B,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;IACjB,CAAC;AACH,CAAC,CAAC,CAAA","sourcesContent":["/**\n * 监听命令实现\n */\n\nimport { Command } from 'commander'\nimport { LibraryBuilder } from '../../core/LibraryBuilder'\nimport { logger } from '../../utils/logger'\nimport type { BuilderConfig } from '../../types/config'\n\nexport const watchCommand = new Command('watch')\n  .description('监听文件变化并自动构建')\n  .option('-f, --format <formats>', '指定输出格式 (esm,cjs,umd)', 'esm,cjs')\n  .option('-o, --outDir <dir>', '指定输出目录', 'dist')\n  .option('--minify', '压缩输出')\n  .option('--sourcemap', '生成 source map', true)\n  .action(async (options) => {\n    try {\n      logger.info('启动监听模式...')\n\n      const builder = new LibraryBuilder({\n        logger,\n        autoDetect: true\n      })\n\n      await builder.initialize()\n\n      const config: BuilderConfig = {\n        output: {\n          dir: options.outDir,\n          format: options.format.split(','),\n          sourcemap: options.sourcemap\n        },\n        minify: options.minify\n      }\n\n      const watcher = await builder.buildWatch(config)\n\n      // 监听构建事件\n      watcher.on('change', (file) => {\n        logger.info(`文件变化: ${file}`)\n      })\n\n      watcher.on('build', (_result) => {\n        logger.success('构建完成')\n      })\n\n      // 保持进程运行\n      process.on('SIGINT', async () => {\n        logger.info('停止监听...')\n        await watcher.close()\n        await builder.dispose()\n        process.exit(0)\n      })\n\n      logger.success('监听模式已启动，按 Ctrl+C 停止')\n\n    } catch (error) {\n      logger.error('监听失败:', error)\n      process.exit(1)\n    }\n  })\n"]}