{"version":3,"file":"examples.js","sourceRoot":"","sources":["../../../src/cli/commands/examples.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * examples 目录批量构建命令\n */\n\nimport { Command } from 'commander'\nimport { join, dirname } from 'path'\nimport { fileURLToPath } from 'url'\nimport { promises as fs } from 'fs'\nimport { spawn } from 'child_process'\nimport chalk from 'chalk'\n\n// ES 模块下的 __dirname，兼容 CJS\nconst getFilename = (): string => {\n  if (typeof import.meta !== 'undefined' && import.meta.url) {\n    return fileURLToPath(import.meta.url)\n  }\n  // CJS 环境下的 fallback\n  return typeof __filename !== 'undefined' ? __filename : ''\n}\n\nconst getDirname = (filename: string): string => {\n  if (typeof import.meta !== 'undefined' && import.meta.url) {\n    return dirname(filename)\n  }\n  // CJS 环境下的 fallback\n  return typeof __dirname !== 'undefined' ? __dirname : ''\n}\n\nconst __filename = getFilename()\nconst __dirname = getDirname(__filename)\n\ninterface ExamplesOptions {\n  root?: string\n  filter?: string\n  concurrency?: number\n}\n\nexport const examplesCommand = new Command('examples')\n  .description('构建当前工作目录下的 examples 目录中的所有示例项目')\n  .option('--root <path>', 'examples 根目录（相对当前工作目录）', 'examples')\n  .option('--filter <keyword>', '仅构建名称包含关键字的示例')\n  .option('--concurrency <n>', '并发构建数（默认串行）', (v) => parseInt(v, 10), 1)\n  .action(async (options: ExamplesOptions) => {\n    const root = join(process.cwd(), options.root || 'examples')\n\n    const examples = await findExampleProjects(root)\n    const selected = options.filter\n      ? examples.filter((p) => p.name.includes(options.filter!))\n      : examples\n\n    if (selected.length === 0) {\n      console.log(chalk.yellow(`未找到示例项目，root: ${root}`))\n      return\n    }\n\n    console.log(chalk.cyan(`即将构建 ${selected.length} 个示例项目...`))\n\n    // 使用绝对路径到 bin 文件（dist/cli -> ../../bin）\n    const binPath = join(__dirname, '../../bin/ldesign-builder.js')\n\n    const queue = [...selected]\n    const running: Promise<void>[] = []\n    const concurrency = Math.max(1, options.concurrency || 1)\n\n    const runNext = async (): Promise<void> => {\n      const item = queue.shift()\n      if (!item) return\n      await runExample(binPath, item.path)\n      await runNext()\n    }\n\n    for (let i = 0; i < concurrency; i++) {\n      running.push(runNext())\n    }\n\n    await Promise.all(running)\n\n    console.log(chalk.green('全部示例构建完成'))\n  })\n\nexport async function findExampleProjects(root: string): Promise<Array<{ name: string; path: string }>> {\n  const list: Array<{ name: string; path: string }> = []\n  try {\n    const items = await fs.readdir(root)\n    for (const name of items) {\n      const full = join(root, name)\n      try {\n        const stat = await fs.stat(full)\n        if (stat.isDirectory()) {\n          // 判断是否为一个示例项目：存在 package.json\n          const pkg = join(full, 'package.json')\n          try {\n            await fs.access(pkg)\n            list.push({ name, path: full })\n          } catch {\n            // 非项目，忽略\n          }\n        }\n      } catch {\n        // ignore\n      }\n    }\n  } catch {\n    // ignore\n  }\n  return list\n}\n\nexport async function runExample(binPath: string, cwd: string): Promise<void> {\n  console.log(chalk.gray(`\\n[example] ${cwd}`))\n  await new Promise<void>((resolve, reject) => {\n    const child = spawn(process.execPath, [binPath, 'build'], {\n      cwd,\n      stdio: 'inherit',\n      env: process.env,\n    })\n\n    child.on('close', (code) => {\n      if (code === 0) return resolve()\n      reject(new Error(`构建失败（退出码 ${code}）: ${cwd}`))\n    })\n\n    child.on('error', (err) => reject(err))\n  })\n}\n\n"]}