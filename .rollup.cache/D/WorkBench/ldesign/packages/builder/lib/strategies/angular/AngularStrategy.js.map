{"version":3,"file":"AngularStrategy.js","sourceRoot":"","sources":["../../../src/strategies/angular/AngularStrategy.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Angular（基础）策略\r\n * 仅提供最小可用的 TS 打包（推荐使用 ng-packagr 进行完整 Angular 库打包）\r\n */\r\n\r\nimport type { ILibraryStrategy } from '../../types/strategy'\r\nimport { LibraryType } from '../../types/library'\r\nimport type { BuilderConfig } from '../../types/config'\r\nimport type { UnifiedConfig } from '../../types/adapter'\r\n\r\nexport class AngularStrategy implements ILibraryStrategy {\r\n  readonly name = 'angular'\r\n  readonly supportedTypes = [LibraryType.ANGULAR]\r\n  readonly priority = 7\r\n\r\n  async applyStrategy(config: BuilderConfig): Promise<UnifiedConfig> {\r\n    const input = config.input || 'src/public-api.ts'\r\n\r\n    return {\r\n      input,\r\n      output: this.buildOutputConfig(config),\r\n      plugins: await this.buildPlugins(config),\r\n      external: this.mergeExternal(config.external),\r\n      treeshake: config.performance?.treeshaking !== false,\r\n      onwarn: this.createWarningHandler()\r\n    }\r\n  }\r\n\r\n  isApplicable(config: BuilderConfig): boolean {\r\n    return config.libraryType === LibraryType.ANGULAR\r\n  }\r\n\r\n  getDefaultConfig(): Partial<BuilderConfig> {\r\n    return {\r\n      libraryType: LibraryType.ANGULAR,\r\n      output: { format: ['esm', 'cjs'], sourcemap: true },\r\n      performance: { treeshaking: true, minify: false }\r\n    }\r\n  }\r\n\r\n  getRecommendedPlugins(_config: BuilderConfig): any[] { return [] }\r\n  validateConfig(_config: BuilderConfig): any { return { valid: true, errors: [], warnings: ['建议使用 ng-packagr 以获得最佳兼容性'], suggestions: [] } }\r\n\r\n  private async buildPlugins(config: BuilderConfig): Promise<any[]> {\r\n    const plugins: any[] = []\r\n\r\n    // Node resolve\r\n    const nodeResolve = await import('@rollup/plugin-node-resolve')\r\n    plugins.push(nodeResolve.default({ browser: true, extensions: ['.mjs', '.js', '.json', '.ts'] }))\r\n\r\n    // CommonJS\r\n    const commonjs = await import('@rollup/plugin-commonjs')\r\n    plugins.push(commonjs.default())\r\n\r\n    // 使用 TypeScript 插件生成 JS（支持装饰器）\r\n    const ts = await import('@rollup/plugin-typescript')\r\n    plugins.push({\r\n      name: '@rollup/plugin-typescript-js',\r\n      plugin: async () => ts.default({\r\n        // 不在此插件中生成声明，只负责 JS 转译\r\n        declaration: false,\r\n        emitDeclarationOnly: false,\r\n        noEmitOnError: false,\r\n        skipLibCheck: true,\r\n        experimentalDecorators: true,\r\n        useDefineForClassFields: false,\r\n        target: 'ES2018',\r\n        module: 'ESNext',\r\n        sourceMap: config.output?.sourcemap !== false\r\n      } as any)\r\n    })\r\n\r\n    // 单独的 d.ts 生成（按格式定向到 es/cjs 目录）\r\n    plugins.push({\r\n      name: 'typescript',\r\n      plugin: async () => ts.default({\r\n        declaration: true,\r\n        emitDeclarationOnly: true,\r\n        noEmitOnError: false,\r\n        skipLibCheck: true,\r\n        sourceMap: config.output?.sourcemap !== false\r\n        // declarationDir 将由适配器按格式重写为对应输出目录\r\n      } as any)\r\n    })\r\n\r\n    return plugins\r\n  }\r\n\r\n  private buildOutputConfig(config: BuilderConfig): any {\r\n    const out = config.output || {}\r\n    const formats = Array.isArray(out.format) ? out.format : ['esm', 'cjs']\r\n    return { dir: out.dir || 'dist', format: formats, sourcemap: out.sourcemap !== false, exports: 'auto' }\r\n  }\r\n\r\n  private createWarningHandler() {\r\n    return (_warning: any) => { /* 可按需过滤 */ }\r\n  }\r\n\r\n  /**\r\n   * 合并 external 配置，确保 Angular 相关依赖被标记为外部\r\n   */\r\n  private mergeExternal(external: any): any {\r\n    const pkgs = ['@angular/core', '@angular/common']\r\n\r\n    if (!external) return pkgs\r\n\r\n    if (Array.isArray(external)) {\r\n      return [...external, ...pkgs]\r\n    }\r\n\r\n    if (typeof external === 'function') {\r\n      return (id: string, ...args: any[]) => pkgs.includes(id) || external(id, ...args)\r\n    }\r\n\r\n    if (external instanceof RegExp) {\r\n      return (id: string) => pkgs.includes(id) || (external as RegExp).test(id)\r\n    }\r\n\r\n    if (typeof external === 'string') {\r\n      return [external, ...pkgs]\r\n    }\r\n\r\n    if (typeof external === 'object') {\r\n      return [...Object.keys(external), ...pkgs]\r\n    }\r\n\r\n    return pkgs\r\n  }\r\n}\r\n\r\n"]}