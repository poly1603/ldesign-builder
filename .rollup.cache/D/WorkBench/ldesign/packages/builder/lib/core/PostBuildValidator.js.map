{"version":3,"file":"PostBuildValidator.js","sourceRoot":"","sources":["../../src/core/PostBuildValidator.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * 打包后验证器\n * \n * 负责在构建完成后验证打包产物的正确性\n * 通过运行测试用例确保打包前后功能一致性\n * \n * @author LDesign Team\n * @version 1.0.0\n */\n\nimport { EventEmitter } from 'events'\nimport { randomUUID } from 'crypto'\nimport type {\n  IPostBuildValidator,\n  PostBuildValidationConfig,\n  ValidationContext,\n  ValidationResult,\n  ValidationReport,\n  ValidationStats,\n  ValidationSummary,\n  ValidationDetails\n} from '../types/validation'\nimport { TestRunner } from './TestRunner'\nimport { ValidationReporter } from './ValidationReporter'\nimport { TemporaryEnvironment } from './TemporaryEnvironment'\nimport { Logger } from '../utils/logger'\nimport { ErrorHandler } from '../utils/error-handler'\nimport { ErrorCode } from '../constants/errors'\n\n/**\n * 默认验证配置\n */\nconst DEFAULT_VALIDATION_CONFIG: Required<PostBuildValidationConfig> = {\n  enabled: true,\n  testFramework: 'auto',\n  testPattern: ['**/*.test.{js,ts}', '**/*.spec.{js,ts}'],\n  timeout: 60000,\n  failOnError: true,\n  environment: {\n    tempDir: '.validation-temp',\n    keepTempFiles: false,\n    env: {},\n    nodeVersion: process.version,\n    packageManager: 'auto',\n    installDependencies: true,\n    installTimeout: 300000\n  },\n  reporting: {\n    format: 'console',\n    outputPath: 'validation-report',\n    verbose: false,\n    logLevel: 'info',\n    includePerformance: true,\n    includeCoverage: false\n  },\n  hooks: {},\n  scope: {\n    formats: ['esm', 'cjs'],\n    fileTypes: ['js', 'ts', 'dts'],\n    exclude: ['**/*.d.ts', '**/node_modules/**'],\n    include: ['**/*'],\n    validateTypes: true,\n    validateStyles: false,\n    validateSourceMaps: false\n  }\n}\n\n/**\n * 打包后验证器实现\n */\nexport class PostBuildValidator extends EventEmitter implements IPostBuildValidator {\n  /** 验证配置 */\n  private config: PostBuildValidationConfig\n\n  /** 测试运行器 */\n  private testRunner: TestRunner\n\n  /** 验证报告生成器 */\n  private reporter: ValidationReporter\n\n  /** 临时环境管理器 */\n  private tempEnvironment: TemporaryEnvironment\n\n  /** 日志记录器 */\n  private logger: Logger\n\n  /** 错误处理器 */\n  private errorHandler: ErrorHandler\n\n  /**\n   * 构造函数\n   */\n  constructor(\n    config: PostBuildValidationConfig = {},\n    options: {\n      logger?: Logger\n      errorHandler?: ErrorHandler\n    } = {}\n  ) {\n    super()\n\n    // 合并配置\n    this.config = this.mergeConfig(DEFAULT_VALIDATION_CONFIG, config)\n\n    // 初始化依赖\n    this.logger = options.logger || new Logger({ level: 'info', prefix: 'PostBuildValidator' })\n    this.errorHandler = options.errorHandler || new ErrorHandler({ logger: this.logger })\n\n    // 初始化组件\n    this.testRunner = new TestRunner({\n      logger: this.logger,\n      errorHandler: this.errorHandler\n    })\n\n    this.reporter = new ValidationReporter({\n      logger: this.logger\n    })\n\n    this.tempEnvironment = new TemporaryEnvironment({\n      logger: this.logger,\n      errorHandler: this.errorHandler\n    })\n\n    this.logger.info('PostBuildValidator 初始化完成')\n  }\n\n  /**\n   * 执行验证\n   */\n  async validate(context: ValidationContext): Promise<ValidationResult> {\n    const validationId = randomUUID()\n    const startTime = Date.now()\n\n    this.logger.info(`开始打包后验证 (ID: ${validationId})`)\n\n    // 发出验证开始事件\n    this.emit('validation:start', { context, validationId, startTime })\n\n    try {\n      // 执行验证前钩子\n      if (this.config.hooks?.beforeValidation) {\n        await this.config.hooks.beforeValidation(context)\n      }\n\n      // 创建验证统计对象\n      const stats: ValidationStats = {\n        startTime,\n        endTime: 0,\n        totalDuration: 0,\n        setupDuration: 0,\n        testDuration: 0,\n        reportDuration: 0,\n        cleanupDuration: 0,\n        totalFiles: 0,\n        totalTests: 0,\n        peakMemoryUsage: 0\n      }\n\n      // 1. 准备验证环境\n      const setupStartTime = Date.now()\n      await this.setupValidationEnvironment(context)\n      stats.setupDuration = Date.now() - setupStartTime\n\n      // 执行环境准备后钩子\n      if (this.config.hooks?.afterEnvironmentSetup) {\n        await this.config.hooks.afterEnvironmentSetup(context)\n      }\n\n      // 2. 运行测试\n      const testStartTime = Date.now()\n      const testResult = await this.runValidationTests(context)\n      stats.testDuration = Date.now() - testStartTime\n      stats.totalTests = testResult.totalTests\n\n      // 3. 生成验证结果\n      const endTime = Date.now()\n      stats.endTime = endTime\n      stats.totalDuration = endTime - startTime\n\n      const validationResult: ValidationResult = {\n        success: testResult.success,\n        duration: stats.totalDuration,\n        testResult,\n        report: await this.generateValidationReport(context, testResult, stats),\n        errors: [],\n        warnings: [],\n        stats,\n        timestamp: endTime,\n        validationId\n      }\n\n      // 4. 生成报告\n      const reportStartTime = Date.now()\n      await this.outputValidationReport(validationResult)\n      stats.reportDuration = Date.now() - reportStartTime\n\n      // 5. 清理环境\n      const cleanupStartTime = Date.now()\n      await this.cleanupValidationEnvironment(context)\n      stats.cleanupDuration = Date.now() - cleanupStartTime\n\n      // 执行验证完成后钩子\n      if (this.config.hooks?.afterValidation) {\n        await this.config.hooks.afterValidation(context, validationResult)\n      }\n\n      // 发出验证完成事件\n      this.emit('validation:complete', { context, result: validationResult })\n\n      this.logger.success(`验证完成 (ID: ${validationId}), 耗时: ${stats.totalDuration}ms`)\n\n      return validationResult\n\n    } catch (error) {\n      const validationError = this.errorHandler.createError(\n        ErrorCode.BUILD_FAILED,\n        '验证过程失败',\n        { cause: error as Error }\n      )\n\n      // 执行验证失败钩子\n      if (this.config.hooks?.onValidationError) {\n        await this.config.hooks.onValidationError(context, validationError)\n      }\n\n      // 发出验证失败事件\n      this.emit('validation:error', { context, error: validationError, validationId })\n\n      // 清理环境\n      try {\n        await this.cleanupValidationEnvironment(context)\n      } catch (cleanupError) {\n        this.logger.warn('清理验证环境时出错:', cleanupError)\n      }\n\n      throw validationError\n    }\n  }\n\n  /**\n   * 设置配置\n   */\n  setConfig(config: PostBuildValidationConfig): void {\n    this.config = this.mergeConfig(this.config, config)\n    this.logger.info('验证配置已更新')\n  }\n\n  /**\n   * 获取配置\n   */\n  getConfig(): PostBuildValidationConfig {\n    return { ...this.config }\n  }\n\n  /**\n   * 清理资源\n   */\n  async dispose(): Promise<void> {\n    this.logger.info('正在清理 PostBuildValidator 资源...')\n\n    // 清理组件\n    await this.testRunner.dispose()\n    await this.tempEnvironment.dispose()\n\n    // 移除所有事件监听器\n    this.removeAllListeners()\n\n    this.logger.info('PostBuildValidator 资源清理完成')\n  }\n\n  /**\n   * 准备验证环境\n   */\n  private async setupValidationEnvironment(context: ValidationContext): Promise<void> {\n    this.logger.info('准备验证环境...')\n\n    // 创建临时目录\n    await this.tempEnvironment.create(context)\n\n    // 复制构建产物到临时环境\n    await this.tempEnvironment.copyBuildOutputs(context)\n\n    // 安装依赖（如果需要）\n    if (this.config.environment?.installDependencies) {\n      await this.testRunner.installDependencies(context)\n    }\n\n    this.logger.success('验证环境准备完成')\n  }\n\n  /**\n   * 运行验证测试\n   */\n  private async runValidationTests(context: ValidationContext): Promise<any> {\n    this.logger.info('运行验证测试...')\n\n    // 执行测试前钩子\n    if (this.config.hooks?.beforeTestRun) {\n      await this.config.hooks.beforeTestRun(context)\n    }\n\n    // 运行测试\n    const testResult = await this.testRunner.runTests(context)\n\n    // 执行测试后钩子\n    if (this.config.hooks?.afterTestRun) {\n      await this.config.hooks.afterTestRun(context, testResult)\n    }\n\n    this.logger.success(`测试运行完成: ${testResult.passedTests}/${testResult.totalTests} 通过`)\n\n    return testResult\n  }\n\n  /**\n   * 生成验证报告\n   */\n  private async generateValidationReport(\n    context: ValidationContext,\n    testResult: any,\n    stats: ValidationStats\n  ): Promise<ValidationReport> {\n    this.logger.info('生成验证报告...')\n\n    const summary: ValidationSummary = {\n      status: testResult.success ? 'passed' : 'failed',\n      totalFiles: stats.totalFiles,\n      passedFiles: stats.totalFiles, // 简化实现\n      failedFiles: 0,\n      totalTests: testResult.totalTests,\n      passedTests: testResult.passedTests,\n      failedTests: testResult.failedTests,\n      duration: stats.totalDuration\n    }\n\n    const details: ValidationDetails = {\n      fileResults: [],\n      formatResults: [],\n      typeResults: [],\n      styleResults: []\n    }\n\n    const report: ValidationReport = {\n      title: `构建验证报告 - ${context.buildContext.buildId}`,\n      summary,\n      details,\n      recommendations: [],\n      generatedAt: Date.now(),\n      version: '1.0.0'\n    }\n\n    return report\n  }\n\n  /**\n   * 输出验证报告\n   */\n  private async outputValidationReport(result: ValidationResult): Promise<void> {\n    if (this.config.reporting) {\n      await this.reporter.outputReport(result.report, this.config.reporting)\n    }\n  }\n\n  /**\n   * 清理验证环境\n   */\n  private async cleanupValidationEnvironment(context: ValidationContext): Promise<void> {\n    this.logger.info('清理验证环境...')\n\n    if (!this.config.environment?.keepTempFiles) {\n      await this.tempEnvironment.cleanup(context)\n    }\n\n    this.logger.success('验证环境清理完成')\n  }\n\n  /**\n   * 合并配置\n   */\n  private mergeConfig(\n    base: PostBuildValidationConfig,\n    override: PostBuildValidationConfig\n  ): PostBuildValidationConfig {\n    return {\n      ...base,\n      ...override,\n      environment: {\n        ...base.environment,\n        ...override.environment\n      },\n      reporting: {\n        ...base.reporting,\n        ...override.reporting\n      },\n      hooks: {\n        ...base.hooks,\n        ...override.hooks\n      },\n      scope: {\n        ...base.scope,\n        ...override.scope\n      }\n    }\n  }\n}\n"]}