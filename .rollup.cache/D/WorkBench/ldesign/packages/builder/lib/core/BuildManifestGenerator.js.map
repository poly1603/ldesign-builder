{"version":3,"file":"BuildManifestGenerator.js","sourceRoot":"","sources":["../../src/core/BuildManifestGenerator.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * 构建产物清单生成器\n * \n * 负责生成详细的构建产物清单，支持多种格式输出\n * \n * @author LDesign Team\n * @version 1.0.0\n */\n\nimport fs from 'fs'\nimport path from 'path'\nimport { createHash } from 'crypto'\nimport { Logger } from '../utils/logger'\nimport type { BuildResult } from '../types/builder'\nimport type { BuilderConfig } from '../types/config'\n\nexport interface ManifestFile {\n  /** 文件路径 */\n  path: string\n  /** 文件名 */\n  name: string\n  /** 文件大小（字节） */\n  size: number\n  /** 格式化的文件大小 */\n  formattedSize: string\n  /** 文件类型 */\n  type: 'js' | 'css' | 'map' | 'dts' | 'other'\n  /** 文件格式 */\n  format?: 'esm' | 'cjs' | 'umd' | 'iife'\n  /** 文件哈希 */\n  hash: string\n  /** 创建时间 */\n  createdAt: string\n  /** 是否为入口文件 */\n  isEntry: boolean\n  /** 是否为 chunk */\n  isChunk: boolean\n  /** 依赖的文件 */\n  dependencies?: string[]\n}\n\nexport interface BuildManifest {\n  /** 构建信息 */\n  build: {\n    /** 构建ID */\n    id: string\n    /** 构建时间戳 */\n    timestamp: number\n    /** 格式化的构建时间 */\n    formattedTime: string\n    /** 构建持续时间（毫秒） */\n    duration: number\n    /** 格式化的构建持续时间 */\n    formattedDuration: string\n    /** 打包工具 */\n    bundler: string\n    /** 打包工具版本 */\n    bundlerVersion?: string\n    /** 构建模式 */\n    mode: string\n    /** 是否成功 */\n    success: boolean\n  }\n  \n  /** 项目信息 */\n  project: {\n    /** 项目名称 */\n    name: string\n    /** 项目版本 */\n    version: string\n    /** 项目描述 */\n    description?: string\n    /** 项目作者 */\n    author?: string\n  }\n  \n  /** 构建配置 */\n  config: {\n    /** 入口文件 */\n    input: string | string[] | Record<string, string>\n    /** 输出目录 */\n    outputDir: string\n    /** 输出格式 */\n    formats: string[]\n    /** 是否启用 sourcemap */\n    sourcemap: boolean\n    /** 是否压缩 */\n    minify: boolean\n    /** 外部依赖 */\n    external: string[]\n  }\n  \n  /** 文件列表 */\n  files: ManifestFile[]\n  \n  /** 统计信息 */\n  stats: {\n    /** 总文件数 */\n    totalFiles: number\n    /** 总大小（字节） */\n    totalSize: number\n    /** 格式化的总大小 */\n    formattedTotalSize: string\n    /** 按类型分组的统计 */\n    byType: Record<string, { count: number; size: number; formattedSize: string }>\n    /** 按格式分组的统计 */\n    byFormat: Record<string, { count: number; size: number; formattedSize: string }>\n    /** 最大文件 */\n    largestFile: { name: string; size: number; formattedSize: string }\n    /** 最小文件 */\n    smallestFile: { name: string; size: number; formattedSize: string }\n  }\n}\n\nexport type ManifestFormat = 'json' | 'markdown' | 'html'\n\nexport class BuildManifestGenerator {\n  private logger: Logger\n\n  constructor(logger?: Logger) {\n    this.logger = logger || new Logger()\n  }\n\n  /**\n   * 生成构建清单\n   */\n  async generateManifest(\n    buildResult: BuildResult,\n    config: BuilderConfig,\n    outputDir: string\n  ): Promise<BuildManifest> {\n    this.logger.info('生成构建清单...')\n\n    // 获取项目信息\n    const projectInfo = await this.getProjectInfo()\n    \n    // 扫描输出文件\n    const files = await this.scanOutputFiles(outputDir)\n    \n    // 生成统计信息\n    const stats = this.generateStats(files)\n\n    const manifest: BuildManifest = {\n      build: {\n        id: buildResult.buildId || `build-${Date.now()}`,\n        timestamp: buildResult.timestamp || Date.now(),\n        formattedTime: new Date(buildResult.timestamp || Date.now()).toISOString(),\n        duration: buildResult.duration || 0,\n        formattedDuration: this.formatDuration(buildResult.duration || 0),\n        bundler: buildResult.bundler || 'unknown',\n        bundlerVersion: await this.getBundlerVersion(buildResult.bundler || 'unknown'),\n        mode: buildResult.mode || 'production',\n        success: buildResult.success\n      },\n      project: projectInfo,\n      config: {\n        input: (config.input ?? 'src/index.ts') as string | string[] | Record<string, string>,\n        outputDir: config.output?.dir || 'dist',\n        formats: Array.isArray(config.output?.format) \n          ? config.output.format \n          : config.output?.format ? [config.output.format] : ['esm'],\n        sourcemap: Boolean(config.output?.sourcemap),\n        minify: Boolean(config.minify),\n        external: Array.isArray(config.external) ? config.external : []\n      },\n      files,\n      stats\n    }\n\n    this.logger.success(`构建清单生成完成，包含 ${files.length} 个文件`)\n    return manifest\n  }\n\n  /**\n   * 保存清单到文件\n   */\n  async saveManifest(\n    manifest: BuildManifest,\n    outputDir: string,\n    formats: ManifestFormat[] = ['json']\n  ): Promise<void> {\n    for (const format of formats) {\n      const content = this.formatManifest(manifest, format)\n      const filename = `build-manifest.${format}`\n      const filepath = path.join(outputDir, filename)\n      \n      await fs.promises.writeFile(filepath, content, 'utf-8')\n      this.logger.info(`清单已保存: ${filename}`)\n    }\n  }\n\n  /**\n   * 格式化清单内容\n   */\n  private formatManifest(manifest: BuildManifest, format: ManifestFormat): string {\n    switch (format) {\n      case 'json':\n        return JSON.stringify(manifest, null, 2)\n      case 'markdown':\n        return this.formatMarkdown(manifest)\n      case 'html':\n        return this.formatHTML(manifest)\n      default:\n        throw new Error(`不支持的格式: ${format}`)\n    }\n  }\n\n  /**\n   * 格式化为 Markdown\n   */\n  private formatMarkdown(manifest: BuildManifest): string {\n    const { build, project, config, files, stats } = manifest\n\n    return `# 构建清单\n\n## 📋 构建信息\n\n- **构建ID**: ${build.id}\n- **构建时间**: ${build.formattedTime}\n- **构建持续时间**: ${build.formattedDuration}\n- **打包工具**: ${build.bundler} ${build.bundlerVersion || ''}\n- **构建模式**: ${build.mode}\n- **构建状态**: ${build.success ? '✅ 成功' : '❌ 失败'}\n\n## 📦 项目信息\n\n- **项目名称**: ${project.name}\n- **项目版本**: ${project.version}\n${project.description ? `- **项目描述**: ${project.description}` : ''}\n${project.author ? `- **项目作者**: ${project.author}` : ''}\n\n## ⚙️ 构建配置\n\n- **入口文件**: ${typeof config.input === 'string' ? config.input : JSON.stringify(config.input)}\n- **输出目录**: ${config.outputDir}\n- **输出格式**: ${config.formats.join(', ')}\n- **Source Map**: ${config.sourcemap ? '✅' : '❌'}\n- **代码压缩**: ${config.minify ? '✅' : '❌'}\n- **外部依赖**: ${config.external.length} 个\n\n## 📊 统计信息\n\n- **总文件数**: ${stats.totalFiles}\n- **总大小**: ${stats.formattedTotalSize}\n- **最大文件**: ${stats.largestFile.name} (${stats.largestFile.formattedSize})\n- **最小文件**: ${stats.smallestFile.name} (${stats.smallestFile.formattedSize})\n\n### 按类型分组\n\n${Object.entries(stats.byType).map(([type, stat]) => \n  `- **${type.toUpperCase()}**: ${stat.count} 个文件, ${stat.formattedSize}`\n).join('\\n')}\n\n### 按格式分组\n\n${Object.entries(stats.byFormat).map(([format, stat]) => \n  `- **${format.toUpperCase()}**: ${stat.count} 个文件, ${stat.formattedSize}`\n).join('\\n')}\n\n## 📁 文件列表\n\n| 文件名 | 大小 | 类型 | 格式 | 哈希 |\n|--------|------|------|------|------|\n${files.map(file => \n  `| ${file.name} | ${file.formattedSize} | ${file.type} | ${file.format || '-'} | ${file.hash.substring(0, 8)} |`\n).join('\\n')}\n\n---\n*生成时间: ${new Date().toISOString()}*\n`\n  }\n\n  /**\n   * 格式化为 HTML\n   */\n  private formatHTML(manifest: BuildManifest): string {\n    // HTML 格式实现将在下一个编辑中添加\n    return `<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>构建清单 - ${manifest.project.name}</title>\n    <style>\n        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 40px; }\n        .header { border-bottom: 2px solid #eee; padding-bottom: 20px; margin-bottom: 30px; }\n        .section { margin-bottom: 30px; }\n        .stats { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; }\n        .stat-card { background: #f8f9fa; padding: 15px; border-radius: 8px; }\n        table { width: 100%; border-collapse: collapse; margin-top: 15px; }\n        th, td { padding: 8px 12px; text-align: left; border-bottom: 1px solid #ddd; }\n        th { background: #f8f9fa; font-weight: 600; }\n        .success { color: #28a745; }\n        .error { color: #dc3545; }\n    </style>\n</head>\n<body>\n    <div class=\"header\">\n        <h1>📋 构建清单</h1>\n        <p><strong>${manifest.project.name}</strong> v${manifest.project.version}</p>\n    </div>\n    \n    <div class=\"section\">\n        <h2>🏗️ 构建信息</h2>\n        <div class=\"stats\">\n            <div class=\"stat-card\">\n                <h4>构建状态</h4>\n                <p class=\"${manifest.build.success ? 'success' : 'error'}\">\n                    ${manifest.build.success ? '✅ 成功' : '❌ 失败'}\n                </p>\n            </div>\n            <div class=\"stat-card\">\n                <h4>打包工具</h4>\n                <p>${manifest.build.bundler} ${manifest.build.bundlerVersion || ''}</p>\n            </div>\n            <div class=\"stat-card\">\n                <h4>构建时间</h4>\n                <p>${manifest.build.formattedDuration}</p>\n            </div>\n            <div class=\"stat-card\">\n                <h4>总大小</h4>\n                <p>${manifest.stats.formattedTotalSize}</p>\n            </div>\n        </div>\n    </div>\n    \n    <div class=\"section\">\n        <h2>📁 文件列表</h2>\n        <table>\n            <thead>\n                <tr>\n                    <th>文件名</th>\n                    <th>大小</th>\n                    <th>类型</th>\n                    <th>格式</th>\n                    <th>哈希</th>\n                </tr>\n            </thead>\n            <tbody>\n                ${manifest.files.map(file => `\n                <tr>\n                    <td>${file.name}</td>\n                    <td>${file.formattedSize}</td>\n                    <td>${file.type}</td>\n                    <td>${file.format || '-'}</td>\n                    <td><code>${file.hash.substring(0, 8)}</code></td>\n                </tr>\n                `).join('')}\n            </tbody>\n        </table>\n    </div>\n    \n    <footer style=\"margin-top: 40px; padding-top: 20px; border-top: 1px solid #eee; color: #666;\">\n        <p>生成时间: ${new Date().toISOString()}</p>\n    </footer>\n</body>\n</html>`\n  }\n\n  /**\n   * 扫描输出文件\n   */\n  private async scanOutputFiles(outputDir: string): Promise<ManifestFile[]> {\n    const files: ManifestFile[] = []\n    \n    if (!fs.existsSync(outputDir)) {\n      return files\n    }\n\n    const scanDir = async (dir: string, basePath = ''): Promise<void> => {\n      const entries = await fs.promises.readdir(dir, { withFileTypes: true })\n      \n      for (const entry of entries) {\n        const fullPath = path.join(dir, entry.name)\n        const relativePath = path.join(basePath, entry.name)\n        \n        if (entry.isDirectory()) {\n          await scanDir(fullPath, relativePath)\n        } else if (entry.isFile()) {\n          const stats = await fs.promises.stat(fullPath)\n          const content = await fs.promises.readFile(fullPath)\n          const hash = createHash('md5').update(content).digest('hex')\n          \n          files.push({\n            path: relativePath,\n            name: entry.name,\n            size: stats.size,\n            formattedSize: this.formatBytes(stats.size),\n            type: this.getFileType(entry.name),\n            format: this.getFileFormat(entry.name),\n            hash,\n            createdAt: stats.birthtime.toISOString(),\n            isEntry: this.isEntryFile(entry.name),\n            isChunk: this.isChunkFile(entry.name),\n            dependencies: []\n          })\n        }\n      }\n    }\n\n    await scanDir(outputDir)\n    return files.sort((a, b) => a.path.localeCompare(b.path))\n  }\n\n  /**\n   * 生成统计信息\n   */\n  private generateStats(files: ManifestFile[]) {\n    const stats = {\n      totalFiles: files.length,\n      totalSize: files.reduce((sum, file) => sum + file.size, 0),\n      formattedTotalSize: '',\n      byType: {} as Record<string, { count: number; size: number; formattedSize: string }>,\n      byFormat: {} as Record<string, { count: number; size: number; formattedSize: string }>,\n      largestFile: { name: '', size: 0, formattedSize: '' },\n      smallestFile: { name: '', size: Infinity, formattedSize: '' }\n    }\n\n    stats.formattedTotalSize = this.formatBytes(stats.totalSize)\n\n    // 按类型统计\n    for (const file of files) {\n      if (!stats.byType[file.type]) {\n        stats.byType[file.type] = { count: 0, size: 0, formattedSize: '' }\n      }\n      stats.byType[file.type].count++\n      stats.byType[file.type].size += file.size\n    }\n\n    // 按格式统计\n    for (const file of files) {\n      if (file.format) {\n        if (!stats.byFormat[file.format]) {\n          stats.byFormat[file.format] = { count: 0, size: 0, formattedSize: '' }\n        }\n        stats.byFormat[file.format].count++\n        stats.byFormat[file.format].size += file.size\n      }\n    }\n\n    // 格式化大小\n    Object.values(stats.byType).forEach(stat => {\n      stat.formattedSize = this.formatBytes(stat.size)\n    })\n    Object.values(stats.byFormat).forEach(stat => {\n      stat.formattedSize = this.formatBytes(stat.size)\n    })\n\n    // 找出最大和最小文件\n    for (const file of files) {\n      if (file.size > stats.largestFile.size) {\n        stats.largestFile = {\n          name: file.name,\n          size: file.size,\n          formattedSize: file.formattedSize\n        }\n      }\n      if (file.size < stats.smallestFile.size) {\n        stats.smallestFile = {\n          name: file.name,\n          size: file.size,\n          formattedSize: file.formattedSize\n        }\n      }\n    }\n\n    return stats\n  }\n\n  /**\n   * 获取项目信息\n   */\n  private async getProjectInfo() {\n    try {\n      const packageJsonPath = path.resolve(process.cwd(), 'package.json')\n      const packageJson = JSON.parse(await fs.promises.readFile(packageJsonPath, 'utf-8'))\n      \n      return {\n        name: packageJson.name || 'unknown',\n        version: packageJson.version || '0.0.0',\n        description: packageJson.description,\n        author: packageJson.author\n      }\n    } catch (error) {\n      return {\n        name: 'unknown',\n        version: '0.0.0'\n      }\n    }\n  }\n\n  /**\n   * 获取打包工具版本\n   */\n  private async getBundlerVersion(bundler: string): Promise<string | undefined> {\n    try {\n      const packagePath = path.resolve(process.cwd(), 'node_modules', bundler, 'package.json')\n      const packageJson = JSON.parse(await fs.promises.readFile(packagePath, 'utf-8'))\n      return packageJson.version\n    } catch (error) {\n      return undefined\n    }\n  }\n\n  /**\n   * 获取文件类型\n   */\n  private getFileType(filename: string): ManifestFile['type'] {\n    const ext = path.extname(filename).toLowerCase()\n    if (ext === '.js' || ext === '.mjs' || ext === '.cjs') return 'js'\n    if (ext === '.css') return 'css'\n    if (ext === '.map') return 'map'\n    if (ext === '.ts' || filename.endsWith('.d.ts') || filename.endsWith('.d.cts')) return 'dts'\n    return 'other'\n  }\n\n  /**\n   * 获取文件格式\n   */\n  private getFileFormat(filename: string): ManifestFile['format'] | undefined {\n    if (filename.includes('.esm.') || filename.endsWith('.js')) return 'esm'\n    if (filename.includes('.cjs') || filename.endsWith('.cjs')) return 'cjs'\n    if (filename.includes('.umd.')) return 'umd'\n    if (filename.includes('.iife.')) return 'iife'\n    return undefined\n  }\n\n  /**\n   * 判断是否为入口文件\n   */\n  private isEntryFile(filename: string): boolean {\n    return filename.startsWith('index.') && !filename.endsWith('.map')\n  }\n\n  /**\n   * 判断是否为 chunk 文件\n   */\n  private isChunkFile(filename: string): boolean {\n    return filename.includes('chunk') || filename.includes('vendor')\n  }\n\n  /**\n   * 格式化字节大小\n   */\n  private formatBytes(bytes: number): string {\n    if (bytes === 0) return '0 B'\n    const k = 1024\n    const sizes = ['B', 'KB', 'MB', 'GB']\n    const i = Math.floor(Math.log(bytes) / Math.log(k))\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]\n  }\n\n  /**\n   * 格式化持续时间\n   */\n  private formatDuration(ms: number): string {\n    if (ms < 1000) return `${ms.toFixed(0)}ms`\n    if (ms < 60000) return `${(ms / 1000).toFixed(2)}s`\n    const minutes = Math.floor(ms / 60000)\n    const seconds = ((ms % 60000) / 1000).toFixed(0)\n    return `${minutes}m ${seconds}s`\n  }\n}\n"]}