{"version":3,"file":"TestRunner.js","sourceRoot":"","sources":["../../src/core/TestRunner.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * 测试运行器\n * \n * 负责检测测试框架、安装依赖和运行测试用例\n * 支持多种测试框架的自动检测和运行\n * \n * @author LDesign Team\n * @version 1.0.0\n */\n\nimport * as path from 'path'\nimport * as fs from 'fs-extra'\nimport { spawn } from 'child_process'\nimport type {\n  ITestRunner,\n  ValidationContext,\n  TestRunResult,\n  TestError,\n  TestPerformanceMetrics\n} from '../types/validation'\nimport { Logger } from '../utils/logger'\nimport { ErrorHandler } from '../utils/error-handler'\nimport { ErrorCode } from '../constants/errors'\n\n/**\n * 支持的测试框架配置\n */\nconst TEST_FRAMEWORKS = {\n  vitest: {\n    configFiles: ['vitest.config.ts', 'vitest.config.js', 'vite.config.ts', 'vite.config.js'],\n    command: 'vitest',\n    args: ['run', '--reporter=json'],\n    dependencies: ['vitest']\n  },\n  jest: {\n    configFiles: ['jest.config.js', 'jest.config.ts', 'jest.config.json'],\n    command: 'jest',\n    args: ['--json', '--coverage=false'],\n    dependencies: ['jest']\n  },\n  mocha: {\n    configFiles: ['.mocharc.json', '.mocharc.js', '.mocharc.yaml'],\n    command: 'mocha',\n    args: ['--reporter', 'json'],\n    dependencies: ['mocha']\n  }\n}\n\n/**\n * 包管理器配置\n */\nconst PACKAGE_MANAGERS = {\n  npm: {\n    installCommand: 'npm',\n    installArgs: ['install'],\n    runCommand: 'npx'\n  },\n  yarn: {\n    installCommand: 'yarn',\n    installArgs: ['install'],\n    runCommand: 'yarn'\n  },\n  pnpm: {\n    installCommand: 'pnpm',\n    installArgs: ['install'],\n    runCommand: 'pnpm'\n  }\n}\n\n/**\n * 测试运行器实现\n */\nexport class TestRunner implements ITestRunner {\n  /** 日志记录器 */\n  private logger: Logger\n\n  /** 错误处理器 */\n  private errorHandler: ErrorHandler\n\n  /**\n   * 构造函数\n   */\n  constructor(options: {\n    logger?: Logger\n    errorHandler?: ErrorHandler\n  } = {}) {\n    this.logger = options.logger || new Logger({ level: 'info', prefix: 'TestRunner' })\n    this.errorHandler = options.errorHandler || new ErrorHandler({ logger: this.logger })\n  }\n\n  /**\n   * 运行测试\n   */\n  async runTests(context: ValidationContext): Promise<TestRunResult> {\n    const startTime = Date.now()\n    this.logger.info('开始运行测试...')\n\n    try {\n      // 检测测试框架\n      const framework = await this.detectFramework(context.projectRoot)\n      this.logger.info(`检测到测试框架: ${framework}`)\n\n      // 获取框架配置\n      const frameworkConfig = TEST_FRAMEWORKS[framework as keyof typeof TEST_FRAMEWORKS]\n      if (!frameworkConfig) {\n        throw new Error(`不支持的测试框架: ${framework}`)\n      }\n\n      // 构建测试命令\n      const packageManager = await this.detectPackageManager(context.projectRoot)\n      const runCommand = PACKAGE_MANAGERS[packageManager as keyof typeof PACKAGE_MANAGERS].runCommand\n\n      // 运行测试\n      const testOutput = await this.executeTests(\n        context.tempDir,\n        runCommand,\n        frameworkConfig.command,\n        frameworkConfig.args,\n        context.config.timeout || 60000\n      )\n\n      // 解析测试结果\n      const result = await this.parseTestOutput(testOutput, framework)\n\n      // 计算性能指标\n      const duration = Date.now() - startTime\n      const performance: TestPerformanceMetrics = {\n        setupTime: 0,\n        executionTime: duration,\n        teardownTime: 0,\n        peakMemoryUsage: process.memoryUsage().heapUsed / 1024 / 1024,\n        cpuUsage: 0\n      }\n\n      const testResult: TestRunResult = {\n        success: result.success ?? false,\n        totalTests: result.totalTests ?? 0,\n        passedTests: result.passedTests ?? 0,\n        failedTests: result.failedTests ?? 0,\n        skippedTests: result.skippedTests ?? 0,\n        output: result.output ?? '',\n        errors: result.errors ?? [],\n        duration,\n        performance\n      }\n\n      this.logger.success(`测试运行完成: ${testResult.passedTests}/${testResult.totalTests} 通过`)\n\n      return testResult\n\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error)\n      const testError = this.errorHandler.createError(\n        ErrorCode.BUILD_FAILED,\n        errorMessage,\n        { cause: error as Error }\n      )\n\n      // 返回失败结果\n      return {\n        success: false,\n        totalTests: 0,\n        passedTests: 0,\n        failedTests: 0,\n        skippedTests: 0,\n        duration: Date.now() - startTime,\n        output: errorMessage,\n        errors: [{\n          message: errorMessage,\n          stack: testError.stack,\n          type: 'runtime'\n        }],\n        performance: {\n          setupTime: 0,\n          executionTime: Date.now() - startTime,\n          teardownTime: 0,\n          peakMemoryUsage: 0,\n          cpuUsage: 0\n        }\n      }\n    }\n  }\n\n  /**\n   * 检测测试框架\n   */\n  async detectFramework(projectRoot: string): Promise<string> {\n    this.logger.info('检测测试框架...')\n\n    // 检查 package.json 中的依赖\n    const packageJsonPath = path.join(projectRoot, 'package.json')\n    if (await fs.pathExists(packageJsonPath)) {\n      const packageJson = await fs.readJson(packageJsonPath)\n      const allDeps = {\n        ...packageJson.dependencies,\n        ...packageJson.devDependencies\n      }\n\n      // 按优先级检测\n      if (allDeps.vitest) return 'vitest'\n      if (allDeps.jest) return 'jest'\n      if (allDeps.mocha) return 'mocha'\n    }\n\n    // 检查配置文件\n    for (const [framework, config] of Object.entries(TEST_FRAMEWORKS)) {\n      for (const configFile of config.configFiles) {\n        if (await fs.pathExists(path.join(projectRoot, configFile))) {\n          return framework\n        }\n      }\n    }\n\n    // 默认返回 vitest\n    this.logger.warn('未检测到测试框架，使用默认的 vitest')\n    return 'vitest'\n  }\n\n  /**\n   * 安装依赖\n   */\n  async installDependencies(context: ValidationContext): Promise<void> {\n    this.logger.info('安装依赖...')\n\n    const packageManager = await this.detectPackageManager(context.projectRoot)\n    const pmConfig = PACKAGE_MANAGERS[packageManager as keyof typeof PACKAGE_MANAGERS]\n\n    try {\n      await this.executeCommand(\n        context.tempDir,\n        pmConfig.installCommand,\n        pmConfig.installArgs,\n        context.config.environment?.installTimeout || 300000\n      )\n\n      this.logger.success('依赖安装完成')\n    } catch (error) {\n      throw this.errorHandler.createError(\n        ErrorCode.BUILD_FAILED,\n        '依赖安装失败',\n        { cause: error as Error }\n      )\n    }\n  }\n\n  /**\n   * 清理资源\n   */\n  async dispose(): Promise<void> {\n    this.logger.info('TestRunner 资源清理完成')\n  }\n\n  /**\n   * 检测包管理器\n   */\n  private async detectPackageManager(projectRoot: string): Promise<string> {\n    // 检查锁文件\n    if (await fs.pathExists(path.join(projectRoot, 'pnpm-lock.yaml'))) {\n      return 'pnpm'\n    }\n    if (await fs.pathExists(path.join(projectRoot, 'yarn.lock'))) {\n      return 'yarn'\n    }\n    if (await fs.pathExists(path.join(projectRoot, 'package-lock.json'))) {\n      return 'npm'\n    }\n\n    // 默认使用 npm\n    return 'npm'\n  }\n\n  /**\n   * 执行测试命令\n   */\n  private async executeTests(\n    cwd: string,\n    runCommand: string,\n    testCommand: string,\n    args: string[],\n    timeout: number\n  ): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const fullCommand = [testCommand, ...args]\n      const child = spawn(runCommand, fullCommand, {\n        cwd,\n        stdio: 'pipe',\n        shell: true\n      })\n\n      let stdout = ''\n      let stderr = ''\n\n      child.stdout?.on('data', (data) => {\n        stdout += data.toString()\n      })\n\n      child.stderr?.on('data', (data) => {\n        stderr += data.toString()\n      })\n\n      const timer = setTimeout(() => {\n        child.kill('SIGTERM')\n        reject(new Error(`测试超时 (${timeout}ms)`))\n      }, timeout)\n\n      child.on('close', (code) => {\n        clearTimeout(timer)\n        if (code === 0) {\n          resolve(stdout)\n        } else {\n          reject(new Error(`测试失败 (退出码: ${code})\\n${stderr}`))\n        }\n      })\n\n      child.on('error', (error) => {\n        clearTimeout(timer)\n        reject(error)\n      })\n    })\n  }\n\n  /**\n   * 执行命令\n   */\n  private async executeCommand(\n    cwd: string,\n    command: string,\n    args: string[],\n    timeout: number\n  ): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const child = spawn(command, args, {\n        cwd,\n        stdio: 'pipe',\n        shell: true\n      })\n\n      let stdout = ''\n      let stderr = ''\n\n      child.stdout?.on('data', (data) => {\n        stdout += data.toString()\n      })\n\n      child.stderr?.on('data', (data) => {\n        stderr += data.toString()\n      })\n\n      const timer = setTimeout(() => {\n        child.kill('SIGTERM')\n        reject(new Error(`命令超时 (${timeout}ms)`))\n      }, timeout)\n\n      child.on('close', (code) => {\n        clearTimeout(timer)\n        if (code === 0) {\n          resolve(stdout)\n        } else {\n          reject(new Error(`命令失败 (退出码: ${code})\\n${stderr}`))\n        }\n      })\n\n      child.on('error', (error) => {\n        clearTimeout(timer)\n        reject(error)\n      })\n    })\n  }\n\n  /**\n   * 解析测试输出\n   */\n  private async parseTestOutput(output: string, framework: string): Promise<Partial<TestRunResult>> {\n    try {\n      // 尝试解析 JSON 输出\n      const result = JSON.parse(output)\n\n      // 根据不同框架解析结果\n      switch (framework) {\n        case 'vitest':\n          return this.parseVitestOutput(result)\n        case 'jest':\n          return this.parseJestOutput(result)\n        case 'mocha':\n          return this.parseMochaOutput(result)\n        default:\n          return this.parseGenericOutput(result)\n      }\n    } catch (error) {\n      // 如果无法解析 JSON，返回基本结果\n      return {\n        success: output.includes('PASS') || output.includes('✓'),\n        totalTests: 0,\n        passedTests: 0,\n        failedTests: 0,\n        skippedTests: 0,\n        output,\n        errors: []\n      }\n    }\n  }\n\n  /**\n   * 解析 Vitest 输出\n   */\n  private parseVitestOutput(result: any): Partial<TestRunResult> {\n    return {\n      success: result.success || false,\n      totalTests: result.numTotalTests || 0,\n      passedTests: result.numPassedTests || 0,\n      failedTests: result.numFailedTests || 0,\n      skippedTests: result.numPendingTests || 0,\n      output: JSON.stringify(result, null, 2),\n      errors: this.extractVitestErrors(result)\n    }\n  }\n\n  /**\n   * 解析 Jest 输出\n   */\n  private parseJestOutput(result: any): Partial<TestRunResult> {\n    return {\n      success: result.success || false,\n      totalTests: result.numTotalTests || 0,\n      passedTests: result.numPassedTests || 0,\n      failedTests: result.numFailedTests || 0,\n      skippedTests: result.numPendingTests || 0,\n      output: JSON.stringify(result, null, 2),\n      errors: this.extractJestErrors(result)\n    }\n  }\n\n  /**\n   * 解析 Mocha 输出\n   */\n  private parseMochaOutput(result: any): Partial<TestRunResult> {\n    const tests = result.tests || []\n    const passed = tests.filter((t: any) => t.state === 'passed').length\n    const failed = tests.filter((t: any) => t.state === 'failed').length\n    const pending = tests.filter((t: any) => t.pending).length\n\n    return {\n      success: failed === 0,\n      totalTests: tests.length,\n      passedTests: passed,\n      failedTests: failed,\n      skippedTests: pending,\n      output: JSON.stringify(result, null, 2),\n      errors: this.extractMochaErrors(result)\n    }\n  }\n\n  /**\n   * 解析通用输出\n   */\n  private parseGenericOutput(result: any): Partial<TestRunResult> {\n    return {\n      success: result.success || false,\n      totalTests: result.totalTests || 0,\n      passedTests: result.passedTests || 0,\n      failedTests: result.failedTests || 0,\n      skippedTests: result.skippedTests || 0,\n      output: JSON.stringify(result, null, 2),\n      errors: []\n    }\n  }\n\n  /**\n   * 提取 Vitest 错误\n   */\n  private extractVitestErrors(result: any): TestError[] {\n    const errors: TestError[] = []\n    // 简化实现，实际应该解析具体的错误信息\n    if (result.testResults) {\n      result.testResults.forEach((testResult: any) => {\n        if (testResult.assertionResults) {\n          testResult.assertionResults.forEach((assertion: any) => {\n            if (assertion.status === 'failed') {\n              errors.push({\n                message: assertion.failureMessages?.[0] || '测试失败',\n                type: 'assertion',\n                file: testResult.name\n              })\n            }\n          })\n        }\n      })\n    }\n    return errors\n  }\n\n  /**\n   * 提取 Jest 错误\n   */\n  private extractJestErrors(result: any): TestError[] {\n    const errors: TestError[] = []\n    // 简化实现\n    if (result.testResults) {\n      result.testResults.forEach((testResult: any) => {\n        if (testResult.message) {\n          errors.push({\n            message: testResult.message,\n            type: 'assertion',\n            file: testResult.name\n          })\n        }\n      })\n    }\n    return errors\n  }\n\n  /**\n   * 提取 Mocha 错误\n   */\n  private extractMochaErrors(result: any): TestError[] {\n    const errors: TestError[] = []\n    if (result.failures) {\n      result.failures.forEach((failure: any) => {\n        errors.push({\n          message: failure.err?.message || '测试失败',\n          stack: failure.err?.stack,\n          type: 'assertion',\n          file: failure.file\n        })\n      })\n    }\n    return errors\n  }\n}\n"]}