{"version":3,"file":"TemporaryEnvironment.js","sourceRoot":"","sources":["../../src/core/TemporaryEnvironment.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * 临时环境管理器\n * \n * 负责创建、管理和清理验证过程中的临时环境\n * 包括临时目录创建、文件复制、依赖替换等功能\n * \n * @author LDesign Team\n * @version 1.0.0\n */\n\nimport * as path from 'path'\nimport * as fs from 'fs-extra'\nimport * as os from 'os'\nimport { randomUUID } from 'crypto'\nimport type { ValidationContext } from '../types/validation'\nimport { Logger } from '../utils/logger'\nimport { ErrorHandler } from '../utils/error-handler'\nimport { ErrorCode } from '../constants/errors'\n\n/**\n * 临时环境管理器实现\n */\nexport class TemporaryEnvironment {\n  /** 日志记录器 */\n  private logger: Logger\n\n  /** 错误处理器 */\n  private errorHandler: ErrorHandler\n\n  /** 创建的临时目录列表 */\n  private tempDirs: Set<string> = new Set()\n\n  /**\n   * 构造函数\n   */\n  constructor(options: {\n    logger?: Logger\n    errorHandler?: ErrorHandler\n  } = {}) {\n    this.logger = options.logger || new Logger({ level: 'info', prefix: 'TemporaryEnvironment' })\n    this.errorHandler = options.errorHandler || new ErrorHandler({ logger: this.logger })\n  }\n\n  /**\n   * 创建临时环境\n   */\n  async create(context: ValidationContext): Promise<void> {\n    this.logger.info('创建临时验证环境...')\n\n    try {\n      // 创建临时目录\n      const tempDir = await this.createTempDirectory(context)\n      context.tempDir = tempDir\n      this.tempDirs.add(tempDir)\n\n      // 复制项目文件到临时目录\n      await this.copyProjectFiles(context)\n\n      // 修改 package.json 以使用构建产物\n      await this.updatePackageJson(context)\n\n      this.logger.success(`临时环境创建完成: ${tempDir}`)\n\n    } catch (error) {\n      throw this.errorHandler.createError(\n        ErrorCode.BUILD_FAILED,\n        '创建临时环境失败',\n        { cause: error as Error }\n      )\n    }\n  }\n\n  /**\n   * 复制构建产物到临时环境\n   */\n  async copyBuildOutputs(context: ValidationContext): Promise<void> {\n    this.logger.info('复制构建产物到临时环境...')\n\n    try {\n      // 复制构建输出文件\n      for (const output of context.buildResult.outputs) {\n        // 假设输出文件在输出目录中\n        const sourcePath = path.join(context.outputDir, output.fileName)\n        const targetPath = path.join(context.tempDir, output.fileName)\n\n        if (await fs.pathExists(sourcePath)) {\n          await fs.ensureDir(path.dirname(targetPath))\n          await fs.copy(sourcePath, targetPath)\n          this.logger.debug(`复制文件: ${sourcePath} -> ${targetPath}`)\n        }\n      }\n\n      this.logger.success('构建产物复制完成')\n\n    } catch (error) {\n      throw this.errorHandler.createError(\n        ErrorCode.BUILD_FAILED,\n        '复制构建产物失败',\n        { cause: error as Error }\n      )\n    }\n  }\n\n  /**\n   * 清理临时环境\n   */\n  async cleanup(context: ValidationContext): Promise<void> {\n    this.logger.info('清理临时环境...')\n\n    try {\n      if (context.tempDir && this.tempDirs.has(context.tempDir)) {\n        await fs.remove(context.tempDir)\n        this.tempDirs.delete(context.tempDir)\n        this.logger.success(`临时目录已删除: ${context.tempDir}`)\n      }\n    } catch (error) {\n      this.logger.warn(`清理临时目录失败: ${error}`)\n    }\n  }\n\n  /**\n   * 清理所有临时环境\n   */\n  async dispose(): Promise<void> {\n    this.logger.info('清理所有临时环境...')\n\n    const cleanupPromises = Array.from(this.tempDirs).map(async (tempDir) => {\n      try {\n        await fs.remove(tempDir)\n        this.logger.debug(`临时目录已删除: ${tempDir}`)\n      } catch (error) {\n        this.logger.warn(`清理临时目录失败: ${tempDir}, 错误: ${error}`)\n      }\n    })\n\n    await Promise.all(cleanupPromises)\n    this.tempDirs.clear()\n\n    this.logger.success('所有临时环境清理完成')\n  }\n\n  /**\n   * 创建临时目录\n   */\n  private async createTempDirectory(context: ValidationContext): Promise<string> {\n    const tempDirName = `ldesign-builder-validation-${randomUUID().slice(0, 8)}`\n\n    // 优先使用配置中指定的临时目录\n    const baseTempDir = context.config.environment?.tempDir\n      ? path.resolve(context.projectRoot, context.config.environment.tempDir)\n      : path.join(os.tmpdir(), 'ldesign-builder')\n\n    const tempDir = path.join(baseTempDir, tempDirName)\n\n    await fs.ensureDir(tempDir)\n    this.logger.debug(`创建临时目录: ${tempDir}`)\n\n    return tempDir\n  }\n\n  /**\n   * 复制项目文件到临时目录\n   */\n  private async copyProjectFiles(context: ValidationContext): Promise<void> {\n    this.logger.info('复制项目文件到临时目录...')\n\n    const filesToCopy = [\n      'package.json',\n      'package-lock.json',\n      'yarn.lock',\n      'pnpm-lock.yaml',\n      'tsconfig.json',\n      'vitest.config.ts',\n      'vitest.config.js',\n      'jest.config.js',\n      'jest.config.ts',\n      '.mocharc.json',\n      '.mocharc.js'\n    ]\n\n    // 复制配置文件\n    for (const file of filesToCopy) {\n      const sourcePath = path.join(context.projectRoot, file)\n      if (await fs.pathExists(sourcePath)) {\n        const targetPath = path.join(context.tempDir, file)\n        await fs.copy(sourcePath, targetPath)\n        this.logger.debug(`复制配置文件: ${file}`)\n      }\n    }\n\n    // 复制测试文件\n    await this.copyTestFiles(context)\n\n    // 复制源码文件（如果需要）\n    await this.copySourceFiles(context)\n  }\n\n  /**\n   * 复制测试文件\n   */\n  private async copyTestFiles(context: ValidationContext): Promise<void> {\n    const testPatterns = Array.isArray(context.config.testPattern)\n      ? context.config.testPattern\n      : [context.config.testPattern || '**/*.test.{js,ts}']\n\n    const glob = await import('fast-glob')\n\n    for (const pattern of testPatterns) {\n      const testFiles = await glob.default(pattern, {\n        cwd: context.projectRoot,\n        absolute: false\n      })\n\n      for (const testFile of testFiles) {\n        const sourcePath = path.join(context.projectRoot, testFile)\n        const targetPath = path.join(context.tempDir, testFile)\n\n        await fs.ensureDir(path.dirname(targetPath))\n        await fs.copy(sourcePath, targetPath)\n\n        this.logger.debug(`复制测试文件: ${testFile}`)\n      }\n    }\n  }\n\n  /**\n   * 复制源码文件\n   */\n  private async copySourceFiles(context: ValidationContext): Promise<void> {\n    // 如果测试需要访问源码，复制 src 目录\n    const srcDir = path.join(context.projectRoot, 'src')\n    if (await fs.pathExists(srcDir)) {\n      const targetSrcDir = path.join(context.tempDir, 'src')\n      await fs.copy(srcDir, targetSrcDir)\n      this.logger.debug('复制源码目录: src')\n    }\n  }\n\n  /**\n   * 更新 package.json 以使用构建产物\n   */\n  private async updatePackageJson(context: ValidationContext): Promise<void> {\n    const packageJsonPath = path.join(context.tempDir, 'package.json')\n\n    if (!(await fs.pathExists(packageJsonPath))) {\n      this.logger.warn('临时环境中未找到 package.json')\n      return\n    }\n\n    try {\n      const packageJson = await fs.readJson(packageJsonPath)\n\n      // 更新主入口点指向构建产物\n      const outputs = context.buildResult.outputs\n\n      // 查找主要的输出文件（基于文件名模式）\n      const esmOutput = outputs.find(o => o.fileName.includes('.js') && !o.fileName.includes('.cjs'))\n      const cjsOutput = outputs.find(o => o.fileName.includes('.cjs'))\n      const typesOutput = outputs.find(o => o.fileName.endsWith('.d.ts'))\n\n      // 更新入口点\n      if (esmOutput) {\n        packageJson.module = esmOutput.fileName\n        packageJson.exports = packageJson.exports || {}\n        packageJson.exports['.'] = packageJson.exports['.'] || {}\n        packageJson.exports['.'].import = esmOutput.fileName\n      }\n\n      if (cjsOutput) {\n        packageJson.main = cjsOutput.fileName\n        packageJson.exports = packageJson.exports || {}\n        packageJson.exports['.'] = packageJson.exports['.'] || {}\n        packageJson.exports['.'].require = cjsOutput.fileName\n      }\n\n      if (typesOutput) {\n        packageJson.types = typesOutput.fileName\n        packageJson.typings = typesOutput.fileName\n      }\n\n      // 保存更新后的 package.json\n      await fs.writeJson(packageJsonPath, packageJson, { spaces: 2 })\n\n      this.logger.success('package.json 已更新为使用构建产物')\n\n    } catch (error) {\n      this.logger.warn(`更新 package.json 失败: ${error}`)\n    }\n  }\n\n  /**\n   * 获取临时目录列表\n   */\n  getTempDirectories(): string[] {\n    return Array.from(this.tempDirs)\n  }\n\n  /**\n   * 检查临时目录是否存在\n   */\n  async exists(tempDir: string): Promise<boolean> {\n    return fs.pathExists(tempDir)\n  }\n\n  /**\n   * 获取临时目录大小\n   */\n  async getSize(tempDir: string): Promise<number> {\n    try {\n      const stats = await this.getDirectoryStats(tempDir)\n      return stats.size\n    } catch (error) {\n      return 0\n    }\n  }\n\n  /**\n   * 获取目录统计信息\n   */\n  private async getDirectoryStats(dirPath: string): Promise<{ size: number; files: number }> {\n    let totalSize = 0\n    let totalFiles = 0\n\n    const items = await fs.readdir(dirPath)\n\n    for (const item of items) {\n      const itemPath = path.join(dirPath, item)\n      const stats = await fs.stat(itemPath)\n\n      if (stats.isDirectory()) {\n        const subStats = await this.getDirectoryStats(itemPath)\n        totalSize += subStats.size\n        totalFiles += subStats.files\n      } else {\n        totalSize += stats.size\n        totalFiles += 1\n      }\n    }\n\n    return { size: totalSize, files: totalFiles }\n  }\n}\n"]}