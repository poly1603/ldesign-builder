{"version":3,"file":"LibraryDetector.js","sourceRoot":"","sources":["../../src/core/LibraryDetector.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * 库类型检测器\n * \n * 负责自动检测项目的库类型\n * \n * @author LDesign Team\n * @version 1.0.0\n */\n\nimport path from 'path'\nimport {\n  LibraryType,\n  LibraryDetectionResult\n} from '../types/library'\nimport type { DetectionEvidence } from '../types/strategy'\nimport { LIBRARY_TYPE_PATTERNS, LIBRARY_TYPE_PRIORITY } from '../constants/library-types'\nimport { findFiles, exists, readFile } from '../utils/file-system'\nimport { Logger } from '../utils/logger'\nimport { ErrorHandler } from '../utils/error-handler'\n\n/**\n * 库类型检测器选项\n */\nexport interface LibraryDetectorOptions {\n  logger?: Logger\n  confidence?: number\n  cache?: boolean\n}\n\n/**\n * 库类型检测器类\n */\nexport class LibraryDetector {\n  private logger: Logger\n  private errorHandler: ErrorHandler\n  private options: LibraryDetectorOptions\n\n  constructor(options: LibraryDetectorOptions = {}) {\n    this.options = {\n      confidence: 0.6,\n      cache: true,\n      ...options\n    }\n\n    this.logger = options.logger || new Logger()\n    this.errorHandler = new ErrorHandler({ logger: this.logger })\n  }\n\n  /**\n   * 检测库类型\n   */\n  async detect(projectPath: string): Promise<LibraryDetectionResult> {\n    try {\n      this.logger.info(`开始检测项目类型: ${projectPath}`)\n\n      const scores: Record<LibraryType, number> = {\n        typescript: 0,\n        style: 0,\n        vue2: 0,\n        vue3: 0,\n        react: 0,\n        svelte: 0,\n        solid: 0,\n        preact: 0,\n        lit: 0,\n        angular: 0,\n        mixed: 0\n      }\n\n      const evidence: Record<LibraryType, DetectionEvidence[]> = {\n        typescript: [],\n        style: [],\n        vue2: [],\n        vue3: [],\n        react: [],\n        svelte: [],\n        solid: [],\n        preact: [],\n        lit: [],\n        angular: [],\n        mixed: []\n      }\n\n      // 检测文件模式\n      await this.detectFilePatterns(projectPath, scores, evidence)\n\n      // 检测依赖\n      await this.detectDependencies(projectPath, scores, evidence)\n\n      // 检测配置文件\n      await this.detectConfigFiles(projectPath, scores, evidence)\n\n      // 检测 package.json 字段\n      await this.detectPackageJsonFields(projectPath, scores, evidence)\n\n      // 如果检测到 .vue 文件，优先判定为 Vue 项目（根据依赖决定 2/3 版本），以确保无需额外配置也能正确处理 SFC\n      try {\n        const vueFiles = await findFiles(['src/**/*.vue', 'lib/**/*.vue', 'components/**/*.vue'], {\n          cwd: projectPath,\n          ignore: ['node_modules/**', 'dist/**', '**/*.test.*', '**/*.spec.*']\n        })\n\n        if (vueFiles.length > 0) {\n          // 解析 package.json 以判断 Vue 主版本\n          let vueMajor = 3\n          try {\n            const pkgPath = path.join(projectPath, 'package.json')\n            if (await exists(pkgPath)) {\n              const pkg = JSON.parse(await readFile(pkgPath, 'utf-8'))\n              const allDeps = { ...pkg.dependencies, ...pkg.devDependencies, ...pkg.peerDependencies }\n              const vueVer: string | undefined = allDeps?.vue\n              if (typeof vueVer === 'string') {\n                // 粗略解析主版本：匹配 ^3, ~3, 3., >=3 等\n                if (/(^|[^\\d])2(\\D|$)/.test(vueVer)) vueMajor = 2\n                else if (/(^|[^\\d])3(\\D|$)/.test(vueVer)) vueMajor = 3\n              }\n            }\n          } catch {}\n\n          const forcedType = vueMajor === 2 ? LibraryType.VUE2 : LibraryType.VUE3\n          const forcedEvidence = [\n            ...evidence[forcedType],\n            {\n              type: 'file',\n              description: `检测到 ${vueFiles.length} 个 .vue 文件，优先判定为 ${forcedType}`,\n              weight: 1,\n              source: vueFiles.slice(0, 3).join(', ')\n            }\n          ] as DetectionEvidence[]\n\n          const result: LibraryDetectionResult = {\n            type: forcedType,\n            confidence: 1,\n            evidence: forcedEvidence\n          }\n\n          this.logger.success(`检测完成: ${forcedType} (置信度: 100.0%)`)\n          return result\n        }\n      } catch (e) {\n        this.logger.debug('Vue 文件快速检测失败，回退到评分机制:', e)\n      }\n\n      // 计算最终分数（常规路径）\n      const finalScores = this.calculateFinalScores(scores)\n\n      // 找到最高分的类型\n      const detectedType = this.getBestMatch(finalScores)\n      const confidence = finalScores[detectedType]\n\n      const result: LibraryDetectionResult = {\n        type: detectedType,\n        confidence,\n        evidence: evidence[detectedType]\n      }\n\n      this.logger.success(`检测完成: ${detectedType} (置信度: ${(confidence * 100).toFixed(1)}%)`)\n\n      return result\n\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error)\n      this.logger.error(`项目类型检测失败: ${errorMessage}`)\n      this.errorHandler.handle(error instanceof Error ? error : new Error(errorMessage), 'detect')\n\n      // 返回默认结果，但记录错误信息\n      return {\n        type: LibraryType.TYPESCRIPT,\n        confidence: 0.1, // 降低置信度以反映检测失败\n        evidence: [{\n          type: 'error',\n          description: `检测过程中发生错误: ${errorMessage}`,\n          weight: 0.1\n        }]\n      }\n    }\n  }\n\n  /**\n   * 检测文件模式\n   */\n  private async detectFilePatterns(\n    projectPath: string,\n    scores: Record<LibraryType, number>,\n    evidence: Record<LibraryType, DetectionEvidence[]>\n  ): Promise<void> {\n    for (const [type, pattern] of Object.entries(LIBRARY_TYPE_PATTERNS)) {\n      const libraryType = type as LibraryType\n\n      try {\n        const files = await findFiles([...pattern.files], {\n          cwd: projectPath,\n          ignore: ['node_modules/**', 'dist/**', '**/*.test.*', '**/*.spec.*']\n        })\n\n        if (files.length > 0) {\n          const score = Math.min(files.length * 0.1, 1) * pattern.weight\n          scores[libraryType] += score\n\n          evidence[libraryType].push({\n            type: 'file',\n            description: `找到 ${files.length} 个 ${libraryType} 文件 (模式: ${pattern.files.join(', ')})`,\n            weight: score,\n            source: files.slice(0, 3).join(', ')\n          })\n        }\n      } catch (error) {\n        this.logger.debug(`检测 ${libraryType} 文件模式失败:`, error)\n      }\n    }\n  }\n\n  /**\n   * 检测依赖\n   */\n  private async detectDependencies(\n    projectPath: string,\n    scores: Record<LibraryType, number>,\n    evidence: Record<LibraryType, DetectionEvidence[]>\n  ): Promise<void> {\n    try {\n      const packageJsonPath = path.join(projectPath, 'package.json')\n\n      if (await exists(packageJsonPath)) {\n        const packageContent = await readFile(packageJsonPath, 'utf-8')\n        const packageJson = JSON.parse(packageContent)\n\n        const allDeps = {\n          ...packageJson.dependencies,\n          ...packageJson.devDependencies,\n          ...packageJson.peerDependencies\n        }\n\n        for (const [type, pattern] of Object.entries(LIBRARY_TYPE_PATTERNS)) {\n          const libraryType = type as LibraryType\n          const matchedDeps: string[] = []\n\n          for (const dep of pattern.dependencies) {\n            if (this.matchDependency(dep, allDeps)) {\n              matchedDeps.push(dep)\n            }\n          }\n\n          if (matchedDeps.length > 0) {\n            const score = (matchedDeps.length / pattern.dependencies.length) * pattern.weight * 0.8\n            scores[libraryType] += score\n\n            evidence[libraryType].push({\n              type: 'dependency',\n              description: `找到相关依赖: ${matchedDeps.join(', ')}`,\n              weight: score,\n              source: 'package.json'\n            })\n          }\n        }\n      }\n    } catch (error) {\n      this.logger.debug('检测依赖失败:', error)\n    }\n  }\n\n  /**\n   * 检测配置文件\n   */\n  private async detectConfigFiles(\n    projectPath: string,\n    scores: Record<LibraryType, number>,\n    evidence: Record<LibraryType, DetectionEvidence[]>\n  ): Promise<void> {\n    for (const [type, pattern] of Object.entries(LIBRARY_TYPE_PATTERNS)) {\n      const libraryType = type as LibraryType\n      const foundConfigs: string[] = []\n\n      for (const configFile of pattern.configs) {\n        const configPath = path.join(projectPath, configFile)\n\n        if (await exists(configPath)) {\n          foundConfigs.push(configFile)\n        }\n      }\n\n      if (foundConfigs.length > 0) {\n        const score = (foundConfigs.length / pattern.configs.length) * pattern.weight * 0.6\n        scores[libraryType] += score\n\n        evidence[libraryType].push({\n          type: 'config',\n          description: `找到配置文件: ${foundConfigs.join(', ')}`,\n          weight: score,\n          source: foundConfigs.join(', ')\n        })\n      }\n    }\n  }\n\n  /**\n   * 检测 package.json 字段\n   */\n  private async detectPackageJsonFields(\n    projectPath: string,\n    scores: Record<LibraryType, number>,\n    evidence: Record<LibraryType, DetectionEvidence[]>\n  ): Promise<void> {\n    try {\n      const packageJsonPath = path.join(projectPath, 'package.json')\n\n      if (await exists(packageJsonPath)) {\n        const packageContent = await readFile(packageJsonPath, 'utf-8')\n        const packageJson = JSON.parse(packageContent)\n\n        for (const [type, pattern] of Object.entries(LIBRARY_TYPE_PATTERNS)) {\n          const libraryType = type as LibraryType\n          const foundFields: string[] = []\n\n          for (const field of pattern.packageJsonFields) {\n            if (packageJson[field]) {\n              foundFields.push(field)\n            }\n          }\n\n          if (foundFields.length > 0) {\n            const score = (foundFields.length / pattern.packageJsonFields.length) * pattern.weight * 0.4\n            scores[libraryType] += score\n\n            evidence[libraryType].push({\n              type: 'config',\n              description: `找到 package.json 字段: ${foundFields.join(', ')}`,\n              weight: score,\n              source: 'package.json'\n            })\n          }\n        }\n      }\n    } catch (error) {\n      this.logger.debug('检测 package.json 字段失败:', error)\n    }\n  }\n\n  /**\n   * 计算最终分数\n   */\n  private calculateFinalScores(scores: Record<LibraryType, number>): Record<LibraryType, number> {\n    const finalScores: Record<LibraryType, number> = { ...scores }\n\n    // 应用优先级权重\n    for (const [type, priority] of Object.entries(LIBRARY_TYPE_PRIORITY)) {\n      const libraryType = type as LibraryType\n      finalScores[libraryType] *= (priority / 10)\n    }\n\n    // 归一化分数\n    const maxScore = Math.max(...Object.values(finalScores))\n    if (maxScore > 0) {\n      for (const type of Object.keys(finalScores) as LibraryType[]) {\n        finalScores[type] = Math.min(finalScores[type] / maxScore, 1)\n      }\n    }\n\n    return finalScores\n  }\n\n  /**\n   * 获取最佳匹配\n   */\n  private getBestMatch(scores: Record<LibraryType, number>): LibraryType {\n    let bestType: LibraryType = LibraryType.TYPESCRIPT\n    let bestScore = 0\n\n    for (const [type, score] of Object.entries(scores)) {\n      if (score > bestScore) {\n        bestScore = score\n        bestType = type as LibraryType\n      }\n    }\n\n    // 如果最高分数低于阈值，返回默认类型\n    if (bestScore < this.options.confidence!) {\n      return LibraryType.MIXED\n    }\n\n    return bestType\n  }\n\n  /**\n   * 匹配依赖\n   */\n  private matchDependency(pattern: string, dependencies: Record<string, string>): boolean {\n    // 支持版本范围匹配\n    if (pattern.includes('@')) {\n      const [name, version] = pattern.split('@')\n      return !!(dependencies[name] && dependencies[name].includes(version))\n    }\n\n    return !!dependencies[pattern]\n  }\n}\n"]}