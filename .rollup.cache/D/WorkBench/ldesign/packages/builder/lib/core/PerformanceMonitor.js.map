{"version":3,"file":"PerformanceMonitor.js","sourceRoot":"","sources":["../../src/core/PerformanceMonitor.ts"],"names":[],"mappings":"AAAA;;;;;;;GAOG;AAEH,OAAO,EAAE,YAAY,EAAE,MAAM,QAAQ,CAAA;AASrC,OAAO,EAAE,MAAM,EAAE,MAAM,iBAAiB,CAAA;AAwBxC;;GAEG;AACH,MAAM,OAAO,kBAAmB,SAAQ,YAAY;IAWlD,YAAY,UAAqC,EAAE;QACjD,KAAK,EAAE,CAAA;QATD,aAAQ,GAA8B,IAAI,GAAG,EAAE,CAAA;QAWrD,IAAI,CAAC,OAAO,GAAG;YACb,OAAO,EAAE,IAAI;YACb,cAAc,EAAE,IAAI;YACpB,UAAU,EAAE,GAAG;YACf,GAAG,OAAO;SACX,CAAA;QAED,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,IAAI,IAAI,MAAM,EAAE,CAAA;QAE5C,IAAI,CAAC,WAAW,GAAG;YACjB,WAAW,EAAE,CAAC;YACd,SAAS,EAAE,CAAC;YACZ,WAAW,EAAE,CAAC;YACd,UAAU,EAAE;gBACV,IAAI,EAAE,CAAC;gBACP,MAAM,EAAE,CAAC;gBACT,OAAO,EAAE,CAAC;gBACV,IAAI,EAAE,CAAC;gBACP,OAAO,EAAE,CAAC;gBACV,SAAS,EAAE,CAAC;aACb;SACF,CAAA;IACH,CAAC;IAED;;OAEG;IACH,YAAY,CAAC,SAAiB;QAC5B,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAA;QAC1B,OAAO,SAAS,CAAA;IAClB,CAAC;IAED;;OAEG;IACH,UAAU,CAAC,SAAiB;QAC1B,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAA;QACxC,OAAO;YACL,GAAG,OAAO;YACV,QAAQ,EAAE,OAAO,CAAC,SAAS;YAC3B,QAAQ,EAAE,OAAO,CAAC,eAAe,CAAC,QAAQ;SAC3C,CAAA;IACH,CAAC;IAED;;OAEG;IACH,cAAc;QACZ,OAAO,IAAI,CAAC,WAAW,CAAA;IACzB,CAAC;IAED;;OAEG;IACH,UAAU,CAAC,OAAe;QACxB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO;YAAE,OAAM;QAEjC,MAAM,OAAO,GAAiB;YAC5B,OAAO;YACP,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;YACrB,eAAe,EAAE,EAAE;YACnB,SAAS,EAAE;gBACT,UAAU,EAAE,CAAC;gBACb,WAAW,EAAE,EAAE;gBACf,qBAAqB,EAAE,CAAC;gBACxB,YAAY,EAAE,EAAE;gBAChB,cAAc,EAAE,CAAC;aAClB;YACD,MAAM,EAAE,EAAE;SACX,CAAA;QAED,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,CAAA;QAEnC,SAAS;QACT,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAA;QAEnC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,WAAW,OAAO,EAAE,CAAC,CAAA;QACvC,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,CAAC,SAAS,EAAE,CAAC,CAAA;IACrE,CAAC;IAED;;OAEG;IACH,QAAQ,CAAC,OAAe;QACtB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;YAC1B,OAAO,IAAI,CAAC,kBAAkB,EAAE,CAAA;QAClC,CAAC;QAED,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;QAC1C,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,OAAO,EAAE,CAAC,CAAA;YACvC,OAAO,IAAI,CAAC,kBAAkB,EAAE,CAAA;QAClC,CAAC;QAED,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA;QAC5B,MAAM,SAAS,GAAG,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,SAAS,CAAA;QAErD,SAAS;QACT,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,CAAA;QAC9B,IAAI,CAAC,WAAW,CAAC,SAAS,IAAI,SAAS,CAAA;QACvC,IAAI,CAAC,WAAW,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,WAAW,CAAA;QAExF,SAAS;QACT,MAAM,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,SAAS,CAAC,CAAA;QAExD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,OAAO,KAAK,SAAS,KAAK,CAAC,CAAA;QACvD,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,CAAC,OAAO,EAAE,CAAC,CAAA;QAExE,OAAO;QACP,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAA;QAE7B,OAAO,OAAO,CAAA;IAChB,CAAC;IAED;;OAEG;IACH,WAAW,CAAC,OAAe,EAAE,KAAY;QACvC,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;QAC1C,IAAI,OAAO,EAAE,CAAC;YACZ,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QAC5B,CAAC;IACH,CAAC;IAED;;OAEG;IACH,oBAAoB,CAAC,OAAe,EAAE,QAAgB,EAAE,cAAsB;QAC5E,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;QAC1C,IAAI,CAAC,OAAO;YAAE,OAAM;QAEpB,OAAO,CAAC,SAAS,CAAC,UAAU,EAAE,CAAA;QAE9B,QAAQ;QACR,MAAM,GAAG,GAAG,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAA;QAC3C,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAA;QAElF,QAAQ;QACR,IAAI,OAAO,CAAC,SAAS,CAAC,YAAY,CAAC,MAAM,GAAG,EAAE,EAAE,CAAC;YAC/C,OAAO,CAAC,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC;gBAClC,IAAI,EAAE,QAAQ;gBACd,cAAc;gBACd,IAAI,EAAE,CAAC,EAAE,eAAe;gBACxB,MAAM,EAAE,EAAE;aACX,CAAC,CAAA;QACJ,CAAC;aAAM,CAAC;YACN,UAAU;YACV,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,YAAY,CAAA;YAC9C,MAAM,QAAQ,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,cAAc,KAAK,IAAI,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,CAAA;YAC7G,IAAI,cAAc,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,cAAc,EAAE,CAAC;gBACtD,OAAO,CAAC,QAAQ,CAAC,GAAG;oBAClB,IAAI,EAAE,QAAQ;oBACd,cAAc;oBACd,IAAI,EAAE,CAAC;oBACP,MAAM,EAAE,EAAE;iBACX,CAAA;YACH,CAAC;QACH,CAAC;IACH,CAAC;IAED;;OAEG;IACH,cAAc,CAAC,KAAc,EAAE,YAAoB,CAAC;QAClD,IAAI,KAAK,EAAE,CAAC;YACV,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,EAAE,CAAA;YAClC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,SAAS,IAAI,SAAS,CAAA;QACpD,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,EAAE,CAAA;QACtC,CAAC;QAED,MAAM,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,CAAA;QACnF,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,GAAG,KAAK,CAAA;IAChF,CAAC;IAED;;OAEG;IACH,oBAAoB;QAClB,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA;QAE5B,OAAO;YACL,SAAS;YACT,YAAY,EAAE;gBACZ,OAAO,EAAE,QAAQ,EAAE,cAAc;gBACjC,IAAI,EAAE,YAAY;gBAClB,UAAU,EAAE,CAAC;gBACb,WAAW,EAAE,CAAC;gBACd,SAAS,EAAE,CAAC;gBACZ,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,WAAW;aACxC;YACD,OAAO,EAAE,IAAI,CAAC,kBAAkB,EAAE,EAAE,WAAW;YAC/C,eAAe,EAAE,EAAE;YACnB,QAAQ,EAAE;gBACR,WAAW,EAAE,EAAE;gBACf,gBAAgB,EAAE;oBAChB,aAAa,EAAE,GAAG;oBAClB,gBAAgB,EAAE,GAAG;oBACrB,YAAY,EAAE,GAAG;oBACjB,WAAW,EAAE,EAAE;iBAChB;gBACD,aAAa,EAAE;oBACb,iBAAiB,EAAE,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,OAAO;oBACtD,uBAAuB,EAAE,EAAE;oBAC3B,mBAAmB,EAAE,EAAE;iBACxB;gBACD,4BAA4B,EAAE,EAAE;aACjC;SACF,CAAA;IACH,CAAC;IAED;;OAEG;IACK,qBAAqB,CAAC,OAAe;QAC3C,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;QAC1C,IAAI,CAAC,OAAO;YAAE,OAAM;QAEpB,MAAM,QAAQ,GAAG,WAAW,CAAC,GAAG,EAAE;YAChC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC;gBAChC,aAAa,CAAC,QAAQ,CAAC,CAAA;gBACvB,OAAM;YACR,CAAC;YAED,MAAM,WAAW,GAAG,IAAI,CAAC,qBAAqB,EAAE,CAAA;YAChD,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;YAEzC,SAAS;YACT,IAAI,OAAO,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,IAAI,GAAG,CAAC,EAAE,CAAC;gBACtE,OAAO,CAAC,eAAe,CAAC,KAAK,EAAE,CAAA;YACjC,CAAC;QACH,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAA;IACjC,CAAC;IAED;;OAEG;IACK,qBAAqB;QAC3B,MAAM,KAAK,GAAG,OAAO,CAAC,WAAW,EAAE,CAAA;QAEnC,OAAO;YACL,QAAQ,EAAE,KAAK,CAAC,QAAQ;YACxB,SAAS,EAAE,KAAK,CAAC,SAAS;YAC1B,QAAQ,EAAE,KAAK,CAAC,QAAQ;YACxB,GAAG,EAAE,KAAK,CAAC,GAAG;YACd,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,EAAE,KAAK,CAAC,SAAS,CAAC;YAC/C,KAAK,EAAE,EAAE;SACV,CAAA;IACH,CAAC;IAED;;OAEG;IACK,eAAe,CAAC,OAAqB,EAAE,SAAiB;QAC9D,MAAM,WAAW,GAAG,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,eAAe,CAAC,CAAA;QAEtE,OAAO;YACL,SAAS;YACT,WAAW;YACX,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC,UAAU;YACvC,SAAS,EAAE,OAAO,CAAC,SAAS;YAC5B,iBAAiB,EAAE,EAAE,EAAE,iBAAiB;YACxC,eAAe,EAAE,IAAI,CAAC,kBAAkB,EAAE;SAC3C,CAAA;IACH,CAAC;IAED;;OAEG;IACK,oBAAoB,CAAC,SAAwB;QACnD,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAC3B,OAAO,IAAI,CAAC,qBAAqB,EAAE,CAAA;QACrC,CAAC;QAED,MAAM,MAAM,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA;QAC9C,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAA;QAExD,OAAO;YACL,GAAG,MAAM;YACT,IAAI;YACJ,KAAK,EAAE,SAAS,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC;gBACzC,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,SAAS,CAAC,MAAM,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,IAAI,IAAI,CAAC;gBAC1F,KAAK,EAAE,QAAQ,CAAC,QAAQ;gBACxB,KAAK,EAAE,UAAU;aAClB,CAAC,CAAC;SACJ,CAAA;IACH,CAAC;IAED;;OAEG;IACK,kBAAkB;QACxB,iBAAiB;QACjB,OAAO;YACL,QAAQ,EAAE,CAAC;YACX,eAAe,EAAE,CAAC;YAClB,SAAS,EAAE;gBACT,KAAK,EAAE,CAAC;gBACR,IAAI,EAAE,CAAC;gBACP,SAAS,EAAE,CAAC;gBACZ,YAAY,EAAE,CAAC;aAChB;SACF,CAAA;IACH,CAAC;IAED;;OAEG;IACK,gBAAgB,CAAC,QAAgB;QACvC,MAAM,GAAG,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAA;QACrC,OAAO,GAAG,CAAC,CAAC,CAAC,IAAI,GAAG,EAAE,CAAC,CAAC,CAAC,SAAS,CAAA;IACpC,CAAC;IAED;;OAEG;IACK,kBAAkB;QACxB,OAAO;YACL,SAAS,EAAE,CAAC;YACZ,WAAW,EAAE,IAAI,CAAC,qBAAqB,EAAE;YACzC,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC,UAAU;YACvC,SAAS,EAAE;gBACT,UAAU,EAAE,CAAC;gBACb,WAAW,EAAE,EAAE;gBACf,qBAAqB,EAAE,CAAC;gBACxB,YAAY,EAAE,EAAE;gBAChB,cAAc,EAAE,CAAC;aAClB;YACD,iBAAiB,EAAE,EAAE;YACrB,eAAe,EAAE,IAAI,CAAC,kBAAkB,EAAE;SAC3C,CAAA;IACH,CAAC;CACF","sourcesContent":["/**\r\n * 性能监控器\r\n * \r\n * 负责监控构建过程的性能指标\r\n * \r\n * @author LDesign Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { EventEmitter } from 'events'\r\nimport type {\r\n  PerformanceMetrics,\r\n  PerformanceReport,\r\n  MemoryUsage,\r\n  CacheStats,\r\n  FileProcessingStats,\r\n  SystemResourceUsage\r\n} from '../types/performance'\r\nimport { Logger } from '../utils/logger'\r\n\r\n/**\r\n * 性能监控器选项\r\n */\r\nexport interface PerformanceMonitorOptions {\r\n  logger?: Logger\r\n  enabled?: boolean\r\n  sampleInterval?: number\r\n  maxSamples?: number\r\n}\r\n\r\n/**\r\n * 构建会话\r\n */\r\ninterface BuildSession {\r\n  buildId: string\r\n  startTime: number\r\n  endTime?: number\r\n  memorySnapshots: MemoryUsage[]\r\n  fileStats: FileProcessingStats\r\n  errors: Error[]\r\n}\r\n\r\n/**\r\n * 性能监控器类\r\n */\r\nexport class PerformanceMonitor extends EventEmitter {\r\n  private logger: Logger\r\n  private options: PerformanceMonitorOptions\r\n  private sessions: Map<string, BuildSession> = new Map()\r\n  private globalStats: {\r\n    totalBuilds: number\r\n    totalTime: number\r\n    averageTime: number\r\n    cacheStats: CacheStats\r\n  }\r\n\r\n  constructor(options: PerformanceMonitorOptions = {}) {\r\n    super()\r\n\r\n    this.options = {\r\n      enabled: true,\r\n      sampleInterval: 1000,\r\n      maxSamples: 100,\r\n      ...options\r\n    }\r\n\r\n    this.logger = options.logger || new Logger()\r\n\r\n    this.globalStats = {\r\n      totalBuilds: 0,\r\n      totalTime: 0,\r\n      averageTime: 0,\r\n      cacheStats: {\r\n        hits: 0,\r\n        misses: 0,\r\n        hitRate: 0,\r\n        size: 0,\r\n        entries: 0,\r\n        timeSaved: 0\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 开始会话监控（别名）\r\n   */\r\n  startSession(sessionId: string): string {\r\n    this.startBuild(sessionId)\r\n    return sessionId\r\n  }\r\n\r\n  /**\r\n   * 结束会话监控（别名）\r\n   */\r\n  endSession(sessionId: string): PerformanceMetrics & { duration: number, cpuUsage?: number } {\r\n    const metrics = this.endBuild(sessionId)\r\n    return {\r\n      ...metrics,\r\n      duration: metrics.buildTime,\r\n      cpuUsage: metrics.systemResources.cpuUsage\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取全局统计信息\r\n   */\r\n  getGlobalStats() {\r\n    return this.globalStats\r\n  }\r\n\r\n  /**\r\n   * 开始构建监控\r\n   */\r\n  startBuild(buildId: string): void {\r\n    if (!this.options.enabled) return\r\n\r\n    const session: BuildSession = {\r\n      buildId,\r\n      startTime: Date.now(),\r\n      memorySnapshots: [],\r\n      fileStats: {\r\n        totalFiles: 0,\r\n        filesByType: {},\r\n        averageProcessingTime: 0,\r\n        slowestFiles: [],\r\n        processingRate: 0\r\n      },\r\n      errors: []\r\n    }\r\n\r\n    this.sessions.set(buildId, session)\r\n\r\n    // 开始内存监控\r\n    this.startMemoryMonitoring(buildId)\r\n\r\n    this.logger.debug(`开始监控构建: ${buildId}`)\r\n    this.emit('build:start', { buildId, timestamp: session.startTime })\r\n  }\r\n\r\n  /**\r\n   * 结束构建监控\r\n   */\r\n  endBuild(buildId: string): PerformanceMetrics {\r\n    if (!this.options.enabled) {\r\n      return this.createEmptyMetrics()\r\n    }\r\n\r\n    const session = this.sessions.get(buildId)\r\n    if (!session) {\r\n      this.logger.warn(`构建会话不存在: ${buildId}`)\r\n      return this.createEmptyMetrics()\r\n    }\r\n\r\n    session.endTime = Date.now()\r\n    const buildTime = session.endTime - session.startTime\r\n\r\n    // 更新全局统计\r\n    this.globalStats.totalBuilds++\r\n    this.globalStats.totalTime += buildTime\r\n    this.globalStats.averageTime = this.globalStats.totalTime / this.globalStats.totalBuilds\r\n\r\n    // 生成性能指标\r\n    const metrics = this.generateMetrics(session, buildTime)\r\n\r\n    this.logger.info(`构建监控完成: ${buildId} (${buildTime}ms)`)\r\n    this.emit('build:end', { buildId, metrics, timestamp: session.endTime })\r\n\r\n    // 清理会话\r\n    this.sessions.delete(buildId)\r\n\r\n    return metrics\r\n  }\r\n\r\n  /**\r\n   * 记录错误\r\n   */\r\n  recordError(buildId: string, error: Error): void {\r\n    const session = this.sessions.get(buildId)\r\n    if (session) {\r\n      session.errors.push(error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 记录文件处理\r\n   */\r\n  recordFileProcessing(buildId: string, filePath: string, processingTime: number): void {\r\n    const session = this.sessions.get(buildId)\r\n    if (!session) return\r\n\r\n    session.fileStats.totalFiles++\r\n\r\n    // 按类型统计\r\n    const ext = this.getFileExtension(filePath)\r\n    session.fileStats.filesByType[ext] = (session.fileStats.filesByType[ext] || 0) + 1\r\n\r\n    // 记录慢文件\r\n    if (session.fileStats.slowestFiles.length < 10) {\r\n      session.fileStats.slowestFiles.push({\r\n        path: filePath,\r\n        processingTime,\r\n        size: 0, // TODO: 获取文件大小\r\n        phases: []\r\n      })\r\n    } else {\r\n      // 替换最快的文件\r\n      const slowest = session.fileStats.slowestFiles\r\n      const minIndex = slowest.findIndex(f => f.processingTime === Math.min(...slowest.map(f => f.processingTime)))\r\n      if (processingTime > slowest[minIndex].processingTime) {\r\n        slowest[minIndex] = {\r\n          path: filePath,\r\n          processingTime,\r\n          size: 0,\r\n          phases: []\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 记录缓存命中\r\n   */\r\n  recordCacheHit(saved: boolean, timeSaved: number = 0): void {\r\n    if (saved) {\r\n      this.globalStats.cacheStats.hits++\r\n      this.globalStats.cacheStats.timeSaved += timeSaved\r\n    } else {\r\n      this.globalStats.cacheStats.misses++\r\n    }\r\n\r\n    const total = this.globalStats.cacheStats.hits + this.globalStats.cacheStats.misses\r\n    this.globalStats.cacheStats.hitRate = this.globalStats.cacheStats.hits / total\r\n  }\r\n\r\n  /**\r\n   * 获取性能报告\r\n   */\r\n  getPerformanceReport(): PerformanceReport {\r\n    const timestamp = Date.now()\r\n\r\n    return {\r\n      timestamp,\r\n      buildSummary: {\r\n        bundler: 'rollup', // TODO: 从配置获取\r\n        mode: 'production',\r\n        entryCount: 1,\r\n        outputCount: 1,\r\n        totalSize: 0,\r\n        buildTime: this.globalStats.averageTime\r\n      },\r\n      metrics: this.createEmptyMetrics(), // TODO: 实现\r\n      recommendations: [],\r\n      analysis: {\r\n        bottlenecks: [],\r\n        resourceAnalysis: {\r\n          cpuEfficiency: 0.8,\r\n          memoryEfficiency: 0.7,\r\n          ioEfficiency: 0.9,\r\n          wastePoints: []\r\n        },\r\n        cacheAnalysis: {\r\n          overallEfficiency: this.globalStats.cacheStats.hitRate,\r\n          strategyRecommendations: [],\r\n          configOptimizations: {}\r\n        },\r\n        parallelizationOpportunities: []\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 开始内存监控\r\n   */\r\n  private startMemoryMonitoring(buildId: string): void {\r\n    const session = this.sessions.get(buildId)\r\n    if (!session) return\r\n\r\n    const interval = setInterval(() => {\r\n      if (!this.sessions.has(buildId)) {\r\n        clearInterval(interval)\r\n        return\r\n      }\r\n\r\n      const memoryUsage = this.getCurrentMemoryUsage()\r\n      session.memorySnapshots.push(memoryUsage)\r\n\r\n      // 限制快照数量\r\n      if (session.memorySnapshots.length > (this.options.maxSamples || 100)) {\r\n        session.memorySnapshots.shift()\r\n      }\r\n    }, this.options.sampleInterval)\r\n  }\r\n\r\n  /**\r\n   * 获取当前内存使用情况\r\n   */\r\n  private getCurrentMemoryUsage(): MemoryUsage {\r\n    const usage = process.memoryUsage()\r\n\r\n    return {\r\n      heapUsed: usage.heapUsed,\r\n      heapTotal: usage.heapTotal,\r\n      external: usage.external,\r\n      rss: usage.rss,\r\n      peak: Math.max(usage.heapUsed, usage.heapTotal),\r\n      trend: []\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 生成性能指标\r\n   */\r\n  private generateMetrics(session: BuildSession, buildTime: number): PerformanceMetrics {\r\n    const memoryUsage = this.calculateMemoryUsage(session.memorySnapshots)\r\n\r\n    return {\r\n      buildTime,\r\n      memoryUsage,\r\n      cacheStats: this.globalStats.cacheStats,\r\n      fileStats: session.fileStats,\r\n      pluginPerformance: [], // TODO: 实现插件性能统计\r\n      systemResources: this.getSystemResources()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 计算内存使用情况\r\n   */\r\n  private calculateMemoryUsage(snapshots: MemoryUsage[]): MemoryUsage {\r\n    if (snapshots.length === 0) {\r\n      return this.getCurrentMemoryUsage()\r\n    }\r\n\r\n    const latest = snapshots[snapshots.length - 1]\r\n    const peak = Math.max(...snapshots.map(s => s.heapUsed))\r\n\r\n    return {\r\n      ...latest,\r\n      peak,\r\n      trend: snapshots.map((snapshot, index) => ({\r\n        timestamp: Date.now() - (snapshots.length - index) * (this.options.sampleInterval || 1000),\r\n        usage: snapshot.heapUsed,\r\n        phase: 'building'\r\n      }))\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取系统资源使用情况\r\n   */\r\n  private getSystemResources(): SystemResourceUsage {\r\n    // TODO: 实现系统资源监控\r\n    return {\r\n      cpuUsage: 0,\r\n      availableMemory: 0,\r\n      diskUsage: {\r\n        total: 0,\r\n        used: 0,\r\n        available: 0,\r\n        usagePercent: 0\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取文件扩展名\r\n   */\r\n  private getFileExtension(filePath: string): string {\r\n    const ext = filePath.split('.').pop()\r\n    return ext ? `.${ext}` : 'unknown'\r\n  }\r\n\r\n  /**\r\n   * 创建空的性能指标\r\n   */\r\n  private createEmptyMetrics(): PerformanceMetrics {\r\n    return {\r\n      buildTime: 0,\r\n      memoryUsage: this.getCurrentMemoryUsage(),\r\n      cacheStats: this.globalStats.cacheStats,\r\n      fileStats: {\r\n        totalFiles: 0,\r\n        filesByType: {},\r\n        averageProcessingTime: 0,\r\n        slowestFiles: [],\r\n        processingRate: 0\r\n      },\r\n      pluginPerformance: [],\r\n      systemResources: this.getSystemResources()\r\n    }\r\n  }\r\n}\r\n"]}