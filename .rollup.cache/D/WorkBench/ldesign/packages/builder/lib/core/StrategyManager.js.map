{"version":3,"file":"StrategyManager.js","sourceRoot":"","sources":["../../src/core/StrategyManager.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * 策略管理器\r\n * \r\n * 负责管理不同库类型的构建策略\r\n * \r\n * @author LDesign Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport type {\r\n  ILibraryStrategy,\r\n  StrategyManagerOptions,\r\n  StrategyDetectionResult,\r\n  StrategyApplicationResult\r\n} from '../types/strategy'\r\nimport { LibraryType } from '../types/library'\r\nimport type { BuilderConfig } from '../types/config'\r\nimport { Logger } from '../utils/logger'\r\nimport { ErrorHandler, BuilderError } from '../utils/error-handler'\r\nimport { ErrorCode } from '../constants/errors'\r\n\r\n// 导入具体策略实现\r\nimport { TypeScriptStrategy } from '../strategies/typescript/TypeScriptStrategy'\r\nimport { StyleStrategy } from '../strategies/style/StyleStrategy'\r\nimport { Vue3Strategy } from '../strategies/vue3/Vue3Strategy'\r\nimport { Vue2Strategy } from '../strategies/vue2/Vue2Strategy'\r\nimport { ReactStrategy } from '../strategies/react/ReactStrategy'\r\nimport { SvelteStrategy } from '../strategies/svelte/SvelteStrategy'\r\nimport { SolidStrategy } from '../strategies/solid/SolidStrategy'\r\nimport { PreactStrategy } from '../strategies/preact/PreactStrategy'\r\nimport { LitStrategy } from '../strategies/lit/LitStrategy'\r\nimport { AngularStrategy } from '../strategies/angular/AngularStrategy'\r\nimport { MixedStrategy } from '../strategies/mixed/MixedStrategy'\r\n\r\n\r\n/**\r\n * 策略管理器类\r\n */\r\nexport class StrategyManager {\r\n  private logger: Logger\r\n  private errorHandler: ErrorHandler\r\n  private strategies: Map<LibraryType, ILibraryStrategy> = new Map()\r\n\r\n  constructor(_options: StrategyManagerOptions = {}) {\r\n    this.logger = (_options as any).logger || new Logger()\r\n    this.errorHandler = new ErrorHandler({ logger: this.logger })\r\n\r\n    // 注册默认策略\r\n    this.registerDefaultStrategies()\r\n  }\r\n\r\n  /**\r\n   * 注册策略\r\n   */\r\n  registerStrategy(strategy: ILibraryStrategy): void {\r\n    for (const type of strategy.supportedTypes) {\r\n      this.strategies.set(type, strategy)\r\n    }\r\n\r\n    this.logger.debug(`注册策略: ${strategy.name}`)\r\n  }\r\n\r\n  /**\r\n   * 获取策略\r\n   */\r\n  getStrategy(libraryType: LibraryType): ILibraryStrategy {\r\n    const strategy = this.strategies.get(libraryType)\r\n\r\n    if (!strategy) {\r\n      throw new BuilderError(\r\n        ErrorCode.CONFIG_VALIDATION_ERROR,\r\n        `未找到库类型 ${libraryType} 的策略`\r\n      )\r\n    }\r\n\r\n    return strategy\r\n  }\r\n\r\n  /**\r\n   * 检测最佳策略\r\n   */\r\n  async detectStrategy(_projectPath: string): Promise<StrategyDetectionResult> {\r\n    // TODO: 实现策略检测逻辑\r\n    // 这里先返回一个默认结果\r\n    return {\r\n      strategy: LibraryType.TYPESCRIPT,\r\n      confidence: 0.8,\r\n      evidence: [],\r\n      alternatives: []\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 应用策略\r\n   */\r\n  async applyStrategy(\r\n    libraryType: LibraryType,\r\n    config: BuilderConfig\r\n  ): Promise<StrategyApplicationResult> {\r\n    const startTime = Date.now()\r\n\r\n    try {\r\n      const strategy = this.getStrategy(libraryType)\r\n\r\n      // 验证策略是否适用\r\n      if (!strategy.isApplicable(config)) {\r\n        throw new BuilderError(\r\n          ErrorCode.CONFIG_VALIDATION_ERROR,\r\n          `策略 ${strategy.name} 不适用于当前配置`\r\n        )\r\n      }\r\n\r\n      // 应用策略\r\n      const transformedConfig = await strategy.applyStrategy(config)\r\n      const plugins = strategy.getRecommendedPlugins(config)\r\n\r\n      const duration = Date.now() - startTime\r\n\r\n      return {\r\n        strategy,\r\n        config: transformedConfig,\r\n        plugins,\r\n        duration,\r\n        warnings: [],\r\n        optimizations: []\r\n      }\r\n\r\n    } catch (error) {\r\n      this.errorHandler.handle(error as Error, 'applyStrategy')\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取所有已注册的策略\r\n   */\r\n  getAllStrategies(): ILibraryStrategy[] {\r\n    return Array.from(this.strategies.values())\r\n  }\r\n\r\n  /**\r\n   * 获取支持的库类型\r\n   */\r\n  getSupportedTypes(): LibraryType[] {\r\n    return Array.from(this.strategies.keys())\r\n  }\r\n\r\n  /**\r\n   * 注册默认策略\r\n   */\r\n  private registerDefaultStrategies(): void {\r\n    // TypeScript 策略\r\n    this.registerStrategy(new TypeScriptStrategy())\r\n\r\n    // Vue3 策略\r\n    this.registerStrategy(new Vue3Strategy())\r\n\r\n    // Vue2 策略\r\n    this.registerStrategy(new Vue2Strategy())\r\n\r\n    // 样式策略\r\n    this.registerStrategy(new StyleStrategy())\r\n\r\n    // React 策略\r\n    this.registerStrategy(new ReactStrategy())\r\n\r\n    // Svelte 策略\r\n    this.registerStrategy(new SvelteStrategy())\r\n\r\n    // Solid 策略\r\n    this.registerStrategy(new SolidStrategy())\r\n\r\n    // Preact 策略\r\n    this.registerStrategy(new PreactStrategy())\r\n\r\n    // Lit / Web Components 策略\r\n    this.registerStrategy(new LitStrategy())\r\n\r\n    // Angular（基础）策略\r\n    this.registerStrategy(new AngularStrategy())\r\n\r\n    // 混合策略\r\n    this.registerStrategy(new MixedStrategy())\r\n  }\r\n}\r\n"]}