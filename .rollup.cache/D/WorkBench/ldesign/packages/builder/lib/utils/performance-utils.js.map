{"version":3,"file":"performance-utils.js","sourceRoot":"","sources":["../../src/utils/performance-utils.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * 性能优化工具函数\n * \n * 提供各种性能优化相关的实用工具\n * \n * @author LDesign Team\n * @version 1.0.0\n */\n\n/**\n * 防抖函数\n */\nexport function debounce<T extends (...args: unknown[]) => unknown>(\n  func: T,\n  wait: number,\n  immediate = false\n): (...args: Parameters<T>) => void {\n  let timeout: NodeJS.Timeout | null = null\n  \n  return function executedFunction(...args: Parameters<T>) {\n    const later = () => {\n      timeout = null\n      if (!immediate) func(...args)\n    }\n    \n    const callNow = immediate && !timeout\n    \n    if (timeout) clearTimeout(timeout)\n    timeout = setTimeout(later, wait)\n    \n    if (callNow) func(...args)\n  }\n}\n\n/**\n * 节流函数\n */\nexport function throttle<T extends (...args: unknown[]) => unknown>(\n  func: T,\n  limit: number\n): (...args: Parameters<T>) => void {\n  let inThrottle: boolean\n  \n  return function executedFunction(...args: Parameters<T>) {\n    if (!inThrottle) {\n      func(...args)\n      inThrottle = true\n      setTimeout(() => inThrottle = false, limit)\n    }\n  }\n}\n\n/**\n * 内存使用监控\n */\nexport class MemoryMonitor {\n  private samples: Array<{ timestamp: number; usage: NodeJS.MemoryUsage }> = []\n  private maxSamples: number\n  \n  constructor(maxSamples = 100) {\n    this.maxSamples = maxSamples\n  }\n  \n  /**\n   * 记录当前内存使用情况\n   */\n  sample(): NodeJS.MemoryUsage {\n    const usage = process.memoryUsage()\n    const timestamp = Date.now()\n    \n    this.samples.push({ timestamp, usage })\n    \n    // 限制样本数量\n    if (this.samples.length > this.maxSamples) {\n      this.samples.shift()\n    }\n    \n    return usage\n  }\n  \n  /**\n   * 获取内存使用趋势\n   */\n  getTrend(): {\n    current: NodeJS.MemoryUsage\n    peak: NodeJS.MemoryUsage\n    average: NodeJS.MemoryUsage\n    trend: 'increasing' | 'decreasing' | 'stable'\n  } {\n    if (this.samples.length === 0) {\n      const current = process.memoryUsage()\n      return {\n        current,\n        peak: current,\n        average: current,\n        trend: 'stable'\n      }\n    }\n    \n    const current = this.samples[this.samples.length - 1].usage\n    const peak = this.samples.reduce((max, sample) => ({\n      rss: Math.max(max.rss, sample.usage.rss),\n      heapTotal: Math.max(max.heapTotal, sample.usage.heapTotal),\n      heapUsed: Math.max(max.heapUsed, sample.usage.heapUsed),\n      external: Math.max(max.external, sample.usage.external),\n      arrayBuffers: Math.max(max.arrayBuffers || 0, sample.usage.arrayBuffers || 0)\n    }), { rss: 0, heapTotal: 0, heapUsed: 0, external: 0, arrayBuffers: 0 })\n    \n    const average = this.samples.reduce((sum, sample) => ({\n      rss: sum.rss + sample.usage.rss,\n      heapTotal: sum.heapTotal + sample.usage.heapTotal,\n      heapUsed: sum.heapUsed + sample.usage.heapUsed,\n      external: sum.external + sample.usage.external,\n      arrayBuffers: (sum.arrayBuffers || 0) + (sample.usage.arrayBuffers || 0)\n    }), { rss: 0, heapTotal: 0, heapUsed: 0, external: 0, arrayBuffers: 0 })\n    \n    const count = this.samples.length\n    const avgUsage = {\n      rss: Math.round(average.rss / count),\n      heapTotal: Math.round(average.heapTotal / count),\n      heapUsed: Math.round(average.heapUsed / count),\n      external: Math.round(average.external / count),\n      arrayBuffers: Math.round((average.arrayBuffers || 0) / count)\n    }\n    \n    // 计算趋势\n    let trend: 'increasing' | 'decreasing' | 'stable' = 'stable'\n    if (this.samples.length >= 3) {\n      const recent = this.samples.slice(-3)\n      const firstHeap = recent[0].usage.heapUsed\n      const lastHeap = recent[recent.length - 1].usage.heapUsed\n      const diff = lastHeap - firstHeap\n      const threshold = firstHeap * 0.1 // 10% 变化阈值\n      \n      if (diff > threshold) {\n        trend = 'increasing'\n      } else if (diff < -threshold) {\n        trend = 'decreasing'\n      }\n    }\n    \n    return { current, peak, average: avgUsage, trend }\n  }\n  \n  /**\n   * 清除所有样本\n   */\n  clear(): void {\n    this.samples = []\n  }\n}\n\n/**\n * 批处理工具\n */\nexport class BatchProcessor<T, R> {\n  private batchSize: number\n  private processor: (batch: T[]) => Promise<R[]>\n  \n  constructor(batchSize: number, processor: (batch: T[]) => Promise<R[]>) {\n    this.batchSize = batchSize\n    this.processor = processor\n  }\n  \n  /**\n   * 处理数据批次\n   */\n  async process(items: T[]): Promise<R[]> {\n    const results: R[] = []\n    \n    for (let i = 0; i < items.length; i += this.batchSize) {\n      const batch = items.slice(i, i + this.batchSize)\n      const batchResults = await this.processor(batch)\n      results.push(...batchResults)\n    }\n    \n    return results\n  }\n  \n  /**\n   * 并行处理数据批次\n   */\n  async processParallel(items: T[], maxConcurrency = 3): Promise<R[]> {\n    const batches: T[][] = []\n    \n    for (let i = 0; i < items.length; i += this.batchSize) {\n      batches.push(items.slice(i, i + this.batchSize))\n    }\n    \n    const results: R[] = []\n    \n    for (let i = 0; i < batches.length; i += maxConcurrency) {\n      const concurrentBatches = batches.slice(i, i + maxConcurrency)\n      const promises = concurrentBatches.map(batch => this.processor(batch))\n      const batchResults = await Promise.all(promises)\n      results.push(...batchResults.flat())\n    }\n    \n    return results\n  }\n}\n\n/**\n * 缓存装饰器\n */\nexport function memoize<TArgs extends unknown[], TReturn>(\n  fn: (...args: TArgs) => TReturn,\n  keyGenerator?: (...args: TArgs) => string\n): (...args: TArgs) => TReturn {\n  const cache = new Map<string, TReturn>()\n  \n  return (...args: TArgs): TReturn => {\n    const key = keyGenerator ? keyGenerator(...args) : JSON.stringify(args)\n    \n    if (cache.has(key)) {\n      return cache.get(key)!\n    }\n    \n    const result = fn(...args)\n    cache.set(key, result)\n    return result\n  }\n}\n\n/**\n * 异步缓存装饰器\n */\nexport function memoizeAsync<TArgs extends unknown[], TReturn>(\n  fn: (...args: TArgs) => Promise<TReturn>,\n  keyGenerator?: (...args: TArgs) => string,\n  ttl?: number\n): (...args: TArgs) => Promise<TReturn> {\n  const cache = new Map<string, { value: TReturn; timestamp: number }>()\n  \n  return async (...args: TArgs): Promise<TReturn> => {\n    const key = keyGenerator ? keyGenerator(...args) : JSON.stringify(args)\n    const now = Date.now()\n    \n    if (cache.has(key)) {\n      const cached = cache.get(key)!\n      if (!ttl || (now - cached.timestamp) < ttl) {\n        return cached.value\n      }\n    }\n    \n    const result = await fn(...args)\n    cache.set(key, { value: result, timestamp: now })\n    return result\n  }\n}\n\n/**\n * 格式化字节大小\n */\nexport function formatBytes(bytes: number, decimals = 2): string {\n  if (bytes === 0) return '0 Bytes'\n  \n  const k = 1024\n  const dm = decimals < 0 ? 0 : decimals\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB']\n  \n  const i = Math.floor(Math.log(bytes) / Math.log(k))\n  \n  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i]\n}\n\n/**\n * 格式化持续时间\n */\nexport function formatDuration(ms: number): string {\n  if (ms < 1000) return `${ms}ms`\n  if (ms < 60000) return `${(ms / 1000).toFixed(1)}s`\n  if (ms < 3600000) return `${(ms / 60000).toFixed(1)}m`\n  return `${(ms / 3600000).toFixed(1)}h`\n}\n"]}