{"version":3,"file":"package-updater.js","sourceRoot":"","sources":["../../src/utils/package-updater.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Package.json 自动更新工具\n * \n * 负责在构建完成后自动更新 package.json 的 exports、main、module、types、files 等字段\n * \n * @author LDesign Team\n * @version 1.0.0\n */\n\nimport { promises as fs } from 'fs'\nimport path from 'path'\nimport { Logger } from './logger'\n\n/**\n * Package.json 更新配置\n */\nexport interface PackageUpdaterConfig {\n  /** 项目根目录 */\n  projectRoot: string\n  /** 源码目录，默认为 'src' */\n  srcDir?: string\n  /** 输出目录配置 */\n  outputDirs?: {\n    /** ESM 输出目录，默认为 'es' */\n    esm?: string\n    /** CJS 输出目录，默认为 'lib' */\n    cjs?: string\n    /** UMD 输出目录，默认为 'dist' */\n    umd?: string\n    /** 类型声明目录，默认为 'types' 或与 esm 相同 */\n    types?: string\n  }\n  /** 是否启用自动 exports 生成 */\n  autoExports?: boolean\n  /** 是否更新 main/module/types 字段 */\n  updateEntryPoints?: boolean\n  /** 是否更新 files 字段 */\n  updateFiles?: boolean\n  /** 自定义 exports 配置 */\n  customExports?: Record<string, any>\n  /** 日志记录器 */\n  logger?: Logger\n}\n\n/**\n * Package.json 更新器\n */\nexport class PackageUpdater {\n  private config: Required<PackageUpdaterConfig>\n  private logger: Logger\n\n  constructor(config: PackageUpdaterConfig) {\n    this.config = {\n      projectRoot: config.projectRoot,\n      srcDir: config.srcDir || 'src',\n      outputDirs: {\n        esm: 'es',\n        cjs: 'lib',\n        umd: 'dist',\n        types: 'es',\n        ...config.outputDirs\n      },\n      autoExports: config.autoExports ?? true,\n      updateEntryPoints: config.updateEntryPoints ?? true,\n      updateFiles: config.updateFiles ?? true,\n      customExports: config.customExports || {},\n      logger: config.logger || new Logger()\n    }\n    this.logger = this.config.logger\n  }\n\n  /**\n   * 执行 package.json 更新\n   */\n  async update(): Promise<void> {\n    try {\n      this.logger.info('开始更新 package.json...')\n\n      const packageJsonPath = path.join(this.config.projectRoot, 'package.json')\n      const packageJson = await this.readPackageJson(packageJsonPath)\n\n      if (this.config.autoExports) {\n        packageJson.exports = await this.generateExports()\n      }\n\n      if (this.config.updateEntryPoints) {\n        this.updateEntryPoints(packageJson)\n      }\n\n      if (this.config.updateFiles) {\n        packageJson.files = await this.generateFiles()\n      }\n\n      // 优化字段排序\n      const sortedPackageJson = this.sortPackageJsonFields(packageJson)\n\n      await this.writePackageJson(packageJsonPath, sortedPackageJson)\n      this.logger.success('package.json 更新完成')\n\n    } catch (error) {\n      this.logger.error('package.json 更新失败:', error)\n      throw error\n    }\n  }\n\n  /**\n   * 扫描 src 目录并生成 exports 配置\n   */\n  private async generateExports(): Promise<Record<string, any>> {\n    const srcPath = path.join(this.config.projectRoot, this.config.srcDir)\n    const exports: Record<string, any> = {}\n\n    // 主入口\n    exports['.'] = this.createExportEntry('index')\n\n    // 只扫描 src 下的直接子目录\n    const directDirectories = await this.scanDirectDirectories(srcPath)\n\n    for (const dir of directDirectories) {\n      const dirName = path.basename(dir)\n\n      // 检查是否有 TypeScript 文件\n      const hasTypeScriptFiles = await this.hasTypeScriptFiles(dir)\n      if (hasTypeScriptFiles) {\n        // 检查是否有 index 文件\n        const hasIndex = await this.hasIndexFile(dir)\n\n        if (hasIndex) {\n          // 为有 index.ts 的目录创建导出：package/utils\n          exports[`./${dirName}`] = this.createExportEntry(`${dirName}/index`)\n        }\n\n        // 支持子目录下的所有文件：package/utils/*\n        exports[`./${dirName}/*`] = this.createWildcardExportEntry(dirName)\n      }\n    }\n\n    // 检测并添加CSS文件exports\n    await this.addCssExports(exports)\n\n    // 合并自定义 exports\n    return { ...exports, ...this.config.customExports }\n  }\n\n  /**\n   * 创建单个 export 条目\n   */\n  private createExportEntry(relativePath: string): Record<string, string> {\n    const { esm, cjs, types } = this.config.outputDirs\n    const entry: Record<string, string> = {}\n\n    // 类型声明 - 使用 types 目录配置\n    if (types) {\n      entry.types = `./${types}/${relativePath}.d.ts`\n    }\n\n    // ESM - 使用 esm 目录配置\n    if (esm) {\n      entry.import = `./${esm}/${relativePath}.js`\n    }\n\n    // CJS - 使用 cjs 目录配置\n    if (cjs) {\n      entry.require = `./${cjs}/${relativePath}.cjs`\n    }\n\n    return entry\n  }\n\n  /**\n   * 创建通配符 export 条目（支持 package/utils/* 导入）\n   */\n  private createWildcardExportEntry(dirName: string): Record<string, string> {\n    const { esm, cjs, types } = this.config.outputDirs\n    const entry: Record<string, string> = {}\n\n    // 类型声明 - 使用 types 目录配置\n    if (types) {\n      entry.types = `./${types}/${dirName}/*.d.ts`\n    }\n\n    // ESM - 使用 esm 目录配置\n    if (esm) {\n      entry.import = `./${esm}/${dirName}/*.js`\n    }\n\n    // CJS - 使用 cjs 目录配置\n    if (cjs) {\n      entry.require = `./${cjs}/${dirName}/*.cjs`\n    }\n\n    return entry\n  }\n\n  /**\n   * 扫描 src 下的直接子目录（不递归）\n   */\n  private async scanDirectDirectories(srcPath: string): Promise<string[]> {\n    try {\n      const fs = await import('fs')\n      const entries = await fs.promises.readdir(srcPath, { withFileTypes: true })\n      const directories: string[] = []\n\n      for (const entry of entries) {\n        if (entry.isDirectory() && !entry.name.startsWith('.')) {\n          directories.push(path.join(srcPath, entry.name))\n        }\n      }\n\n      return directories\n    } catch (error) {\n      this.logger.warn('扫描直接子目录失败:', error)\n      return []\n    }\n  }\n\n\n\n  /**\n   * 检查目录是否有 index 文件\n   */\n  private async hasIndexFile(dir: string): Promise<boolean> {\n    const indexFiles = ['index.ts', 'index.js', 'index.vue']\n\n    for (const file of indexFiles) {\n      const filePath = path.join(dir, file)\n      try {\n        await fs.access(filePath)\n        return true\n      } catch {\n        // 文件不存在，继续检查下一个\n      }\n    }\n\n    return false\n  }\n\n  /**\n   * 检查目录是否包含 TypeScript 文件\n   */\n  private async hasTypeScriptFiles(dir: string): Promise<boolean> {\n    try {\n      const entries = await fs.readdir(dir, { withFileTypes: true })\n\n      // 检查是否有 .ts 或 .tsx 文件\n      for (const entry of entries) {\n        if (entry.isFile() && (entry.name.endsWith('.ts') || entry.name.endsWith('.tsx'))) {\n          return true\n        }\n      }\n\n      return false\n    } catch {\n      return false\n    }\n  }\n\n  /**\n   * 更新入口点字段\n   */\n  private updateEntryPoints(packageJson: any): void {\n    const { esm, cjs, umd, types } = this.config.outputDirs\n\n    // 主入口点 - CJS 格式\n    if (cjs) {\n      packageJson.main = `./${cjs}/index.cjs`\n    }\n\n    // ESM 入口点 - 使用 esm 目录\n    if (esm) {\n      packageJson.module = `./${esm}/index.js`\n    }\n\n    // TypeScript 类型定义 - 使用 types 目录\n    if (types) {\n      packageJson.types = `./${types}/index.d.ts`\n    }\n\n    // UMD 格式 - 用于 CDN\n    if (umd) {\n      // 检查是否存在压缩版本\n      const minifiedPath = `./${umd}/index.min.js`\n      const regularPath = `./${umd}/index.js`\n\n      const minifiedFullPath = path.join(this.config.projectRoot, umd, 'index.min.js')\n      const regularFullPath = path.join(this.config.projectRoot, umd, 'index.js')\n\n      // 优先使用压缩版本，如果不存在则使用常规版本\n      if (this.fileExistsSync(minifiedFullPath)) {\n        packageJson.unpkg = minifiedPath\n        packageJson.jsdelivr = minifiedPath\n        this.logger.info(`使用压缩版本 UMD 文件: ${minifiedPath}`)\n      } else if (this.fileExistsSync(regularFullPath)) {\n        packageJson.unpkg = regularPath\n        packageJson.jsdelivr = regularPath\n        this.logger.info(`使用常规版本 UMD 文件: ${regularPath}`)\n      } else {\n        // 如果都不存在，默认使用压缩版本路径（构建时可能还没生成）\n        packageJson.unpkg = minifiedPath\n        packageJson.jsdelivr = minifiedPath\n        this.logger.warn(`UMD 文件不存在，使用默认路径: ${minifiedPath}`)\n      }\n    }\n  }\n\n  /**\n   * 生成 files 字段\n   */\n  private async generateFiles(): Promise<string[]> {\n    const files = ['README.md', 'LICENSE', 'package.json']\n    const { esm, cjs, umd, types } = this.config.outputDirs\n\n    // 检查输出目录是否存在\n    for (const dir of [esm, cjs, umd, types]) {\n      if (dir) {\n        const dirPath = path.join(this.config.projectRoot, dir)\n        try {\n          await fs.access(dirPath)\n          if (!files.includes(dir)) {\n            files.push(dir)\n          }\n        } catch {\n          // 目录不存在，跳过\n        }\n      }\n    }\n\n    return files\n  }\n\n  /**\n   * 读取 package.json\n   */\n  private async readPackageJson(packageJsonPath: string): Promise<any> {\n    try {\n      const content = await fs.readFile(packageJsonPath, 'utf-8')\n      return JSON.parse(content)\n    } catch (error) {\n      throw new Error(`读取 package.json 失败: ${error}`)\n    }\n  }\n\n  /**\n   * 检查文件是否存在（同步）\n   */\n  private fileExistsSync(filePath: string): boolean {\n    try {\n      const fs = require('fs')\n      fs.accessSync(filePath)\n      return true\n    } catch {\n      return false\n    }\n  }\n\n  /**\n   * 写入 package.json\n   */\n  private async writePackageJson(packageJsonPath: string, packageJson: any): Promise<void> {\n    try {\n      const content = JSON.stringify(packageJson, null, 2)\n      await fs.writeFile(packageJsonPath, content, 'utf-8')\n    } catch (error) {\n      throw new Error(`写入 package.json 失败: ${error}`)\n    }\n  }\n\n  /**\n   * 按照最佳实践排序 package.json 字段\n   */\n  private sortPackageJsonFields(packageJson: any): any {\n    // 定义字段的优先级顺序\n    const fieldOrder = [\n      // 基本信息\n      'name',\n      'version',\n      'description',\n      'keywords',\n      'author',\n      'license',\n      'homepage',\n      'repository',\n      'bugs',\n\n      // 模块配置\n      'type',\n      'sideEffects',\n\n      // 入口点\n      'exports',\n      'main',\n      'module',\n      'types',\n      'unpkg',\n      'jsdelivr',\n\n      // 文件配置\n      'files',\n\n      // 脚本\n      'scripts',\n\n      // 依赖\n      'dependencies',\n      'peerDependencies',\n      'devDependencies',\n      'optionalDependencies',\n\n      // 其他配置\n      'engines',\n      'os',\n      'cpu',\n      'publishConfig',\n      'size-limit'\n    ]\n\n    const sorted: any = {}\n\n    // 按照定义的顺序添加字段\n    for (const field of fieldOrder) {\n      if (packageJson[field] !== undefined) {\n        sorted[field] = packageJson[field]\n      }\n    }\n\n    // 添加其他未在顺序中定义的字段\n    for (const [key, value] of Object.entries(packageJson)) {\n      if (!fieldOrder.includes(key)) {\n        sorted[key] = value\n      }\n    }\n\n    return sorted\n  }\n\n  /**\n   * 检测并添加CSS文件exports\n   */\n  private async addCssExports(exports: Record<string, any>): Promise<void> {\n    const { esm, cjs, umd } = this.config.outputDirs\n    const fs = await import('fs')\n    const path = await import('path')\n\n    // 检查各个输出目录中的CSS文件\n    const cssFiles = new Set<string>()\n\n    // 检查ESM目录\n    if (esm) {\n      const esmDir = path.join(this.config.projectRoot, esm)\n      if (fs.existsSync(esmDir)) {\n        await this.findCssFiles(esmDir, cssFiles, esm)\n      }\n    }\n\n    // 检查CJS目录\n    if (cjs) {\n      const cjsDir = path.join(this.config.projectRoot, cjs)\n      if (fs.existsSync(cjsDir)) {\n        await this.findCssFiles(cjsDir, cssFiles, cjs)\n      }\n    }\n\n    // 检查UMD目录\n    if (umd) {\n      const umdDir = path.join(this.config.projectRoot, umd)\n      if (fs.existsSync(umdDir)) {\n        await this.findCssFiles(umdDir, cssFiles, umd)\n      }\n    }\n\n    // 为每个CSS文件添加exports\n    for (const cssFile of cssFiles) {\n      const exportKey = `./${cssFile}`\n      if (!exports[exportKey]) {\n        exports[exportKey] = `./${cssFile}`\n      }\n    }\n  }\n\n  /**\n   * 在指定目录中查找CSS文件\n   */\n  private async findCssFiles(dir: string, cssFiles: Set<string>, prefix: string): Promise<void> {\n    const fs = await import('fs')\n    const path = await import('path')\n\n    try {\n      const files = fs.readdirSync(dir, { withFileTypes: true })\n\n      for (const file of files) {\n        const fullPath = path.join(dir, file.name)\n\n        if (file.isDirectory()) {\n          // 递归搜索子目录\n          await this.findCssFiles(fullPath, cssFiles, `${prefix}/${file.name}`)\n        } else if (file.name.endsWith('.css')) {\n          // 添加CSS文件\n          cssFiles.add(`${prefix}/${file.name}`)\n        }\n      }\n    } catch (error) {\n      // 忽略读取错误\n    }\n  }\n}\n\n/**\n * 创建 Package 更新器的便捷函数\n */\nexport function createPackageUpdater(config: PackageUpdaterConfig): PackageUpdater {\n  return new PackageUpdater(config)\n}\n"]}