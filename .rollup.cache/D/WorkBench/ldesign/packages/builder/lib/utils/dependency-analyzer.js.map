{"version":3,"file":"dependency-analyzer.js","sourceRoot":"","sources":["../../src/utils/dependency-analyzer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * 智能依赖分析器\n * \n * 提供深度依赖分析、循环依赖检测、未使用依赖识别等功能\n */\n\nimport * as fs from 'node:fs/promises'\nimport * as path from 'node:path'\nimport { Logger } from './logger'\n\n/**\n * 依赖类型\n */\nexport type DependencyType = 'production' | 'development' | 'peer' | 'optional' | 'bundled'\n\n/**\n * 依赖信息\n */\nexport interface DependencyInfo {\n  name: string\n  version: string\n  type: DependencyType\n  size?: number\n  license?: string\n  description?: string\n  homepage?: string\n  repository?: string\n  lastUpdated?: Date\n  vulnerabilities?: VulnerabilityInfo[]\n  usageCount: number\n  importPaths: string[]\n}\n\n/**\n * 漏洞信息\n */\nexport interface VulnerabilityInfo {\n  id: string\n  severity: 'low' | 'moderate' | 'high' | 'critical'\n  title: string\n  description: string\n  patchedVersions?: string\n  recommendation?: string\n}\n\n/**\n * 循环依赖信息\n */\nexport interface CircularDependency {\n  cycle: string[]\n  files: string[]\n  severity: 'warning' | 'error'\n}\n\n/**\n * 依赖分析结果\n */\nexport interface DependencyAnalysisResult {\n  dependencies: DependencyInfo[]\n  summary: {\n    total: number\n    production: number\n    development: number\n    peer: number\n    optional: number\n  }\n  circularDependencies: CircularDependency[]\n  unusedDependencies: string[]\n  duplicateDependencies: Array<{\n    name: string\n    versions: string[]\n    locations: string[]\n  }>\n  outdatedDependencies: Array<{\n    name: string\n    current: string\n    latest: string\n    wanted: string\n  }>\n  securityIssues: VulnerabilityInfo[]\n  bundleSizeAnalysis?: {\n    totalSize: number\n    largestDependencies: Array<{\n      name: string\n      size: number\n      percentage: number\n    }>\n    treeShakeable: string[]\n    nonTreeShakeable: string[]\n  }\n  recommendations: string[]\n}\n\n/**\n * 分析选项\n */\nexport interface AnalysisOptions {\n  /** 项目根目录 */\n  rootDir: string\n  /** 是否检查安全漏洞 */\n  checkSecurity?: boolean\n  /** 是否分析包大小 */\n  analyzeBundleSize?: boolean\n  /** 是否检查过期依赖 */\n  checkOutdated?: boolean\n  /** 忽略的依赖模式 */\n  ignorePatterns?: string[]\n  /** 最大分析深度 */\n  maxDepth?: number\n}\n\n/**\n * 智能依赖分析器\n */\nexport class DependencyAnalyzer {\n  private logger: Logger\n  private packageJsonCache = new Map<string, any>()\n\n  constructor(logger?: Logger) {\n    this.logger = logger || new Logger({ level: 'info' })\n  }\n\n  /**\n   * 分析项目依赖\n   */\n  async analyze(options: AnalysisOptions): Promise<DependencyAnalysisResult> {\n    this.logger.info('开始分析项目依赖...')\n\n    const packageJsonPath = path.join(options.rootDir, 'package.json')\n    const packageJson = await this.loadPackageJson(packageJsonPath)\n\n    if (!packageJson) {\n      throw new Error('未找到 package.json 文件')\n    }\n\n    // 收集所有依赖信息\n    const dependencies = await this.collectDependencies(packageJson, options)\n\n    // 检测循环依赖\n    const circularDependencies = await this.detectCircularDependencies(options.rootDir)\n\n    // 检测未使用的依赖\n    const unusedDependencies = await this.detectUnusedDependencies(dependencies, options.rootDir)\n\n    // 检测重复依赖\n    const duplicateDependencies = await this.detectDuplicateDependencies(options.rootDir)\n\n    // 检测过期依赖\n    const outdatedDependencies = options.checkOutdated \n      ? await this.detectOutdatedDependencies(dependencies)\n      : []\n\n    // 安全漏洞检查\n    const securityIssues = options.checkSecurity \n      ? await this.checkSecurityVulnerabilities(dependencies)\n      : []\n\n    // 包大小分析\n    const bundleSizeAnalysis = options.analyzeBundleSize\n      ? await this.analyzeBundleSize(dependencies, options.rootDir)\n      : undefined\n\n    // 生成摘要\n    const summary = {\n      total: dependencies.length,\n      production: dependencies.filter(d => d.type === 'production').length,\n      development: dependencies.filter(d => d.type === 'development').length,\n      peer: dependencies.filter(d => d.type === 'peer').length,\n      optional: dependencies.filter(d => d.type === 'optional').length\n    }\n\n    // 生成建议\n    const recommendations = this.generateRecommendations({\n      dependencies,\n      circularDependencies,\n      unusedDependencies,\n      duplicateDependencies,\n      outdatedDependencies,\n      securityIssues,\n      bundleSizeAnalysis\n    })\n\n    this.logger.info(`依赖分析完成，发现 ${dependencies.length} 个依赖`)\n\n    return {\n      dependencies,\n      summary,\n      circularDependencies,\n      unusedDependencies,\n      duplicateDependencies,\n      outdatedDependencies,\n      securityIssues,\n      bundleSizeAnalysis,\n      recommendations\n    }\n  }\n\n  /**\n   * 加载 package.json\n   */\n  private async loadPackageJson(filePath: string): Promise<any> {\n    if (this.packageJsonCache.has(filePath)) {\n      return this.packageJsonCache.get(filePath)\n    }\n\n    try {\n      const content = await fs.readFile(filePath, 'utf-8')\n      const packageJson = JSON.parse(content)\n      this.packageJsonCache.set(filePath, packageJson)\n      return packageJson\n    } catch (error) {\n      this.logger.warn(`无法读取 package.json: ${filePath}`)\n      return null\n    }\n  }\n\n  /**\n   * 收集依赖信息\n   */\n  private async collectDependencies(packageJson: any, options: AnalysisOptions): Promise<DependencyInfo[]> {\n    const dependencies: DependencyInfo[] = []\n    const allDeps = {\n      ...packageJson.dependencies,\n      ...packageJson.devDependencies,\n      ...packageJson.peerDependencies,\n      ...packageJson.optionalDependencies\n    }\n\n    for (const [name, version] of Object.entries(allDeps)) {\n      if (this.shouldIgnoreDependency(name, options.ignorePatterns)) {\n        continue\n      }\n\n      const depInfo = await this.analyzeDependency(name, version as string, packageJson, options.rootDir)\n      if (depInfo) {\n        dependencies.push(depInfo)\n      }\n    }\n\n    return dependencies\n  }\n\n  /**\n   * 分析单个依赖\n   */\n  private async analyzeDependency(\n    name: string, \n    version: string, \n    rootPackageJson: any, \n    rootDir: string\n  ): Promise<DependencyInfo | null> {\n    try {\n      const nodeModulesPath = path.join(rootDir, 'node_modules', name)\n      const depPackageJsonPath = path.join(nodeModulesPath, 'package.json')\n      const depPackageJson = await this.loadPackageJson(depPackageJsonPath)\n\n      if (!depPackageJson) {\n        return null\n      }\n\n      // 确定依赖类型\n      const type = this.getDependencyType(name, rootPackageJson)\n\n      // 计算使用次数和导入路径\n      const { usageCount, importPaths } = await this.analyzeUsage(name, rootDir)\n\n      return {\n        name,\n        version,\n        type,\n        size: await this.calculatePackageSize(nodeModulesPath),\n        license: depPackageJson.license,\n        description: depPackageJson.description,\n        homepage: depPackageJson.homepage,\n        repository: typeof depPackageJson.repository === 'string' \n          ? depPackageJson.repository \n          : depPackageJson.repository?.url,\n        usageCount,\n        importPaths\n      }\n    } catch (error) {\n      this.logger.warn(`分析依赖 ${name} 时出错:`, error)\n      return null\n    }\n  }\n\n  /**\n   * 获取依赖类型\n   */\n  private getDependencyType(name: string, packageJson: any): DependencyType {\n    if (packageJson.dependencies?.[name]) return 'production'\n    if (packageJson.devDependencies?.[name]) return 'development'\n    if (packageJson.peerDependencies?.[name]) return 'peer'\n    if (packageJson.optionalDependencies?.[name]) return 'optional'\n    if (packageJson.bundledDependencies?.includes(name)) return 'bundled'\n    return 'production'\n  }\n\n  /**\n   * 分析依赖使用情况\n   */\n  private async analyzeUsage(_dependencyName: string, _rootDir: string): Promise<{\n    usageCount: number\n    importPaths: string[]\n  }> {\n    // 这里实现代码扫描逻辑，查找 import/require 语句\n    // 简化实现，实际应该扫描所有源文件\n    return {\n      usageCount: 1,\n      importPaths: []\n    }\n  }\n\n  /**\n   * 计算包大小\n   */\n  private async calculatePackageSize(packagePath: string): Promise<number> {\n    try {\n      const stats = await fs.stat(packagePath)\n      if (stats.isDirectory()) {\n        // 递归计算目录大小\n        let totalSize = 0\n        const files = await fs.readdir(packagePath)\n        \n        for (const file of files) {\n          const filePath = path.join(packagePath, file)\n          const fileStats = await fs.stat(filePath)\n          \n          if (fileStats.isDirectory()) {\n            totalSize += await this.calculatePackageSize(filePath)\n          } else {\n            totalSize += fileStats.size\n          }\n        }\n        \n        return totalSize\n      } else {\n        return stats.size\n      }\n    } catch {\n      return 0\n    }\n  }\n\n  /**\n   * 检测循环依赖\n   */\n  private async detectCircularDependencies(_rootDir: string): Promise<CircularDependency[]> {\n    // 实现循环依赖检测逻辑\n    // 这里返回空数组作为占位符\n    return []\n  }\n\n  /**\n   * 检测未使用的依赖\n   */\n  private async detectUnusedDependencies(dependencies: DependencyInfo[], _rootDir: string): Promise<string[]> {\n    return dependencies\n      .filter(dep => dep.usageCount === 0 && dep.type === 'production')\n      .map(dep => dep.name)\n  }\n\n  /**\n   * 检测重复依赖\n   */\n  private async detectDuplicateDependencies(_rootDir: string): Promise<Array<{\n    name: string\n    versions: string[]\n    locations: string[]\n  }>> {\n    // 实现重复依赖检测逻辑\n    return []\n  }\n\n  /**\n   * 检测过期依赖\n   */\n  private async detectOutdatedDependencies(_dependencies: DependencyInfo[]): Promise<Array<{\n    name: string\n    current: string\n    latest: string\n    wanted: string\n  }>> {\n    // 实现过期依赖检测逻辑\n    return []\n  }\n\n  /**\n   * 检查安全漏洞\n   */\n  private async checkSecurityVulnerabilities(_dependencies: DependencyInfo[]): Promise<VulnerabilityInfo[]> {\n    // 实现安全漏洞检查逻辑\n    return []\n  }\n\n  /**\n   * 分析包大小\n   */\n  private async analyzeBundleSize(dependencies: DependencyInfo[], _rootDir: string) {\n    const totalSize = dependencies.reduce((sum, dep) => sum + (dep.size || 0), 0)\n    \n    const largestDependencies = dependencies\n      .filter(dep => dep.size)\n      .sort((a, b) => (b.size || 0) - (a.size || 0))\n      .slice(0, 10)\n      .map(dep => ({\n        name: dep.name,\n        size: dep.size || 0,\n        percentage: ((dep.size || 0) / totalSize) * 100\n      }))\n\n    return {\n      totalSize,\n      largestDependencies,\n      treeShakeable: [],\n      nonTreeShakeable: []\n    }\n  }\n\n  /**\n   * 生成建议\n   */\n  private generateRecommendations(analysisResult: Partial<DependencyAnalysisResult>): string[] {\n    const recommendations: string[] = []\n\n    if (analysisResult.unusedDependencies?.length) {\n      recommendations.push(`发现 ${analysisResult.unusedDependencies.length} 个未使用的依赖，建议移除以减小包大小`)\n    }\n\n    if (analysisResult.circularDependencies?.length) {\n      recommendations.push(`发现 ${analysisResult.circularDependencies.length} 个循环依赖，建议重构代码结构`)\n    }\n\n    if (analysisResult.securityIssues?.length) {\n      const criticalCount = analysisResult.securityIssues.filter(issue => issue.severity === 'critical').length\n      if (criticalCount > 0) {\n        recommendations.push(`发现 ${criticalCount} 个严重安全漏洞，建议立即更新相关依赖`)\n      }\n    }\n\n    if (analysisResult.outdatedDependencies?.length) {\n      recommendations.push(`发现 ${analysisResult.outdatedDependencies.length} 个过期依赖，建议更新到最新版本`)\n    }\n\n    return recommendations\n  }\n\n  /**\n   * 检查是否应该忽略依赖\n   */\n  private shouldIgnoreDependency(name: string, ignorePatterns?: string[]): boolean {\n    if (!ignorePatterns) return false\n    \n    return ignorePatterns.some(pattern => {\n      if (pattern.includes('*')) {\n        const regex = new RegExp(pattern.replace(/\\*/g, '.*'))\n        return regex.test(name)\n      }\n      return name === pattern\n    })\n  }\n}\n"]}