{"version":3,"file":"performance-optimizer.js","sourceRoot":"","sources":["../../src/utils/performance-optimizer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * 构建性能优化器\r\n * \r\n * @author LDesign Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { Worker } from 'worker_threads'\r\nimport * as os from 'os'\r\nimport { EventEmitter } from 'events'\r\n\r\n/**\r\n * 性能优化选项\r\n */\r\nexport interface PerformanceOptimizerOptions {\r\n  /** 是否启用多线程 */\r\n  enableWorkers?: boolean\r\n  /** 工作线程数量 */\r\n  workerCount?: number\r\n  /** 是否启用缓存 */\r\n  enableCache?: boolean\r\n  /** 缓存大小限制(MB) */\r\n  cacheSize?: number\r\n  /** 是否启用代码分割优化 */\r\n  enableCodeSplitting?: boolean\r\n  /** 是否启用树摇优化 */\r\n  enableTreeShaking?: boolean\r\n  /** 是否启用压缩优化 */\r\n  enableCompression?: boolean\r\n  /** 并行任务限制 */\r\n  maxParallelTasks?: number\r\n}\r\n\r\n/**\r\n * 任务接口\r\n */\r\ninterface Task<T = any> {\r\n  id: string\r\n  fn: (...args: any[]) => T | Promise<T>\r\n  args: any[]\r\n  priority?: number\r\n  timeout?: number\r\n}\r\n\r\n/**\r\n * 任务结果\r\n */\r\ninterface TaskResult<T = any> {\r\n  id: string\r\n  result?: T\r\n  error?: Error\r\n  duration: number\r\n}\r\n\r\n/**\r\n * LRU缓存实现\r\n */\r\nclass LRUCache<K, V> {\r\n  private cache = new Map<K, { value: V; timestamp: number }>()\r\n  private maxSize: number\r\n  private maxAge: number\r\n\r\n  constructor(maxSize = 100, maxAge = 60000) {\r\n    this.maxSize = maxSize\r\n    this.maxAge = maxAge\r\n  }\r\n\r\n  get(key: K): V | undefined {\r\n    const item = this.cache.get(key)\r\n    if (!item) return undefined\r\n\r\n    const age = Date.now() - item.timestamp\r\n    if (age > this.maxAge) {\r\n      this.cache.delete(key)\r\n      return undefined\r\n    }\r\n\r\n    // 更新访问时间（LRU）\r\n    this.cache.delete(key)\r\n    this.cache.set(key, { value: item.value, timestamp: Date.now() })\r\n    return item.value\r\n  }\r\n\r\n  set(key: K, value: V): void {\r\n    // 检查大小限制\r\n    if (this.cache.size >= this.maxSize && !this.cache.has(key)) {\r\n      // 删除最旧的项\r\n      const firstKey = this.cache.keys().next().value\r\n      if (firstKey !== undefined) {\r\n        this.cache.delete(firstKey)\r\n      }\r\n    }\r\n\r\n    this.cache.set(key, { value, timestamp: Date.now() })\r\n  }\r\n\r\n  has(key: K): boolean {\r\n    const item = this.cache.get(key)\r\n    if (!item) return false\r\n\r\n    const age = Date.now() - item.timestamp\r\n    if (age > this.maxAge) {\r\n      this.cache.delete(key)\r\n      return false\r\n    }\r\n\r\n    return true\r\n  }\r\n\r\n  clear(): void {\r\n    this.cache.clear()\r\n  }\r\n\r\n  size(): number {\r\n    return this.cache.size\r\n  }\r\n}\r\n\r\n/**\r\n * 任务队列\r\n */\r\nclass TaskQueue<T = any> {\r\n  private queue: Task<T>[] = []\r\n  private running = 0\r\n  private maxConcurrent: number\r\n  private results = new Map<string, TaskResult<T>>()\r\n  private emitter = new EventEmitter()\r\n\r\n  constructor(maxConcurrent = 4) {\r\n    this.maxConcurrent = maxConcurrent\r\n  }\r\n\r\n  async add(task: Task<T>): Promise<T> {\r\n    return new Promise((resolve, reject) => {\r\n      // 添加到队列\r\n      this.queue.push(task)\r\n      this.queue.sort((a, b) => (b.priority || 0) - (a.priority || 0))\r\n\r\n      // 监听完成事件\r\n      this.emitter.once(task.id, (result: TaskResult<T>) => {\r\n        if (result.error) {\r\n          reject(result.error)\r\n        } else {\r\n          resolve(result.result!)\r\n        }\r\n      })\r\n\r\n      // 尝试运行任务\r\n      this.runNext()\r\n    })\r\n  }\r\n\r\n  private async runNext(): Promise<void> {\r\n    if (this.running >= this.maxConcurrent || this.queue.length === 0) {\r\n      return\r\n    }\r\n\r\n    const task = this.queue.shift()!\r\n    this.running++\r\n\r\n    const startTime = Date.now()\r\n    \r\n    try {\r\n      // 设置超时\r\n      const timeoutPromise = task.timeout\r\n        ? new Promise<never>((_, reject) =>\r\n            setTimeout(() => reject(new Error('Task timeout')), task.timeout)\r\n          )\r\n        : null\r\n\r\n      // 执行任务\r\n      const resultPromise = Promise.resolve(task.fn(...task.args))\r\n      \r\n      const result = timeoutPromise\r\n        ? await Promise.race([resultPromise, timeoutPromise])\r\n        : await resultPromise\r\n\r\n      const taskResult: TaskResult<T> = {\r\n        id: task.id,\r\n        result,\r\n        duration: Date.now() - startTime\r\n      }\r\n\r\n      this.results.set(task.id, taskResult)\r\n      this.emitter.emit(task.id, taskResult)\r\n    } catch (error) {\r\n      const taskResult: TaskResult<T> = {\r\n        id: task.id,\r\n        error: error as Error,\r\n        duration: Date.now() - startTime\r\n      }\r\n\r\n      this.results.set(task.id, taskResult)\r\n      this.emitter.emit(task.id, taskResult)\r\n    } finally {\r\n      this.running--\r\n      // 继续运行下一个任务\r\n      this.runNext()\r\n    }\r\n  }\r\n\r\n  getResult(taskId: string): TaskResult<T> | undefined {\r\n    return this.results.get(taskId)\r\n  }\r\n\r\n  clear(): void {\r\n    this.queue = []\r\n    this.results.clear()\r\n    this.emitter.removeAllListeners()\r\n  }\r\n}\r\n\r\n/**\r\n * 性能优化器\r\n */\r\nexport class PerformanceOptimizer extends EventEmitter {\r\n  private options: Required<PerformanceOptimizerOptions>\r\n  private cache: LRUCache<string, any>\r\n  private taskQueue: TaskQueue\r\n  private workers: Worker[] = []\r\n  private metrics = {\r\n    cacheHits: 0,\r\n    cacheMisses: 0,\r\n    tasksCompleted: 0,\r\n    tasksFailed: 0,\r\n    totalDuration: 0\r\n  }\r\n\r\n  constructor(options: PerformanceOptimizerOptions = {}) {\r\n    super()\r\n\r\n    this.options = {\r\n      enableWorkers: false, // 默认不启用，因为需要额外配置\r\n      workerCount: Math.max(1, os.cpus().length - 1),\r\n      enableCache: true,\r\n      cacheSize: 100, // MB\r\n      enableCodeSplitting: true,\r\n      enableTreeShaking: true,\r\n      enableCompression: true,\r\n      maxParallelTasks: 4,\r\n      ...options\r\n    }\r\n\r\n    // 初始化缓存\r\n    const cacheSizeInItems = Math.floor((this.options.cacheSize * 1024 * 1024) / 10000) // 假设每项10KB\r\n    this.cache = new LRUCache(cacheSizeInItems)\r\n\r\n    // 初始化任务队列\r\n    this.taskQueue = new TaskQueue(this.options.maxParallelTasks)\r\n\r\n    // 初始化工作线程池（如果启用）\r\n    if (this.options.enableWorkers) {\r\n      this.initializeWorkerPool()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 初始化工作线程池\r\n   */\r\n  private initializeWorkerPool(): void {\r\n    // 这里仅作示例，实际使用需要创建worker文件\r\n    // for (let i = 0; i < this.options.workerCount; i++) {\r\n    //   const worker = new Worker('./worker.js')\r\n    //   this.workers.push(worker)\r\n    // }\r\n  }\r\n\r\n  /**\r\n   * 缓存函数结果\r\n   */\r\n  memoize<T extends (...args: any[]) => any>(\r\n    fn: T,\r\n    keyGenerator?: (...args: Parameters<T>) => string\r\n  ): T {\r\n    const self = this\r\n\r\n    return ((...args: Parameters<T>) => {\r\n      const key = keyGenerator ? keyGenerator(...args) : JSON.stringify(args)\r\n      \r\n      // 检查缓存\r\n      if (this.cache.has(key)) {\r\n        self.metrics.cacheHits++\r\n        self.emit('cacheHit', { key, hits: self.metrics.cacheHits })\r\n        return this.cache.get(key)\r\n      }\r\n\r\n      // 计算结果\r\n      self.metrics.cacheMisses++\r\n      const result = fn(...args)\r\n\r\n      // 处理Promise\r\n      if (result instanceof Promise) {\r\n        return result.then(value => {\r\n          self.cache.set(key, value)\r\n          return value\r\n        })\r\n      }\r\n\r\n      // 缓存结果\r\n      self.cache.set(key, result)\r\n      return result\r\n    }) as T\r\n  }\r\n\r\n  /**\r\n   * 并行执行任务\r\n   */\r\n  async parallel<T>(\r\n    tasks: Array<() => T | Promise<T>>,\r\n    options: { maxConcurrent?: number; timeout?: number } = {}\r\n  ): Promise<T[]> {\r\n    const { timeout = 30000 } = options\r\n\r\n    const taskPromises = tasks.map((fn, index) => {\r\n      const task: Task<T> = {\r\n        id: `parallel_${Date.now()}_${index}`,\r\n        fn,\r\n        args: [],\r\n        timeout\r\n      }\r\n\r\n      return this.taskQueue.add(task)\r\n    })\r\n\r\n    const results = await Promise.all(taskPromises)\r\n    \r\n    this.metrics.tasksCompleted += results.length\r\n    this.emit('parallelCompleted', {\r\n      count: results.length,\r\n      total: this.metrics.tasksCompleted\r\n    })\r\n\r\n    return results\r\n  }\r\n\r\n  /**\r\n   * 批处理任务\r\n   */\r\n  async batch<T, R>(\r\n    items: T[],\r\n    processor: (batch: T[]) => R | Promise<R>,\r\n    batchSize = 10\r\n  ): Promise<R[]> {\r\n    const batches: T[][] = []\r\n    \r\n    for (let i = 0; i < items.length; i += batchSize) {\r\n      batches.push(items.slice(i, i + batchSize))\r\n    }\r\n\r\n    const results = await this.parallel(\r\n      batches.map(batch => () => processor(batch))\r\n    )\r\n\r\n    return results\r\n  }\r\n\r\n  /**\r\n   * 节流函数\r\n   */\r\n  throttle<T extends (...args: any[]) => any>(\r\n    fn: T,\r\n    delay: number\r\n  ): (...args: Parameters<T>) => void {\r\n    let lastCall = 0\r\n    let timeout: NodeJS.Timeout | null = null\r\n\r\n    return (...args: Parameters<T>) => {\r\n      const now = Date.now()\r\n      const timeSinceLastCall = now - lastCall\r\n\r\n      if (timeSinceLastCall >= delay) {\r\n        lastCall = now\r\n        fn(...args)\r\n      } else if (!timeout) {\r\n        timeout = setTimeout(() => {\r\n          lastCall = Date.now()\r\n          fn(...args)\r\n          timeout = null\r\n        }, delay - timeSinceLastCall)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 防抖函数\r\n   */\r\n  debounce<T extends (...args: any[]) => any>(\r\n    fn: T,\r\n    delay: number\r\n  ): (...args: Parameters<T>) => void {\r\n    let timeout: NodeJS.Timeout | null = null\r\n\r\n    return (...args: Parameters<T>) => {\r\n      if (timeout) {\r\n        clearTimeout(timeout)\r\n      }\r\n\r\n      timeout = setTimeout(() => {\r\n        fn(...args)\r\n        timeout = null\r\n      }, delay)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 优化构建配置\r\n   */\r\n  optimizeBuildConfig(config: any): any {\r\n    const optimized = { ...config }\r\n\r\n    // 启用代码分割\r\n    if (this.options.enableCodeSplitting) {\r\n      optimized.output = {\r\n        ...optimized.output,\r\n        manualChunks: this.createManualChunks()\r\n      }\r\n    }\r\n\r\n    // 启用树摇\r\n    if (this.options.enableTreeShaking) {\r\n      optimized.treeshake = {\r\n        moduleSideEffects: false,\r\n        propertyReadSideEffects: false,\r\n        tryCatchDeoptimization: false\r\n      }\r\n    }\r\n\r\n    // 启用压缩\r\n    if (this.options.enableCompression) {\r\n      optimized.plugins = optimized.plugins || []\r\n      // 这里应该添加压缩插件，但避免重复添加\r\n    }\r\n\r\n    return optimized\r\n  }\r\n\r\n  /**\r\n   * 创建手动代码块配置\r\n   */\r\n  private createManualChunks(): (id: string) => string | undefined {\r\n    return (id: string) => {\r\n      // 将node_modules分离到vendor chunk\r\n      if (id.includes('node_modules')) {\r\n        // 大型库单独分块\r\n        if (id.includes('lodash')) return 'lodash'\r\n        if (id.includes('moment')) return 'moment'\r\n        if (id.includes('react')) return 'react'\r\n        if (id.includes('vue')) return 'vue'\r\n        \r\n        return 'vendor'\r\n      }\r\n\r\n      // 工具函数分离\r\n      if (id.includes('utils/') || id.includes('helpers/')) {\r\n        return 'utils'\r\n      }\r\n\r\n      return undefined\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取性能指标\r\n   */\r\n  getMetrics(): typeof this.metrics & { cacheSize: number } {\r\n    return {\r\n      ...this.metrics,\r\n      cacheSize: this.cache.size()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 重置优化器\r\n   */\r\n  reset(): void {\r\n    this.cache.clear()\r\n    this.taskQueue.clear()\r\n    this.metrics = {\r\n      cacheHits: 0,\r\n      cacheMisses: 0,\r\n      tasksCompleted: 0,\r\n      tasksFailed: 0,\r\n      totalDuration: 0\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 销毁优化器\r\n   */\r\n  async destroy(): Promise<void> {\r\n    // 终止工作线程\r\n    for (const worker of this.workers) {\r\n      await worker.terminate()\r\n    }\r\n    this.workers = []\r\n\r\n    // 清理资源\r\n    this.reset()\r\n    this.removeAllListeners()\r\n  }\r\n}\r\n\r\n/**\r\n * 创建全局性能优化器实例\r\n */\r\nlet globalOptimizer: PerformanceOptimizer | null = null\r\n\r\nexport function getGlobalOptimizer(): PerformanceOptimizer {\r\n  if (!globalOptimizer) {\r\n    globalOptimizer = new PerformanceOptimizer({\r\n      enableCache: true,\r\n      cacheSize: 100,\r\n      maxParallelTasks: os.cpus().length,\r\n      enableCodeSplitting: true,\r\n      enableTreeShaking: true,\r\n      enableCompression: true\r\n    })\r\n  }\r\n  return globalOptimizer\r\n}\r\n\r\n/**\r\n * 性能测量装饰器\r\n */\r\nexport function measure(target: any, propertyKey: string, descriptor: PropertyDescriptor) {\r\n  const originalMethod = descriptor.value\r\n\r\n  descriptor.value = async function(this: any, ...args: any[]) {\r\n    const startTime = performance.now()\r\n    const startMem = process.memoryUsage()\r\n\r\n    try {\r\n      const result = await originalMethod.apply(this, args)\r\n      \r\n      const duration = performance.now() - startTime\r\n      const memDiff = process.memoryUsage().heapUsed - startMem.heapUsed\r\n\r\n      console.log(`[Performance] ${target.constructor.name}.${propertyKey}:`)\r\n      console.log(`  Duration: ${duration.toFixed(2)}ms`)\r\n      console.log(`  Memory: ${(memDiff / 1024 / 1024).toFixed(2)}MB`)\r\n\r\n      return result\r\n    } catch (error) {\r\n      const duration = performance.now() - startTime\r\n      console.error(`[Performance] ${target.constructor.name}.${propertyKey} failed after ${duration.toFixed(2)}ms`)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  return descriptor\r\n}"]}