{"version":3,"file":"code-quality-analyzer.js","sourceRoot":"","sources":["../../src/utils/code-quality-analyzer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * 代码质量分析器\n * \n * 提供深度的代码质量分析功能\n * \n * @author LDesign Team\n * @version 1.0.0\n */\n\nimport * as fs from 'node:fs'\nimport { Logger } from './logger'\n\n/**\n * 代码质量问题\n */\nexport interface QualityIssue {\n  type: 'error' | 'warning' | 'info'\n  category: 'performance' | 'security' | 'maintainability' | 'reliability' | 'style'\n  file: string\n  line?: number\n  column?: number\n  message: string\n  rule: string\n  severity: number // 1-10\n  suggestion?: string\n}\n\n/**\n * 代码质量指标\n */\nexport interface QualityMetrics {\n  complexity: {\n    cyclomatic: number\n    cognitive: number\n    halstead: {\n      vocabulary: number\n      length: number\n      difficulty: number\n      effort: number\n    }\n  }\n  maintainability: {\n    index: number\n    techDebt: number // 技术债务（分钟）\n    duplications: number\n  }\n  reliability: {\n    bugProneness: number\n    testCoverage?: number\n  }\n  security: {\n    vulnerabilities: number\n    hotspots: number\n  }\n  size: {\n    lines: number\n    statements: number\n    functions: number\n    classes: number\n    files: number\n  }\n}\n\n/**\n * 分析结果\n */\nexport interface QualityAnalysisResult {\n  issues: QualityIssue[]\n  metrics: QualityMetrics\n  score: number // 总体质量分数 0-100\n  grade: 'A' | 'B' | 'C' | 'D' | 'E' | 'F'\n  recommendations: string[]\n}\n\n/**\n * 代码质量分析器\n */\nexport class CodeQualityAnalyzer {\n  private logger: Logger\n\n  constructor(logger?: Logger) {\n    this.logger = logger || new Logger()\n  }\n\n  /**\n   * 分析代码质量\n   */\n  async analyze(filePaths: string[]): Promise<QualityAnalysisResult> {\n    this.logger.info(`开始分析 ${filePaths.length} 个文件的代码质量...`)\n\n    const issues: QualityIssue[] = []\n    const metrics: QualityMetrics = {\n      complexity: {\n        cyclomatic: 0,\n        cognitive: 0,\n        halstead: {\n          vocabulary: 0,\n          length: 0,\n          difficulty: 0,\n          effort: 0\n        }\n      },\n      maintainability: {\n        index: 100,\n        techDebt: 0,\n        duplications: 0\n      },\n      reliability: {\n        bugProneness: 0\n      },\n      security: {\n        vulnerabilities: 0,\n        hotspots: 0\n      },\n      size: {\n        lines: 0,\n        statements: 0,\n        functions: 0,\n        classes: 0,\n        files: filePaths.length\n      }\n    }\n\n    // 分析每个文件\n    for (const filePath of filePaths) {\n      if (fs.existsSync(filePath)) {\n        const fileIssues = await this.analyzeFile(filePath)\n        issues.push(...fileIssues)\n        \n        // 更新指标\n        await this.updateMetrics(filePath, metrics)\n      }\n    }\n\n    // 计算总体分数和等级\n    const score = this.calculateScore(issues, metrics)\n    const grade = this.calculateGrade(score)\n    const recommendations = this.generateRecommendations(issues, metrics)\n\n    this.logger.info(`代码质量分析完成，总分: ${score}/100 (${grade})`)\n\n    return {\n      issues,\n      metrics,\n      score,\n      grade,\n      recommendations\n    }\n  }\n\n  /**\n   * 分析单个文件\n   */\n  private async analyzeFile(filePath: string): Promise<QualityIssue[]> {\n    const issues: QualityIssue[] = []\n    const content = fs.readFileSync(filePath, 'utf-8')\n    const lines = content.split('\\n')\n\n    // 性能问题检查\n    issues.push(...this.checkPerformanceIssues(filePath, content, lines))\n    \n    // 安全问题检查\n    issues.push(...this.checkSecurityIssues(filePath, content, lines))\n    \n    // 可维护性问题检查\n    issues.push(...this.checkMaintainabilityIssues(filePath, content, lines))\n    \n    // 可靠性问题检查\n    issues.push(...this.checkReliabilityIssues(filePath, content, lines))\n\n    return issues\n  }\n\n  /**\n   * 检查性能问题\n   */\n  private checkPerformanceIssues(filePath: string, content: string, lines: string[]): QualityIssue[] {\n    const issues: QualityIssue[] = []\n\n    // 检查同步文件操作\n    const syncFsPattern = /fs\\.(readFileSync|writeFileSync|existsSync|statSync)/g\n    let match\n    while ((match = syncFsPattern.exec(content)) !== null) {\n      const lineNumber = content.substring(0, match.index).split('\\n').length\n      issues.push({\n        type: 'warning',\n        category: 'performance',\n        file: filePath,\n        line: lineNumber,\n        message: `使用同步文件操作 ${match[1]}，可能阻塞事件循环`,\n        rule: 'no-sync-fs',\n        severity: 6,\n        suggestion: `考虑使用异步版本 ${match[1].replace('Sync', '')}`\n      })\n    }\n\n    // 检查大循环\n    lines.forEach((line, index) => {\n      if (/for\\s*\\([^)]*;\\s*\\w+\\s*<\\s*\\d{4,}/.test(line)) {\n        issues.push({\n          type: 'warning',\n          category: 'performance',\n          file: filePath,\n          line: index + 1,\n          message: '检测到大循环，可能影响性能',\n          rule: 'large-loop',\n          severity: 5,\n          suggestion: '考虑使用批处理或异步处理'\n        })\n      }\n    })\n\n    return issues\n  }\n\n  /**\n   * 检查安全问题\n   */\n  private checkSecurityIssues(filePath: string, content: string, _lines: string[]): QualityIssue[] {\n    const issues: QualityIssue[] = []\n\n    const securityPatterns = [\n      { pattern: /eval\\s*\\(/g, message: '使用 eval() 存在安全风险', severity: 9 },\n      { pattern: /Function\\s*\\(/g, message: '使用 Function 构造函数存在安全风险', severity: 8 },\n      { pattern: /innerHTML\\s*=/g, message: '使用 innerHTML 可能导致 XSS', severity: 7 },\n      { pattern: /document\\.write/g, message: '使用 document.write 存在安全风险', severity: 6 },\n      { pattern: /process\\.env\\.\\w+/g, message: '直接访问环境变量，注意敏感信息泄露', severity: 4 }\n    ]\n\n    securityPatterns.forEach(({ pattern, message, severity }) => {\n      let match\n      while ((match = pattern.exec(content)) !== null) {\n        const lineNumber = content.substring(0, match.index).split('\\n').length\n        issues.push({\n          type: severity >= 7 ? 'error' : 'warning',\n          category: 'security',\n          file: filePath,\n          line: lineNumber,\n          message,\n          rule: 'security-check',\n          severity\n        })\n      }\n    })\n\n    return issues\n  }\n\n  /**\n   * 检查可维护性问题\n   */\n  private checkMaintainabilityIssues(filePath: string, content: string, lines: string[]): QualityIssue[] {\n    const issues: QualityIssue[] = []\n\n    // 检查函数长度\n    const functionMatches = content.match(/function\\s+\\w+[^{]*\\{[^}]*\\}/g) || []\n    functionMatches.forEach(func => {\n      const funcLines = func.split('\\n').length\n      if (funcLines > 50) {\n        issues.push({\n          type: 'warning',\n          category: 'maintainability',\n          file: filePath,\n          message: `函数过长 (${funcLines} 行)，建议拆分`,\n          rule: 'max-function-length',\n          severity: 5,\n          suggestion: '将大函数拆分为多个小函数'\n        })\n      }\n    })\n\n    // 检查重复代码\n    const duplicateThreshold = 5\n    const lineGroups = new Map<string, number[]>()\n    \n    lines.forEach((line, index) => {\n      const trimmed = line.trim()\n      if (trimmed.length > 10 && !trimmed.startsWith('//') && !trimmed.startsWith('*')) {\n        if (!lineGroups.has(trimmed)) {\n          lineGroups.set(trimmed, [])\n        }\n        lineGroups.get(trimmed)!.push(index + 1)\n      }\n    })\n\n    lineGroups.forEach((lineNumbers, line) => {\n      if (lineNumbers.length >= duplicateThreshold) {\n        issues.push({\n          type: 'info',\n          category: 'maintainability',\n          file: filePath,\n          message: `发现重复代码: \"${line.substring(0, 50)}...\" (${lineNumbers.length} 次)`,\n          rule: 'no-duplicate-code',\n          severity: 3,\n          suggestion: '考虑提取为函数或常量'\n        })\n      }\n    })\n\n    return issues\n  }\n\n  /**\n   * 检查可靠性问题\n   */\n  private checkReliabilityIssues(filePath: string, content: string, lines: string[]): QualityIssue[] {\n    const issues: QualityIssue[] = []\n\n    // 检查未处理的 Promise\n    const unhandledPromisePattern = /(?:await\\s+)?(?:fetch|axios|request)\\([^)]*\\)(?!\\s*\\.catch)/g\n    let match\n    while ((match = unhandledPromisePattern.exec(content)) !== null) {\n      const lineNumber = content.substring(0, match.index).split('\\n').length\n      issues.push({\n        type: 'warning',\n        category: 'reliability',\n        file: filePath,\n        line: lineNumber,\n        message: '异步操作缺少错误处理',\n        rule: 'handle-async-errors',\n        severity: 6,\n        suggestion: '添加 .catch() 或 try-catch 处理错误'\n      })\n    }\n\n    // 检查空的 catch 块\n    lines.forEach((line, index) => {\n      if (/catch\\s*\\([^)]*\\)\\s*\\{\\s*\\}/.test(line)) {\n        issues.push({\n          type: 'warning',\n          category: 'reliability',\n          file: filePath,\n          line: index + 1,\n          message: '空的 catch 块，错误被静默忽略',\n          rule: 'no-empty-catch',\n          severity: 7,\n          suggestion: '添加适当的错误处理逻辑'\n        })\n      }\n    })\n\n    return issues\n  }\n\n  /**\n   * 更新指标\n   */\n  private async updateMetrics(filePath: string, metrics: QualityMetrics): Promise<void> {\n    const content = fs.readFileSync(filePath, 'utf-8')\n    const lines = content.split('\\n')\n\n    // 更新大小指标\n    metrics.size.lines += lines.length\n    metrics.size.statements += (content.match(/;/g) || []).length\n    metrics.size.functions += (content.match(/function\\s+\\w+/g) || []).length\n    metrics.size.classes += (content.match(/class\\s+\\w+/g) || []).length\n\n    // 简单的复杂度计算\n    const cyclomaticComplexity = this.calculateCyclomaticComplexity(content)\n    metrics.complexity.cyclomatic += cyclomaticComplexity\n  }\n\n  /**\n   * 计算圈复杂度\n   */\n  private calculateCyclomaticComplexity(content: string): number {\n    const patterns = [\n      /if\\s*\\(/g,\n      /else\\s+if\\s*\\(/g,\n      /while\\s*\\(/g,\n      /for\\s*\\(/g,\n      /switch\\s*\\(/g,\n      /case\\s+/g,\n      /catch\\s*\\(/g,\n      /&&/g,\n      /\\|\\|/g\n    ]\n\n    let complexity = 1 // 基础复杂度\n    patterns.forEach(pattern => {\n      const matches = content.match(pattern)\n      if (matches) {\n        complexity += matches.length\n      }\n    })\n\n    return complexity\n  }\n\n  /**\n   * 计算总体分数\n   */\n  private calculateScore(issues: QualityIssue[], metrics: QualityMetrics): number {\n    let score = 100\n\n    // 根据问题严重程度扣分\n    issues.forEach(issue => {\n      score -= issue.severity\n    })\n\n    // 根据复杂度扣分\n    if (metrics.complexity.cyclomatic > 10) {\n      score -= (metrics.complexity.cyclomatic - 10) * 2\n    }\n\n    return Math.max(0, Math.min(100, score))\n  }\n\n  /**\n   * 计算等级\n   */\n  private calculateGrade(score: number): 'A' | 'B' | 'C' | 'D' | 'E' | 'F' {\n    if (score >= 90) return 'A'\n    if (score >= 80) return 'B'\n    if (score >= 70) return 'C'\n    if (score >= 60) return 'D'\n    if (score >= 50) return 'E'\n    return 'F'\n  }\n\n  /**\n   * 生成建议\n   */\n  private generateRecommendations(issues: QualityIssue[], metrics: QualityMetrics): string[] {\n    const recommendations: string[] = []\n\n    // 基于问题类型的建议\n    const issuesByCategory = issues.reduce((acc, issue) => {\n      if (!acc[issue.category]) acc[issue.category] = []\n      acc[issue.category].push(issue)\n      return acc\n    }, {} as Record<string, QualityIssue[]>)\n\n    if (issuesByCategory.performance?.length > 0) {\n      recommendations.push('优化性能问题，特别是异步操作和大循环')\n    }\n\n    if (issuesByCategory.security?.length > 0) {\n      recommendations.push('修复安全漏洞，避免使用危险的函数和方法')\n    }\n\n    if (issuesByCategory.maintainability?.length > 0) {\n      recommendations.push('改善代码可维护性，减少重复代码和函数长度')\n    }\n\n    if (metrics.complexity.cyclomatic > 15) {\n      recommendations.push('降低代码复杂度，考虑重构复杂的函数')\n    }\n\n    if (recommendations.length === 0) {\n      recommendations.push('代码质量良好，继续保持！')\n    }\n\n    return recommendations\n  }\n}\n"]}