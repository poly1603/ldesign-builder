{"version":3,"file":"error-handler.js","sourceRoot":"","sources":["../../src/utils/error-handler.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * 错误处理工具\n * \n * TODO: 后期可以移到 @ldesign/kit 中统一管理\n */\n\nimport { ErrorCode, ERROR_MESSAGES, ERROR_SUGGESTIONS } from '../constants/errors'\nimport type { Logger } from './logger'\n\n/**\n * 构建器错误类\n */\nexport class BuilderError extends Error {\n  public readonly code: ErrorCode\n  public readonly suggestion?: string\n  public readonly details?: any\n  public readonly phase?: string\n  public readonly file?: string\n  public readonly cause?: Error\n\n  constructor(\n    code: ErrorCode,\n    message?: string,\n    options: {\n      suggestion?: string\n      details?: any\n      phase?: string\n      file?: string\n      cause?: Error\n    } = {}\n  ) {\n    const errorMessage = message || ERROR_MESSAGES[code] || '未知错误'\n    super(errorMessage)\n\n    this.name = 'BuilderError'\n    this.code = code\n    this.suggestion = options.suggestion || ERROR_SUGGESTIONS[code]\n    this.details = options.details\n    this.phase = options.phase\n    this.file = options.file\n\n    if (options.cause) {\n      this.cause = options.cause\n    }\n\n    // 保持堆栈跟踪\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, BuilderError)\n    }\n  }\n\n  /**\n   * 获取完整的错误信息\n   */\n  getFullMessage(): string {\n    let message = `[${this.code}] ${this.message}`\n\n    if (this.phase) {\n      message += ` (阶段: ${this.phase})`\n    }\n\n    if (this.file) {\n      message += ` (文件: ${this.file})`\n    }\n\n    if (this.suggestion) {\n      message += `\\n建议: ${this.suggestion}`\n    }\n\n    return message\n  }\n\n  /**\n   * 转换为 JSON 格式\n   */\n  toJSON(): Record<string, any> {\n    return {\n      name: this.name,\n      code: this.code,\n      message: this.message,\n      suggestion: this.suggestion,\n      details: this.details,\n      phase: this.phase,\n      file: this.file,\n      stack: this.stack\n    }\n  }\n}\n\n/**\n * 错误处理器选项\n */\nexport interface ErrorHandlerOptions {\n  /** 日志记录器 */\n  logger?: Logger\n\n  /** 是否显示堆栈跟踪 */\n  showStack?: boolean\n\n  /** 是否显示建议 */\n  showSuggestions?: boolean\n\n  /** 错误回调 */\n  onError?: (error: Error) => void\n\n  /** 是否退出进程 */\n  exitOnError?: boolean\n\n  /** 退出码 */\n  exitCode?: number\n}\n\n/**\n * 错误处理器类\n */\nexport class ErrorHandler {\n  private logger?: Logger\n  private showStack: boolean\n  private showSuggestions: boolean\n  private onError?: (error: Error) => void\n  private exitOnError: boolean\n  private exitCode: number\n\n  constructor(options: ErrorHandlerOptions = {}) {\n    this.logger = options.logger\n    this.showStack = options.showStack ?? false\n    this.showSuggestions = options.showSuggestions ?? true\n    this.onError = options.onError\n    this.exitOnError = options.exitOnError ?? false\n    this.exitCode = options.exitCode ?? 1\n  }\n\n  /**\n   * 处理错误\n   */\n  handle(error: Error, context?: string): void {\n    // 调用错误回调\n    if (this.onError) {\n      try {\n        this.onError(error)\n      } catch (callbackError) {\n        this.logger?.error('错误回调执行失败:', callbackError)\n      }\n    }\n\n    // 记录错误日志\n    this.logError(error, context)\n\n    // 是否退出进程\n    if (this.exitOnError) {\n      process.exit(this.exitCode)\n    }\n  }\n\n  /**\n   * 处理异步错误 - 优化性能，避免不必要的Promise包装\n   */\n  async handleAsync(error: Error, context?: string): Promise<void> {\n    // 直接调用同步处理方法，避免Promise包装开销\n    this.handle(error, context)\n  }\n\n  /**\n   * 批量处理错误\n   */\n  handleBatch(errors: Array<{ error: Error; context?: string }>): void {\n    if (errors.length === 0) return\n\n    this.logger?.info(`批量处理 ${errors.length} 个错误`)\n\n    for (const { error, context } of errors) {\n      try {\n        this.handle(error, context)\n      } catch (handlerError) {\n        // 防止错误处理器本身出错导致的无限循环\n        console.error('错误处理器执行失败:', handlerError)\n      }\n    }\n  }\n\n  /**\n   * 错误恢复机制\n   */\n  async recover<T>(\n    fn: () => T | Promise<T>,\n    fallback?: T | (() => T | Promise<T>),\n    maxRetries = 3\n  ): Promise<T> {\n    let lastError: Error | null = null\n    \n    for (let i = 0; i <= maxRetries; i++) {\n      try {\n        return await Promise.resolve(fn())\n      } catch (error) {\n        lastError = error instanceof Error ? error : new Error(String(error))\n        \n        this.logger?.warn(`Attempt ${i + 1} failed:`, lastError.message)\n        \n        if (i === maxRetries) {\n          break\n        }\n        \n        // 指数退避\n        const delay = Math.min(1000 * Math.pow(2, i), 10000)\n        await new Promise(resolve => setTimeout(resolve, delay))\n      }\n    }\n    \n    // 尝试使用降级方案\n    if (fallback !== undefined) {\n      try {\n        return typeof fallback === 'function' ? await (fallback as () => T | Promise<T>)() : fallback\n      } catch (fallbackError) {\n        this.logger?.error('Fallback also failed:', fallbackError)\n      }\n    }\n    \n    throw lastError\n  }\n\n  /**\n   * 包装函数以处理错误\n   */\n  wrap<TArgs extends readonly unknown[], TReturn>(\n    fn: (...args: TArgs) => TReturn,\n    context?: string\n  ): (...args: TArgs) => TReturn {\n    return ((...args: TArgs) => {\n      try {\n        const result = fn(...args)\n\n        // 处理 Promise\n        if (result && typeof result === 'object' && 'catch' in result && typeof result.catch === 'function') {\n          return (result as unknown as Promise<unknown>).catch((error: unknown) => {\n            const err = error instanceof Error ? error : new Error(String(error))\n            this.handle(err, context)\n            throw err\n          }) as TReturn\n        }\n\n        return result\n      } catch (error) {\n        const err = error instanceof Error ? error : new Error(String(error))\n        this.handle(err, context)\n        throw err\n      }\n    })\n  }\n\n  /**\n   * 包装异步函数以处理错误\n   */\n  wrapAsync<TArgs extends readonly unknown[], TReturn>(\n    fn: (...args: TArgs) => Promise<TReturn>,\n    context?: string\n  ): (...args: TArgs) => Promise<TReturn> {\n    return async (...args: TArgs) => {\n      try {\n        return await fn(...args)\n      } catch (error) {\n        const err = error instanceof Error ? error : new Error(String(error))\n        await this.handleAsync(err, context)\n        throw err\n      }\n    }\n  }\n\n  /**\n   * 创建构建器错误\n   */\n  createError(\n    code: ErrorCode,\n    message?: string,\n    options?: {\n      suggestion?: string\n      details?: any\n      phase?: string\n      file?: string\n      cause?: Error\n    }\n  ): BuilderError {\n    return new BuilderError(code, message, options)\n  }\n\n  /**\n   * 抛出构建器错误\n   */\n  throwError(\n    code: ErrorCode,\n    message?: string,\n    options?: {\n      suggestion?: string\n      details?: any\n      phase?: string\n      file?: string\n      cause?: Error\n    }\n  ): never {\n    throw this.createError(code, message, options)\n  }\n\n  /**\n   * 格式化错误信息\n   */\n  formatError(error: Error, includeStack?: boolean): string {\n    const showStack = includeStack ?? this.showStack\n\n    if (isBuilderError(error)) {\n      return error.getFullMessage()\n    }\n\n    let message = error.message\n    if (showStack && error.stack) {\n      message += `\\n${error.stack}`\n    }\n\n    return message\n  }\n\n  /**\n   * 获取错误建议\n   */\n  getSuggestions(error: Error): string[] {\n    if (isBuilderError(error) && error.suggestion) {\n      return [error.suggestion]\n    }\n\n    // 根据错误类型提供通用建议\n    const suggestions: string[] = []\n\n    if (error.message.includes('ENOENT')) {\n      suggestions.push('检查文件或目录是否存在')\n    }\n\n    if (error.message.includes('EACCES')) {\n      suggestions.push('检查文件权限')\n    }\n\n    if (error.message.includes('MODULE_NOT_FOUND')) {\n      suggestions.push('运行 npm install 安装依赖')\n    }\n\n    return suggestions\n  }\n\n  /**\n   * 记录错误日志\n   */\n  private logError(error: Error, context?: string): void {\n    if (!this.logger) {\n      console.error(error)\n      return\n    }\n\n    // 构建错误消息\n    let message = error.message\n    if (context) {\n      message = `${context}: ${message}`\n    }\n\n    // 记录基本错误信息\n    this.logger.error(message)\n\n    // 如果是构建器错误，显示额外信息\n    if (error instanceof BuilderError) {\n      if (error.phase) {\n        this.logger.error(`阶段: ${error.phase}`)\n      }\n\n      if (error.file) {\n        this.logger.error(`文件: ${error.file}`)\n      }\n\n      if (error.details) {\n        this.logger.debug('错误详情:', error.details)\n      }\n\n      if (this.showSuggestions && error.suggestion) {\n        this.logger.info(`建议: ${error.suggestion}`)\n      }\n    }\n\n    // 显示堆栈跟踪\n    if (this.showStack && error.stack) {\n      this.logger.debug('堆栈跟踪:')\n      this.logger.debug(error.stack)\n    }\n\n    // 显示原因链\n    if ((error as any).cause) {\n      this.logger.debug('原因:')\n      this.logError((error as any).cause as Error)\n    }\n  }\n}\n\n/**\n * 默认错误处理器实例\n */\nexport const errorHandler = new ErrorHandler()\n\n/**\n * 创建错误处理器\n */\nexport function createErrorHandler(options: ErrorHandlerOptions = {}): ErrorHandler {\n  return new ErrorHandler(options)\n}\n\n/**\n * 处理未捕获的异常\n */\nexport function setupGlobalErrorHandling(handler: ErrorHandler = errorHandler): void {\n  // 处理未捕获的异常\n  process.on('uncaughtException', (error) => {\n    handler.handle(error, '未捕获的异常')\n    process.exit(1)\n  })\n\n  // 处理未处理的 Promise 拒绝\n  process.on('unhandledRejection', (reason, _promise) => {\n    const error = reason instanceof Error ? reason : new Error(String(reason))\n    handler.handle(error, '未处理的 Promise 拒绝')\n  })\n\n  // 处理警告\n  process.on('warning', (warning) => {\n    if (handler['logger']) {\n      handler['logger'].warn(`Node.js 警告: ${warning.message}`)\n    }\n  })\n}\n\n/**\n * 判断是否为构建器错误\n */\nexport function isBuilderError(error: any): error is BuilderError {\n  return error instanceof BuilderError\n}\n\n/**\n * 从错误中提取错误码\n */\nexport function getErrorCode(error: Error): ErrorCode | undefined {\n  if (isBuilderError(error)) {\n    return error.code\n  }\n  return undefined\n}\n\n/**\n * 格式化错误信息\n */\nexport function formatError(error: Error, includeStack: boolean = false): string {\n  if (isBuilderError(error)) {\n    return error.getFullMessage()\n  }\n\n  let message = error.message\n  if (includeStack && error.stack) {\n    message += `\\n${error.stack}`\n  }\n\n  return message\n}\n"]}