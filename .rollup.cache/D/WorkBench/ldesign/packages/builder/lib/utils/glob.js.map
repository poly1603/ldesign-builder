{"version":3,"file":"glob.js","sourceRoot":"","sources":["../../src/utils/glob.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * 通配符解析工具函数\r\n * \r\n * 提供文件路径模式匹配和解析功能\r\n */\r\n\r\nimport { glob } from 'glob'\r\nimport path from 'path'\r\n\r\n/**\r\n * 解析输入模式\r\n * \r\n * 将通配符模式转换为实际的文件路径列表\r\n * \r\n * @param input - 输入模式（支持字符串、数组、对象）\r\n * @param rootDir - 根目录\r\n * @returns 解析后的文件路径\r\n */\r\nexport async function resolveInputPatterns(\r\n  input: string | string[] | Record<string, string>,\r\n  rootDir: string = process.cwd()\r\n): Promise<string | string[] | Record<string, string>> {\r\n  // 如果是对象（多入口），递归处理每个值\r\n  if (typeof input === 'object' && !Array.isArray(input)) {\r\n    const resolved: Record<string, string> = {}\r\n    for (const [key, pattern] of Object.entries(input)) {\r\n      const result = await resolveSinglePattern(pattern, rootDir)\r\n      if (Array.isArray(result) && result.length === 1) {\r\n        resolved[key] = result[0]\r\n      } else if (typeof result === 'string') {\r\n        resolved[key] = result\r\n      } else {\r\n        throw new Error(`多入口配置的值必须解析为单个文件: ${key}`)\r\n      }\r\n    }\r\n    return resolved\r\n  }\r\n\r\n  // 如果是数组，处理每个模式\r\n  if (Array.isArray(input)) {\r\n    const allFiles: string[] = []\r\n    const excludePatterns: string[] = []\r\n    const includePatterns: string[] = []\r\n\r\n    // 分离包含和排除模式\r\n    for (const pattern of input) {\r\n      if (typeof pattern === 'string' && pattern.startsWith('!')) {\r\n        excludePatterns.push(pattern.slice(1))\r\n      } else {\r\n        includePatterns.push(pattern)\r\n      }\r\n    }\r\n\r\n    // 解析包含模式\r\n    for (const pattern of includePatterns) {\r\n      const files = await resolveSinglePattern(pattern, rootDir)\r\n      if (Array.isArray(files)) {\r\n        allFiles.push(...files)\r\n      } else {\r\n        allFiles.push(files)\r\n      }\r\n    }\r\n\r\n    // 应用排除模式 - 优化性能\r\n    if (excludePatterns.length > 0) {\r\n      const excludedFiles = new Set<string>()\r\n\r\n      // 并行处理排除模式以提高性能\r\n      const excludePromises = excludePatterns.map(async (pattern) => {\r\n        const files = await resolveSinglePattern(pattern, rootDir)\r\n        const fileArray = Array.isArray(files) ? files : [files]\r\n        return fileArray\r\n      })\r\n\r\n      const excludeResults = await Promise.all(excludePromises)\r\n      excludeResults.flat().forEach(f => excludedFiles.add(f))\r\n\r\n      return allFiles.filter(f => !excludedFiles.has(f))\r\n    }\r\n\r\n    // 去重并排序 - 使用更高效的去重方式\r\n    const uniqueFiles = new Set(allFiles)\r\n    return Array.from(uniqueFiles).sort()\r\n  }\r\n\r\n  // 单个字符串模式\r\n  return resolveSinglePattern(input, rootDir)\r\n}\r\n\r\n/**\r\n * 解析单个模式\r\n * \r\n * @param pattern - 文件模式\r\n * @param rootDir - 根目录\r\n * @returns 解析后的文件路径\r\n */\r\nasync function resolveSinglePattern(\r\n  pattern: string,\r\n  rootDir: string\r\n): Promise<string | string[]> {\r\n  // 如果不包含通配符，直接返回\r\n  if (!containsGlobPattern(pattern)) {\r\n    return path.resolve(rootDir, pattern)\r\n  }\r\n\r\n  // 使用 glob 解析通配符\r\n  const files = await glob(pattern, {\r\n    cwd: rootDir,\r\n    absolute: true,\r\n    ignore: ['**/node_modules/**', '**/.git/**'],\r\n  })\r\n\r\n  // 如果没有匹配到文件：\r\n  // - 这是通配符模式时，表示没有该类文件，返回空列表以避免将模式当作物理文件传给打包器\r\n  // - 非通配符模式的情况在上方已提前返回，这里只处理通配符\r\n  if (files.length === 0) {\r\n    return []\r\n  }\r\n\r\n  // 如果只有一个文件，返回字符串\r\n  if (files.length === 1) {\r\n    return files[0]\r\n  }\r\n\r\n  // 多个文件返回数组\r\n  return files.sort()\r\n}\r\n\r\n/**\r\n * 检查字符串是否包含通配符模式\r\n * \r\n * @param pattern - 要检查的模式\r\n * @returns 是否包含通配符\r\n */\r\nfunction containsGlobPattern(pattern: string): boolean {\r\n  return /[*?[\\]{}]/.test(pattern)\r\n}\r\n\r\n/**\r\n * 规范化入口配置\r\n *\r\n * 将各种输入格式标准化为 Rollup/Rolldown 可接受的格式\r\n *\r\n * @param input - 原始输入配置\r\n * @param rootDir - 根目录\r\n * @param exclude - 排除模式数组\r\n * @returns 规范化后的输入配置\r\n */\r\nexport async function normalizeInput(\r\n  input: string | string[] | Record<string, string> | undefined,\r\n  rootDir: string = process.cwd(),\r\n  exclude?: string[]\r\n): Promise<string | string[] | Record<string, string>> {\r\n  if (!input) {\r\n    // 默认入口\r\n    return path.resolve(rootDir, 'src/index.ts')\r\n  }\r\n\r\n  let resolved = await resolveInputPatterns(input, rootDir)\r\n\r\n  // 应用 exclude 过滤\r\n  if (exclude && exclude.length > 0) {\r\n    resolved = await applyExcludeFilter(resolved, exclude, rootDir)\r\n  }\r\n\r\n  // 对于数组输入，如果为空则抛出错误\r\n  if (Array.isArray(resolved) && resolved.length === 0) {\r\n    throw new Error('未找到匹配的输入文件')\r\n  }\r\n\r\n  return resolved\r\n}\r\n\r\n/**\r\n * 应用排除过滤器\r\n *\r\n * 从解析后的输入中排除匹配的文件\r\n *\r\n * @param resolved - 已解析的输入配置\r\n * @param exclude - 排除模式数组\r\n * @param rootDir - 根目录\r\n * @returns 过滤后的输入配置\r\n */\r\nasync function applyExcludeFilter(\r\n  resolved: string | string[] | Record<string, string>,\r\n  exclude: string[],\r\n  rootDir: string\r\n): Promise<string | string[] | Record<string, string>> {\r\n  // 如果是字符串，检查是否匹配排除模式\r\n  if (typeof resolved === 'string') {\r\n    const isExcluded = await isFileExcluded(resolved, exclude, rootDir)\r\n    if (isExcluded) {\r\n      throw new Error(`入口文件被排除: ${resolved}`)\r\n    }\r\n    return resolved\r\n  }\r\n\r\n  // 如果是数组，过滤掉匹配的文件\r\n  if (Array.isArray(resolved)) {\r\n    const filtered: string[] = []\r\n    for (const file of resolved) {\r\n      const isExcluded = await isFileExcluded(file, exclude, rootDir)\r\n      if (!isExcluded) {\r\n        filtered.push(file)\r\n      }\r\n    }\r\n    return filtered\r\n  }\r\n\r\n  // 如果是对象，过滤每个值\r\n  if (typeof resolved === 'object' && resolved !== null) {\r\n    const filtered: Record<string, string> = {}\r\n    for (const [key, file] of Object.entries(resolved)) {\r\n      const isExcluded = await isFileExcluded(file, exclude, rootDir)\r\n      if (!isExcluded) {\r\n        filtered[key] = file\r\n      }\r\n    }\r\n    return filtered\r\n  }\r\n\r\n  return resolved\r\n}\r\n\r\n/**\r\n * 检查文件是否被排除\r\n *\r\n * @param filePath - 文件路径\r\n * @param exclude - 排除模式数组\r\n * @param rootDir - 根目录\r\n * @returns 是否被排除\r\n */\r\nasync function isFileExcluded(\r\n  filePath: string,\r\n  exclude: string[],\r\n  rootDir: string\r\n): Promise<boolean> {\r\n  // 将绝对路径转换为相对路径进行匹配\r\n  const relativePath = path.relative(rootDir, filePath)\r\n\r\n  for (const pattern of exclude) {\r\n    // 使用 glob 进行模式匹配\r\n    const matches = await glob(pattern, {\r\n      cwd: rootDir,\r\n      absolute: false,\r\n    })\r\n\r\n    // 检查文件是否在匹配列表中\r\n    if (matches.includes(relativePath) || matches.includes(filePath)) {\r\n      return true\r\n    }\r\n\r\n    // 也检查简单的字符串匹配\r\n    if (relativePath.includes(pattern) || filePath.includes(pattern)) {\r\n      return true\r\n    }\r\n  }\r\n\r\n  return false\r\n}\r\n\r\n/**\r\n * 获取输出目录列表\r\n * \r\n * 从配置中提取所有的输出目录\r\n * \r\n * @param config - 构建配置\r\n * @returns 输出目录列表\r\n */\r\nexport function getOutputDirs(config: any): string[] {\r\n  const dirs: string[] = []\r\n\r\n  // 主输出目录\r\n  if (config.output?.dir) {\r\n    dirs.push(config.output.dir)\r\n  }\r\n\r\n  // 各格式的输出目录，支持 boolean 简化配置\r\n  if (config.output?.esm) {\r\n    const esmDir = typeof config.output.esm === 'object' && config.output.esm.dir\r\n      ? config.output.esm.dir\r\n      : 'es'\r\n    if (config.output.esm !== false) {\r\n      dirs.push(esmDir)\r\n    }\r\n  }\r\n\r\n  if (config.output?.cjs) {\r\n    const cjsDir = typeof config.output.cjs === 'object' && config.output.cjs.dir\r\n      ? config.output.cjs.dir\r\n      : 'lib'\r\n    if (config.output.cjs !== false) {\r\n      dirs.push(cjsDir)\r\n    }\r\n  }\r\n\r\n  if (config.output?.umd) {\r\n    const umdDir = typeof config.output.umd === 'object' && config.output.umd.dir\r\n      ? config.output.umd.dir\r\n      : 'dist'\r\n    if (config.output.umd !== false) {\r\n      dirs.push(umdDir)\r\n    }\r\n  }\r\n\r\n  // 添加常见的输出目录（兼容旧配置和遗留目录）\r\n  // 注意：由于这是同步函数，我们不能使用动态 import\r\n  // 在这里我们只返回配置的目录，不做文件系统检查\r\n  // 清理时会自动检查目录是否存在\r\n  const commonDirs = ['lib', 'cjs', 'dist', 'es', 'esm', 'umd']\r\n  for (const dir of commonDirs) {\r\n    if (!dirs.includes(dir)) {\r\n      dirs.push(dir)\r\n    }\r\n  }\r\n\r\n  // 去重\r\n  return [...new Set(dirs)]\r\n}\r\n"]}