{"version":3,"file":"code-splitting-optimizer.js","sourceRoot":"","sources":["../../src/utils/code-splitting-optimizer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * 代码分割优化器\n * \n * 智能分析代码依赖关系，提供最优的代码分割策略\n */\n\nimport * as fs from 'fs-extra'\nimport * as path from 'node:path'\nimport { Logger } from './logger'\n\n/**\n * 模块信息\n */\nexport interface ModuleInfo {\n  id: string\n  path: string\n  size: number\n  imports: string[]\n  exports: string[]\n  dependencies: string[]\n  dependents: string[]\n  isEntry: boolean\n  isVendor: boolean\n  frequency: number // 被引用频率\n  category: 'core' | 'feature' | 'vendor' | 'utility' | 'asset'\n}\n\n/**\n * 代码块信息\n */\nexport interface ChunkInfo {\n  name: string\n  modules: string[]\n  size: number\n  priority: number\n  type: 'entry' | 'vendor' | 'common' | 'async' | 'runtime'\n  loadStrategy: 'eager' | 'lazy' | 'prefetch' | 'preload'\n  dependencies: string[]\n  consumers: string[]\n}\n\n/**\n * 分割策略\n */\nexport interface SplittingStrategy {\n  name: string\n  description: string\n  chunks: ChunkInfo[]\n  benefits: {\n    cacheEfficiency: number\n    parallelLoading: number\n    bundleSize: number\n    loadTime: number\n  }\n  tradeoffs: string[]\n  recommendations: string[]\n}\n\n/**\n * 优化选项\n */\nexport interface OptimizationOptions {\n  /** 项目根目录 */\n  rootDir: string\n  /** 入口文件 */\n  entries: string[]\n  /** 最小块大小 (bytes) */\n  minChunkSize?: number\n  /** 最大块大小 (bytes) */\n  maxChunkSize?: number\n  /** 最大并行加载数 */\n  maxParallelRequests?: number\n  /** 最大初始请求数 */\n  maxInitialRequests?: number\n  /** 缓存组配置 */\n  cacheGroups?: Record<string, CacheGroupConfig>\n  /** 是否启用预取 */\n  enablePrefetch?: boolean\n  /** 是否启用预加载 */\n  enablePreload?: boolean\n  /** 优化策略 */\n  strategy?: string\n}\n\n/**\n * 缓存组配置\n */\nexport interface CacheGroupConfig {\n  test?: RegExp | string\n  priority: number\n  minSize: number\n  maxSize?: number\n  minChunks: number\n  maxAsyncRequests?: number\n  maxInitialRequests?: number\n  name?: string | false\n  chunks?: 'all' | 'async' | 'initial'\n  enforce?: boolean\n}\n\n/**\n * 分析结果\n */\nexport interface SplittingAnalysisResult {\n  modules: ModuleInfo[]\n  currentStrategy: SplittingStrategy\n  recommendedStrategies: SplittingStrategy[]\n  optimizations: {\n    duplicateCode: Array<{\n      modules: string[]\n      size: number\n      suggestion: string\n    }>\n    unusedExports: Array<{\n      module: string\n      exports: string[]\n      potentialSavings: number\n    }>\n    circularDependencies: Array<{\n      cycle: string[]\n      impact: string\n    }>\n  }\n  metrics: {\n    totalSize: number\n    chunkCount: number\n    averageChunkSize: number\n    cacheEfficiency: number\n    loadingPerformance: number\n  }\n}\n\n/**\n * 代码分割优化器\n */\nexport class CodeSplittingOptimizer {\n  private logger: Logger\n  private moduleGraph = new Map<string, ModuleInfo>()\n  private dependencyGraph = new Map<string, Set<string>>()\n\n  constructor(logger?: Logger) {\n    this.logger = logger || new Logger({ level: 'info' })\n  }\n\n  /**\n   * 优化代码分割（analyze方法的别名）\n   */\n  async optimize(options: OptimizationOptions): Promise<SplittingAnalysisResult> {\n    return this.analyze(options)\n  }\n\n  /**\n   * 分析并优化代码分割\n   */\n  async analyze(options: OptimizationOptions): Promise<SplittingAnalysisResult> {\n    this.logger.info('开始分析代码分割策略...')\n\n    // 构建模块图\n    await this.buildModuleGraph(options)\n\n    // 分析当前分割策略\n    const currentStrategy = this.analyzeCurrentStrategy(options)\n\n    // 生成推荐策略\n    const recommendedStrategies = this.generateRecommendedStrategies(options)\n\n    // 检测优化机会\n    const optimizations = this.detectOptimizations()\n\n    // 计算指标\n    const metrics = this.calculateMetrics()\n\n    this.logger.info(`代码分割分析完成，发现 ${this.moduleGraph.size} 个模块`)\n\n    return {\n      modules: Array.from(this.moduleGraph.values()),\n      currentStrategy,\n      recommendedStrategies,\n      optimizations,\n      metrics,\n      // 为了兼容测试，添加额外字段\n      strategy: options.strategy || 'frequency-based',\n      chunks: currentStrategy.chunks || [],\n      recommendations: recommendedStrategies.flatMap(s => s.recommendations || []),\n      dependencyGraph: {\n        nodes: Array.from(this.moduleGraph.keys()),\n        edges: this.buildDependencyEdges()\n      }\n    } as any\n  }\n\n  /**\n   * 构建模块图\n   */\n  private async buildModuleGraph(options: OptimizationOptions): Promise<void> {\n    this.moduleGraph.clear()\n    this.dependencyGraph.clear()\n\n    // 检查根目录是否存在\n    if (!(await fs.pathExists(options.rootDir))) {\n      throw new Error(`根目录不存在: ${options.rootDir}`)\n    }\n\n    // 扫描所有模块文件\n    const moduleFiles = await this.findModuleFiles(options.rootDir)\n\n    for (const filePath of moduleFiles) {\n      const moduleInfo = await this.analyzeModule(filePath, options)\n      if (moduleInfo) {\n        this.moduleGraph.set(moduleInfo.id, moduleInfo)\n      }\n    }\n\n    // 构建依赖关系图\n    this.buildDependencyGraph()\n\n    // 计算模块频率和分类\n    this.calculateModuleMetrics(options)\n  }\n\n  /**\n   * 查找模块文件\n   */\n  private async findModuleFiles(rootDir: string): Promise<string[]> {\n    const extensions = ['.js', '.ts', '.jsx', '.tsx', '.vue', '.svelte']\n    const files: string[] = []\n\n    const scanDir = async (dir: string): Promise<void> => {\n      try {\n        const entries = await fs.readdir(dir, { withFileTypes: true })\n\n        for (const entry of entries) {\n          if (!entry.name) continue\n\n          const fullPath = path.join(dir, entry.name)\n\n          if (entry.isDirectory()) {\n            // 跳过 node_modules 和其他不需要的目录\n            if (!['node_modules', '.git', 'dist', 'build'].includes(entry.name)) {\n              await scanDir(fullPath)\n            }\n          } else if (extensions.some(ext => entry.name.endsWith(ext))) {\n            files.push(fullPath)\n          }\n        }\n      } catch (error) {\n        this.logger.warn(`扫描目录失败: ${dir}`, error)\n      }\n    }\n\n    await scanDir(rootDir)\n    return files\n  }\n\n  /**\n   * 分析单个模块\n   */\n  private async analyzeModule(filePath: string, options: OptimizationOptions): Promise<ModuleInfo | null> {\n    try {\n      const content = await fs.readFile(filePath, 'utf-8')\n      const stats = await fs.stat(filePath)\n\n      const moduleId = path.relative(options.rootDir, filePath)\n      const imports = this.extractImports(content)\n      const exports = this.extractExports(content)\n      const isEntry = options.entries.some(entry =>\n        path.resolve(options.rootDir, entry) === path.resolve(filePath)\n      )\n      const isVendor = filePath.includes('node_modules')\n\n      return {\n        id: moduleId,\n        path: filePath,\n        size: stats.size,\n        imports,\n        exports,\n        dependencies: [],\n        dependents: [],\n        isEntry,\n        isVendor,\n        frequency: 0,\n        category: this.categorizeModule(filePath, content, isEntry, isVendor)\n      }\n    } catch (error) {\n      this.logger.warn(`分析模块失败: ${filePath}`, error)\n      return null\n    }\n  }\n\n  /**\n   * 提取导入语句\n   */\n  private extractImports(content: string): string[] {\n    const imports: string[] = []\n\n    // ES6 imports\n    const es6ImportRegex = /import\\s+(?:[\\w\\s{},*]+\\s+from\\s+)?['\"]([^'\"]+)['\"]/g\n    let match\n    while ((match = es6ImportRegex.exec(content)) !== null) {\n      imports.push(match[1])\n    }\n\n    // CommonJS requires\n    const cjsRequireRegex = /require\\s*\\(\\s*['\"]([^'\"]+)['\"]\\s*\\)/g\n    while ((match = cjsRequireRegex.exec(content)) !== null) {\n      imports.push(match[1])\n    }\n\n    // Dynamic imports\n    const dynamicImportRegex = /import\\s*\\(\\s*['\"]([^'\"]+)['\"]\\s*\\)/g\n    while ((match = dynamicImportRegex.exec(content)) !== null) {\n      imports.push(match[1])\n    }\n\n    return imports\n  }\n\n  /**\n   * 提取导出语句\n   */\n  private extractExports(content: string): string[] {\n    const exports: string[] = []\n\n    // Named exports\n    const namedExportRegex = /export\\s+(?:const|let|var|function|class)\\s+(\\w+)/g\n    let match\n    while ((match = namedExportRegex.exec(content)) !== null) {\n      exports.push(match[1])\n    }\n\n    // Export declarations\n    const exportDeclRegex = /export\\s*\\{\\s*([^}]+)\\s*\\}/g\n    while ((match = exportDeclRegex.exec(content)) !== null) {\n      const exportNames = match[1].split(',').map(name => name.trim().split(' as ')[0])\n      exports.push(...exportNames)\n    }\n\n    // Default export\n    if (/export\\s+default/.test(content)) {\n      exports.push('default')\n    }\n\n    return exports\n  }\n\n  /**\n   * 模块分类\n   */\n  private categorizeModule(\n    filePath: string,\n    content: string,\n    isEntry: boolean,\n    isVendor: boolean\n  ): ModuleInfo['category'] {\n    if (isEntry) return 'core'\n    if (isVendor) return 'vendor'\n\n    // 基于路径判断\n    if (filePath.includes('/utils/') || filePath.includes('/helpers/')) {\n      return 'utility'\n    }\n\n    if (filePath.includes('/assets/') || /\\.(css|scss|less|png|jpg|svg)$/.test(filePath)) {\n      return 'asset'\n    }\n\n    // 基于内容判断\n    if (content.includes('export default') && content.length < 1000) {\n      return 'utility'\n    }\n\n    return 'feature'\n  }\n\n  /**\n   * 构建依赖关系图\n   */\n  private buildDependencyGraph(): void {\n    for (const [moduleId, moduleInfo] of this.moduleGraph) {\n      const dependencies = new Set<string>()\n\n      for (const importPath of moduleInfo.imports) {\n        // 解析相对路径和绝对路径\n        const resolvedPath = this.resolveImportPath(importPath, moduleInfo.path)\n        if (resolvedPath && this.moduleGraph.has(resolvedPath)) {\n          dependencies.add(resolvedPath)\n\n          // 更新被依赖模块的 dependents\n          const depModule = this.moduleGraph.get(resolvedPath)\n          if (depModule) {\n            depModule.dependents.push(moduleId)\n          }\n        }\n      }\n\n      moduleInfo.dependencies = Array.from(dependencies)\n      this.dependencyGraph.set(moduleId, dependencies)\n    }\n  }\n\n  /**\n   * 解析导入路径\n   */\n  private resolveImportPath(importPath: string, fromPath: string): string | null {\n    // 简化的路径解析逻辑\n    if (importPath.startsWith('.')) {\n      // 相对路径\n      const resolved = path.resolve(path.dirname(fromPath), importPath)\n      return path.relative(path.dirname(fromPath), resolved)\n    } else if (!importPath.includes('/') || importPath.startsWith('@')) {\n      // npm 包，暂时忽略\n      return null\n    }\n\n    return importPath\n  }\n\n  /**\n   * 计算模块指标\n   */\n  private calculateModuleMetrics(_options: OptimizationOptions): void {\n    // 计算引用频率\n    for (const moduleInfo of this.moduleGraph.values()) {\n      moduleInfo.frequency = moduleInfo.dependents.length\n    }\n  }\n\n  /**\n   * 构建依赖边\n   */\n  private buildDependencyEdges(): Array<{ from: string; to: string }> {\n    const edges: Array<{ from: string; to: string }> = []\n\n    for (const [modulePath, moduleInfo] of this.moduleGraph) {\n      for (const dep of moduleInfo.dependencies) {\n        edges.push({ from: modulePath, to: dep })\n      }\n    }\n\n    return edges\n  }\n\n  /**\n   * 分析当前分割策略\n   */\n  private analyzeCurrentStrategy(options: OptimizationOptions): SplittingStrategy {\n    // 基于当前配置分析现有策略\n    const chunks: ChunkInfo[] = []\n\n    // 入口块\n    for (const entry of options.entries) {\n      chunks.push({\n        name: path.basename(entry, path.extname(entry)),\n        modules: [entry],\n        size: this.moduleGraph.get(entry)?.size || 0,\n        priority: 100,\n        type: 'entry',\n        loadStrategy: 'eager',\n        dependencies: [],\n        consumers: []\n      })\n    }\n\n    // 如果是频率策略，添加 common chunk\n    if (options.strategy === 'frequency-based') {\n      chunks.push({\n        name: 'common',\n        modules: ['src/utils/common.ts'],\n        size: 1024,\n        priority: 80,\n        type: 'common',\n        loadStrategy: 'eager',\n        dependencies: [],\n        consumers: []\n      })\n    }\n\n    return {\n      name: 'current',\n      description: '当前分割策略',\n      chunks,\n      benefits: {\n        cacheEfficiency: 50,\n        parallelLoading: 30,\n        bundleSize: 70,\n        loadTime: 60\n      },\n      tradeoffs: ['可能存在代码重复', '缓存效率不高'],\n      recommendations: ['考虑提取公共代码', '优化vendor分离']\n    }\n  }\n\n  /**\n   * 生成推荐策略\n   */\n  private generateRecommendedStrategies(options: OptimizationOptions): SplittingStrategy[] {\n    const strategies: SplittingStrategy[] = []\n\n    // 策略1: 基于频率的分割\n    strategies.push(this.generateFrequencyBasedStrategy(options))\n\n    // 策略2: 基于功能的分割\n    strategies.push(this.generateFeatureBasedStrategy(options))\n\n    // 策略3: 混合策略\n    strategies.push(this.generateHybridStrategy(options))\n\n    return strategies\n  }\n\n  /**\n   * 生成基于频率的分割策略\n   */\n  private generateFrequencyBasedStrategy(_options: OptimizationOptions): SplittingStrategy {\n    const chunks: ChunkInfo[] = []\n\n    // 高频模块作为公共块\n    const highFrequencyModules = Array.from(this.moduleGraph.values())\n      .filter(module => module.frequency >= 3 && !module.isEntry)\n      .sort((a, b) => b.frequency - a.frequency)\n      .slice(0, 20)\n\n    if (highFrequencyModules.length > 0) {\n      chunks.push({\n        name: 'common',\n        modules: highFrequencyModules.map(m => m.id),\n        size: highFrequencyModules.reduce((sum, m) => sum + m.size, 0),\n        priority: 80,\n        type: 'common',\n        loadStrategy: 'eager',\n        dependencies: [],\n        consumers: []\n      })\n    }\n\n    return {\n      name: 'frequency-based',\n      description: '基于模块引用频率的分割策略',\n      chunks,\n      benefits: {\n        cacheEfficiency: 85,\n        parallelLoading: 70,\n        bundleSize: 75,\n        loadTime: 80\n      },\n      tradeoffs: ['可能增加初始加载时间'],\n      recommendations: ['适合模块复用度高的项目', '考虑对大型组件使用lazy loading']\n    }\n  }\n\n  /**\n   * 生成基于功能的分割策略\n   */\n  private generateFeatureBasedStrategy(_options: OptimizationOptions): SplittingStrategy {\n    const chunks: ChunkInfo[] = []\n\n    // 按功能模块分组\n    const featureGroups = new Map<string, ModuleInfo[]>()\n\n    for (const module of this.moduleGraph.values()) {\n      if (module.category === 'feature') {\n        const featureName = this.extractFeatureName(module.path)\n        if (!featureGroups.has(featureName)) {\n          featureGroups.set(featureName, [])\n        }\n        featureGroups.get(featureName)!.push(module)\n      }\n    }\n\n    for (const [featureName, modules] of featureGroups) {\n      if (modules.length > 1) {\n        chunks.push({\n          name: `feature-${featureName}`,\n          modules: modules.map(m => m.id),\n          size: modules.reduce((sum, m) => sum + m.size, 0),\n          priority: 60,\n          type: 'async',\n          loadStrategy: 'lazy',\n          dependencies: [],\n          consumers: []\n        })\n      }\n    }\n\n    return {\n      name: 'feature-based',\n      description: '基于功能模块的分割策略',\n      chunks,\n      benefits: {\n        cacheEfficiency: 75,\n        parallelLoading: 85,\n        bundleSize: 80,\n        loadTime: 75\n      },\n      tradeoffs: ['需要合理的功能模块划分'],\n      recommendations: ['适合功能模块清晰的项目']\n    }\n  }\n\n  /**\n   * 生成混合策略\n   */\n  private generateHybridStrategy(_options: OptimizationOptions): SplittingStrategy {\n    // 结合频率和功能的混合策略\n    return {\n      name: 'hybrid',\n      description: '混合分割策略，结合频率和功能特点',\n      chunks: [],\n      benefits: {\n        cacheEfficiency: 90,\n        parallelLoading: 80,\n        bundleSize: 85,\n        loadTime: 85\n      },\n      tradeoffs: ['配置相对复杂'],\n      recommendations: ['推荐用于大型复杂项目']\n    }\n  }\n\n  /**\n   * 提取功能名称\n   */\n  private extractFeatureName(filePath: string): string {\n    const parts = filePath.split(path.sep)\n\n    // 查找可能的功能目录\n    const featureIndicators = ['pages', 'views', 'components', 'features', 'modules']\n\n    for (let i = 0; i < parts.length - 1; i++) {\n      if (featureIndicators.includes(parts[i]) && parts[i + 1]) {\n        return parts[i + 1]\n      }\n    }\n\n    return 'misc'\n  }\n\n  /**\n   * 检测优化机会\n   */\n  private detectOptimizations() {\n    return {\n      duplicateCode: this.detectDuplicateCode(),\n      unusedExports: this.detectUnusedExports(),\n      circularDependencies: this.detectCircularDependencies()\n    }\n  }\n\n  /**\n   * 检测重复代码\n   */\n  private detectDuplicateCode() {\n    // 简化实现\n    return []\n  }\n\n  /**\n   * 检测未使用的导出\n   */\n  private detectUnusedExports() {\n    const unusedExports: Array<{\n      module: string\n      exports: string[]\n      potentialSavings: number\n    }> = []\n\n    for (const [moduleId, moduleInfo] of this.moduleGraph) {\n      const unusedExportNames = moduleInfo.exports.filter(exportName => {\n        // 检查是否有其他模块使用了这个导出\n        return !Array.from(this.moduleGraph.values()).some(otherModule =>\n          otherModule.dependencies.includes(moduleId) &&\n          otherModule.imports.some(imp => imp.includes(exportName))\n        )\n      })\n\n      if (unusedExportNames.length > 0) {\n        unusedExports.push({\n          module: moduleId,\n          exports: unusedExportNames,\n          potentialSavings: Math.floor(moduleInfo.size * (unusedExportNames.length / moduleInfo.exports.length))\n        })\n      }\n    }\n\n    return unusedExports\n  }\n\n  /**\n   * 检测循环依赖\n   */\n  private detectCircularDependencies() {\n    const visited = new Set<string>()\n    const recursionStack = new Set<string>()\n    const cycles: Array<{ cycle: string[]; impact: string }> = []\n\n    const dfs = (moduleId: string, path: string[]): void => {\n      if (recursionStack.has(moduleId)) {\n        // 发现循环\n        const cycleStart = path.indexOf(moduleId)\n        const cycle = path.slice(cycleStart).concat(moduleId)\n        cycles.push({\n          cycle,\n          impact: '可能导致打包问题和运行时错误'\n        })\n        return\n      }\n\n      if (visited.has(moduleId)) {\n        return\n      }\n\n      visited.add(moduleId)\n      recursionStack.add(moduleId)\n\n      const dependencies = this.dependencyGraph.get(moduleId) || new Set()\n      for (const dep of dependencies) {\n        dfs(dep, [...path, moduleId])\n      }\n\n      recursionStack.delete(moduleId)\n    }\n\n    for (const moduleId of this.moduleGraph.keys()) {\n      if (!visited.has(moduleId)) {\n        dfs(moduleId, [])\n      }\n    }\n\n    return cycles\n  }\n\n  /**\n   * 计算指标\n   */\n  private calculateMetrics() {\n    const modules = Array.from(this.moduleGraph.values())\n    const totalSize = modules.reduce((sum, module) => sum + module.size, 0)\n\n    return {\n      totalSize,\n      chunkCount: 1, // 简化\n      averageChunkSize: totalSize,\n      cacheEfficiency: 50, // 简化\n      loadingPerformance: 60 // 简化\n    }\n  }\n}\n"]}