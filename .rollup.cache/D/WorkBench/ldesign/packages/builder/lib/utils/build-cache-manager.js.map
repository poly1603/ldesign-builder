{"version":3,"file":"build-cache-manager.js","sourceRoot":"","sources":["../../src/utils/build-cache-manager.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * 构建缓存管理器\n * \n * 提供高级缓存管理功能，包括智能缓存策略、缓存分析和优化\n */\n\nimport * as fs from 'fs-extra'\nimport * as path from 'node:path'\nimport * as crypto from 'node:crypto'\nimport { Logger } from './logger'\n\n/**\n * 缓存条目\n */\nexport interface CacheEntry {\n  key: string\n  hash: string\n  data: any\n  metadata: {\n    size: number\n    createdAt: Date\n    lastAccessed: Date\n    accessCount: number\n    tags: string[]\n    dependencies: string[]\n    ttl?: number\n    expiresAt?: Date\n  }\n}\n\n/**\n * 缓存统计\n */\nexport interface CacheStats {\n  totalEntries: number\n  totalSize: number\n  hitRate: number\n  missRate: number\n  evictionCount: number\n  oldestEntry: Date\n  newestEntry: Date\n  averageAccessCount: number\n  sizeDistribution: {\n    small: number // < 1KB\n    medium: number // 1KB - 100KB\n    large: number // 100KB - 1MB\n    huge: number // > 1MB\n  }\n  tagDistribution: Record<string, number>\n}\n\n/**\n * 缓存策略\n */\nexport type CacheStrategy = 'lru' | 'lfu' | 'ttl' | 'size-based' | 'dependency-based'\n\n/**\n * 缓存配置\n */\nexport interface CacheConfig {\n  /** 缓存目录 */\n  cacheDir: string\n  /** 最大缓存大小 (bytes) */\n  maxSize: number\n  /** 最大条目数 */\n  maxEntries: number\n  /** 默认TTL (秒) */\n  defaultTtl?: number\n  /** 缓存策略 */\n  strategy: CacheStrategy\n  /** 是否启用压缩 */\n  compression: boolean\n  /** 是否启用加密 */\n  encryption: boolean\n  /** 清理间隔 (秒) */\n  cleanupInterval: number\n}\n\n/**\n * 缓存操作结果\n */\nexport interface CacheOperationResult {\n  success: boolean\n  key: string\n  hit?: boolean\n  size?: number\n  error?: string\n  fromCache?: boolean\n  executionTime: number\n}\n\n/**\n * 依赖变更检测器\n */\nexport interface DependencyTracker {\n  /** 文件路径到哈希的映射 */\n  fileHashes: Map<string, string>\n  /** 依赖关系图 */\n  dependencyGraph: Map<string, Set<string>>\n}\n\n/**\n * 构建缓存管理器\n */\nexport class BuildCacheManager {\n  private logger: Logger\n  private config: CacheConfig\n  private cache = new Map<string, CacheEntry>()\n  private stats = {\n    hits: 0,\n    misses: 0,\n    evictions: 0\n  }\n  private dependencyTracker: DependencyTracker = {\n    fileHashes: new Map(),\n    dependencyGraph: new Map()\n  }\n  private cleanupTimer?: NodeJS.Timeout\n\n  constructor(config?: Partial<CacheConfig>, logger?: Logger) {\n    const defaultConfig: CacheConfig = {\n      cacheDir: path.join(process.cwd(), '.cache'),\n      maxSize: 100 * 1024 * 1024, // 100MB\n      maxEntries: 1000,\n      strategy: 'lru',\n      compression: false,\n      encryption: false,\n      cleanupInterval: 60 * 60 // 1 hour\n    }\n\n    this.config = { ...defaultConfig, ...config }\n    this.logger = logger || new Logger({ level: 'info' })\n    this.startCleanupTimer()\n  }\n\n  /**\n   * 初始化缓存\n   */\n  async initialize(): Promise<void> {\n    try {\n      await fs.ensureDir(this.config.cacheDir)\n      await this.loadCacheIndex()\n      this.logger.info(`缓存管理器初始化完成，缓存目录: ${this.config.cacheDir}`)\n    } catch (error) {\n      this.logger.error('缓存初始化失败:', error)\n      throw error\n    }\n  }\n\n  /**\n   * 获取缓存\n   */\n  async get<T = any>(key: string, dependencies?: string[]): Promise<T | null> {\n    const startTime = Date.now()\n\n    try {\n      let entry: CacheEntry | null = this.cache.get(key) || null\n\n      // 如果内存中没有，尝试从磁盘加载\n      if (!entry) {\n        entry = await this.loadFromDisk(key)\n        if (!entry) {\n          this.stats.misses++\n          return null\n        }\n\n        // 加载到内存中\n        this.cache.set(key, entry)\n      }\n\n      // 检查TTL\n      if (entry.metadata.ttl && this.isExpired(entry)) {\n        await this.delete(key)\n        this.stats.misses++\n        return null\n      }\n\n      // 检查依赖是否变更\n      if (dependencies && await this.hasDependencyChanged(key, dependencies)) {\n        await this.delete(key)\n        this.stats.misses++\n        return null\n      }\n\n      // 更新访问信息\n      entry.metadata.lastAccessed = new Date()\n      entry.metadata.accessCount++\n\n      this.stats.hits++\n\n      this.logger.debug(`缓存命中: ${key}, 耗时: ${Date.now() - startTime}ms`)\n      return entry.data\n    } catch (error) {\n      this.logger.error(`获取缓存失败: ${key}`, error)\n      this.stats.misses++\n      return null\n    }\n  }\n\n  /**\n   * 设置缓存\n   */\n  async set<T = any>(\n    key: string,\n    data: T,\n    options: {\n      tags?: string[]\n      dependencies?: string[]\n      ttl?: number\n    } = {}\n  ): Promise<CacheOperationResult> {\n    const startTime = Date.now()\n\n    try {\n      const serializedData = JSON.stringify(data)\n      const hash = this.generateHash(serializedData)\n      const size = Buffer.byteLength(serializedData, 'utf8')\n\n      // 检查是否需要清理空间\n      await this.ensureSpace(size)\n\n      const entry: CacheEntry = {\n        key,\n        hash,\n        data,\n        metadata: {\n          size,\n          createdAt: new Date(),\n          lastAccessed: new Date(),\n          accessCount: 0,\n          tags: options.tags || [],\n          dependencies: options.dependencies || [],\n          ttl: options.ttl || this.config.defaultTtl\n        }\n      }\n\n      this.cache.set(key, entry)\n\n      // 更新依赖跟踪\n      if (options.dependencies) {\n        await this.updateDependencyTracking(key, options.dependencies)\n      }\n\n      // 持久化到磁盘\n      await this.persistEntry(entry)\n\n      const executionTime = Date.now() - startTime\n      this.logger.debug(`缓存设置成功: ${key}, 大小: ${size} bytes, 耗时: ${executionTime}ms`)\n\n      return {\n        success: true,\n        key,\n        size,\n        executionTime\n      }\n    } catch (error) {\n      const executionTime = Date.now() - startTime\n      this.logger.error(`设置缓存失败: ${key}`, error)\n\n      // 对于某些错误，抛出异常而不是返回错误结果\n      if (error instanceof Error && error.message.includes('Permission denied')) {\n        throw error\n      }\n\n      return {\n        success: false,\n        key,\n        error: error instanceof Error ? error.message : String(error),\n        executionTime\n      }\n    }\n  }\n\n  /**\n   * 检查缓存是否存在\n   */\n  async has(key: string): Promise<boolean> {\n    if (this.cache.has(key)) {\n      return true\n    }\n\n    // 检查磁盘文件\n    const filePath = this.getCacheFilePath(key)\n    return await fs.pathExists(filePath)\n  }\n\n  /**\n   * 删除缓存\n   */\n  async delete(key: string): Promise<boolean> {\n    try {\n      let deleted = false\n\n      // 从内存中删除\n      if (this.cache.has(key)) {\n        this.cache.delete(key)\n        deleted = true\n      }\n\n      // 删除磁盘文件\n      const filePath = this.getCacheFilePath(key)\n      try {\n        if (await fs.pathExists(filePath)) {\n          await fs.remove(filePath)\n          deleted = true\n        }\n      } catch {\n        // 文件可能不存在，忽略错误\n      }\n\n      if (deleted) {\n        this.logger.debug(`缓存删除成功: ${key}`)\n      }\n\n      return deleted\n    } catch (error) {\n      this.logger.error(`删除缓存失败: ${key}`, error)\n      return false\n    }\n  }\n\n  /**\n   * 设置缓存（带依赖跟踪）\n   */\n  async setWithDependencies(key: string, data: any, dependencies: string[], options?: { ttl?: number, tags?: string[] }): Promise<CacheOperationResult> {\n    const result = await this.set(key, data, options)\n\n    if (result.success) {\n      await this.updateDependencyTracking(key, dependencies)\n    }\n\n    return result\n  }\n\n  /**\n   * 清空缓存\n   */\n  async clear(tags?: string[]): Promise<number> {\n    let deletedCount = 0\n\n    try {\n      if (tags && tags.length > 0) {\n        // 按标签清理\n        for (const [key, entry] of this.cache) {\n          if (entry.metadata.tags.some(tag => tags.includes(tag))) {\n            await this.delete(key)\n            deletedCount++\n          }\n        }\n      } else {\n        // 清空所有缓存\n        deletedCount = this.cache.size\n        this.cache.clear()\n\n        // 清空缓存目录\n        await fs.emptyDir(this.config.cacheDir)\n      }\n\n      this.logger.info(`清理缓存完成，删除 ${deletedCount} 个条目`)\n      return deletedCount\n    } catch (error) {\n      this.logger.error('清理缓存失败:', error)\n      return deletedCount\n    }\n  }\n\n  /**\n   * 获取缓存大小\n   */\n  async getSize(): Promise<number> {\n    try {\n      let totalSize = 0\n\n      // 计算内存中的缓存大小\n      const memorySize = Array.from(this.cache.values())\n        .reduce((sum, entry) => sum + entry.metadata.size, 0)\n\n      // 如果有内存缓存，直接返回\n      if (memorySize > 0) {\n        return memorySize\n      }\n\n      // 否则扫描磁盘文件\n      if (await fs.pathExists(this.config.cacheDir)) {\n        const files = await fs.readdir(this.config.cacheDir)\n        const cacheFiles = files.filter(file => file.endsWith('.cache'))\n\n        for (const file of cacheFiles) {\n          try {\n            const filePath = path.join(this.config.cacheDir, file)\n            const stats = await fs.stat(filePath)\n            totalSize += stats.size\n          } catch {\n            // 忽略无法访问的文件\n          }\n        }\n      }\n\n      return totalSize\n    } catch (error) {\n      this.logger.error('获取缓存大小失败:', error)\n      return 0\n    }\n  }\n\n  /**\n   * 获取缓存统计\n   */\n  getStats(): CacheStats {\n    const entries = Array.from(this.cache.values())\n    const totalEntries = entries.length\n    const totalSize = entries.reduce((sum, entry) => sum + entry.metadata.size, 0)\n    const totalOperations = this.stats.hits + this.stats.misses\n\n    const hitRate = totalOperations > 0 ? this.stats.hits / totalOperations : 0\n    const missRate = totalOperations > 0 ? this.stats.misses / totalOperations : 0\n\n    const sizeDistribution = {\n      small: 0,\n      medium: 0,\n      large: 0,\n      huge: 0\n    }\n\n    const tagDistribution: Record<string, number> = {}\n\n    let oldestEntry = new Date()\n    let newestEntry = new Date(0)\n    let totalAccessCount = 0\n\n    for (const entry of entries) {\n      // 大小分布\n      if (entry.metadata.size < 1024) {\n        sizeDistribution.small++\n      } else if (entry.metadata.size < 100 * 1024) {\n        sizeDistribution.medium++\n      } else if (entry.metadata.size < 1024 * 1024) {\n        sizeDistribution.large++\n      } else {\n        sizeDistribution.huge++\n      }\n\n      // 标签分布\n      for (const tag of entry.metadata.tags) {\n        tagDistribution[tag] = (tagDistribution[tag] || 0) + 1\n      }\n\n      // 时间统计\n      if (entry.metadata.createdAt < oldestEntry) {\n        oldestEntry = entry.metadata.createdAt\n      }\n      if (entry.metadata.createdAt > newestEntry) {\n        newestEntry = entry.metadata.createdAt\n      }\n\n      totalAccessCount += entry.metadata.accessCount\n    }\n\n    return {\n      totalEntries,\n      entryCount: totalEntries, // 为了兼容测试\n      totalSize,\n      hitRate,\n      missRate,\n      evictionCount: this.stats.evictions,\n      oldestEntry,\n      newestEntry,\n      averageAccessCount: totalEntries > 0 ? totalAccessCount / totalEntries : 0,\n      sizeDistribution,\n      tagDistribution\n    } as any\n  }\n\n  /**\n   * 清理缓存\n   */\n  async cleanup(): Promise<number> {\n    const expiredCount = await this.cleanupExpired()\n    const unusedCount = await this.cleanupUnused()\n    return expiredCount + unusedCount\n  }\n\n  /**\n   * 优化缓存\n   */\n  async optimize(): Promise<{\n    beforeStats: CacheStats\n    afterStats: CacheStats\n    optimizations: string[]\n  }> {\n    const beforeStats = this.getStats()\n    const optimizations: string[] = []\n\n    try {\n      // 清理过期条目\n      const expiredCount = await this.cleanupExpired()\n      if (expiredCount > 0) {\n        optimizations.push(`清理了 ${expiredCount} 个过期条目`)\n      }\n\n      // 清理未使用的条目\n      const unusedCount = await this.cleanupUnused()\n      if (unusedCount > 0) {\n        optimizations.push(`清理了 ${unusedCount} 个未使用条目`)\n      }\n\n      // 压缩大文件\n      const compressedCount = await this.compressLargeEntries()\n      if (compressedCount > 0) {\n        optimizations.push(`压缩了 ${compressedCount} 个大文件`)\n      }\n\n      const afterStats = this.getStats()\n\n      this.logger.info(`缓存优化完成: ${optimizations.join(', ')}`)\n\n      return {\n        beforeStats,\n        afterStats,\n        optimizations\n      }\n    } catch (error) {\n      this.logger.error('缓存优化失败:', error)\n      throw error\n    }\n  }\n\n  /**\n   * 生成哈希\n   */\n  private generateHash(data: string): string {\n    return crypto.createHash('sha256').update(data).digest('hex')\n  }\n\n  /**\n   * 检查是否过期\n   */\n  private isExpired(entry: CacheEntry): boolean {\n    if (!entry.metadata.ttl) {\n      return false\n    }\n\n    const now = Date.now()\n    const createdAt = entry.metadata.createdAt.getTime()\n    const ttlMs = entry.metadata.ttl * 1000\n\n    return now - createdAt > ttlMs\n  }\n\n  /**\n   * 检查依赖是否变更\n   */\n  private async hasDependencyChanged(_key: string, dependencies: string[]): Promise<boolean> {\n    for (const dep of dependencies) {\n      try {\n        const stats = await fs.stat(dep)\n        const currentHash = this.generateHash(stats.mtime.toISOString() + stats.size)\n        const cachedHash = this.dependencyTracker.fileHashes.get(dep)\n\n        if (cachedHash !== currentHash) {\n          return true\n        }\n      } catch {\n        // 文件不存在或无法访问，认为已变更\n        return true\n      }\n    }\n\n    return false\n  }\n\n  /**\n   * 更新依赖跟踪\n   */\n  private async updateDependencyTracking(key: string, dependencies: string[]): Promise<void> {\n    for (const dep of dependencies) {\n      try {\n        const stats = await fs.stat(dep)\n        const hash = this.generateHash(stats.mtime.toISOString() + stats.size)\n        this.dependencyTracker.fileHashes.set(dep, hash)\n\n        if (!this.dependencyTracker.dependencyGraph.has(key)) {\n          this.dependencyTracker.dependencyGraph.set(key, new Set())\n        }\n        this.dependencyTracker.dependencyGraph.get(key)!.add(dep)\n      } catch {\n        // 忽略无法访问的文件\n      }\n    }\n  }\n\n  /**\n   * 确保有足够空间\n   */\n  private async ensureSpace(requiredSize: number): Promise<void> {\n    const currentSize = Array.from(this.cache.values())\n      .reduce((sum, entry) => sum + entry.metadata.size, 0)\n\n    if (currentSize + requiredSize <= this.config.maxSize &&\n      this.cache.size < this.config.maxEntries) {\n      return\n    }\n\n    // 根据策略清理缓存\n    await this.evictEntries(requiredSize)\n  }\n\n  /**\n   * 驱逐条目\n   */\n  private async evictEntries(requiredSize: number): Promise<void> {\n    const entries = Array.from(this.cache.values())\n    let freedSize = 0\n\n    // 根据策略排序\n    const sortedEntries = this.sortEntriesForEviction(entries)\n\n    for (const entry of sortedEntries) {\n      if (freedSize >= requiredSize && this.cache.size < this.config.maxEntries) {\n        break\n      }\n\n      await this.delete(entry.key)\n      freedSize += entry.metadata.size\n      this.stats.evictions++\n    }\n  }\n\n  /**\n   * 根据策略排序条目\n   */\n  private sortEntriesForEviction(entries: CacheEntry[]): CacheEntry[] {\n    switch (this.config.strategy) {\n      case 'lru':\n        return entries.sort((a, b) =>\n          a.metadata.lastAccessed.getTime() - b.metadata.lastAccessed.getTime()\n        )\n\n      case 'lfu':\n        return entries.sort((a, b) =>\n          a.metadata.accessCount - b.metadata.accessCount\n        )\n\n      case 'size-based':\n        return entries.sort((a, b) => b.metadata.size - a.metadata.size)\n\n      case 'ttl':\n        return entries.sort((a, b) =>\n          a.metadata.createdAt.getTime() - b.metadata.createdAt.getTime()\n        )\n\n      default:\n        return entries\n    }\n  }\n\n  /**\n   * 获取缓存文件路径\n   */\n  private getCacheFilePath(key: string): string {\n    const hash = this.generateHash(key)\n    return path.join(this.config.cacheDir, `${hash}.cache`)\n  }\n\n  /**\n   * 从磁盘加载缓存条目\n   */\n  private async loadFromDisk(key: string): Promise<CacheEntry | null> {\n    try {\n      const filePath = this.getCacheFilePath(key)\n\n      if (!(await fs.pathExists(filePath))) {\n        return null\n      }\n\n      const stats = await fs.stat(filePath)\n      const data = await fs.readFile(filePath, 'utf8')\n      const entry: CacheEntry = JSON.parse(data)\n\n      // 恢复日期对象\n      entry.metadata.createdAt = new Date(entry.metadata.createdAt)\n      entry.metadata.lastAccessed = new Date(entry.metadata.lastAccessed)\n      if (entry.metadata.expiresAt) {\n        entry.metadata.expiresAt = new Date(entry.metadata.expiresAt)\n      }\n\n      // 更新文件大小\n      entry.metadata.size = stats.size\n\n      return entry\n    } catch (error) {\n      this.logger.debug(`从磁盘加载缓存失败: ${key}`, error)\n      return null\n    }\n  }\n\n  /**\n   * 持久化条目\n   */\n  private async persistEntry(entry: CacheEntry): Promise<void> {\n    const filePath = this.getCacheFilePath(entry.key)\n\n    // 确保目录存在\n    await fs.ensureDir(path.dirname(filePath))\n\n    const data = JSON.stringify(entry)\n    await fs.writeFile(filePath, data, 'utf8')\n  }\n\n  /**\n   * 加载缓存索引\n   */\n  private async loadCacheIndex(): Promise<void> {\n    try {\n      const files = await fs.readdir(this.config.cacheDir)\n      const cacheFiles = files.filter(file => file.endsWith('.cache'))\n\n      for (const file of cacheFiles) {\n        try {\n          const filePath = path.join(this.config.cacheDir, file)\n          const content = await fs.readFile(filePath, 'utf8')\n          const entry: CacheEntry = JSON.parse(content)\n\n          // 恢复日期对象\n          entry.metadata.createdAt = new Date(entry.metadata.createdAt)\n          entry.metadata.lastAccessed = new Date(entry.metadata.lastAccessed)\n\n          this.cache.set(entry.key, entry)\n        } catch (error) {\n          this.logger.warn(`加载缓存文件失败: ${file}`, error)\n        }\n      }\n\n      this.logger.info(`加载了 ${this.cache.size} 个缓存条目`)\n    } catch (error) {\n      this.logger.warn('加载缓存索引失败:', error)\n    }\n  }\n\n  /**\n   * 清理过期条目\n   */\n  private async cleanupExpired(): Promise<number> {\n    let count = 0\n\n    for (const [key, entry] of this.cache) {\n      if (this.isExpired(entry)) {\n        await this.delete(key)\n        count++\n      }\n    }\n\n    return count\n  }\n\n  /**\n   * 清理未使用条目\n   */\n  private async cleanupUnused(): Promise<number> {\n    let count = 0\n    const threshold = Date.now() - (7 * 24 * 60 * 60 * 1000) // 7天\n\n    for (const [key, entry] of this.cache) {\n      if (entry.metadata.lastAccessed.getTime() < threshold &&\n        entry.metadata.accessCount === 0) {\n        await this.delete(key)\n        count++\n      }\n    }\n\n    return count\n  }\n\n  /**\n   * 压缩大条目\n   */\n  private async compressLargeEntries(): Promise<number> {\n    // 简化实现，实际可以使用 zlib 压缩\n    return 0\n  }\n\n  /**\n   * 启动清理定时器\n   */\n  private startCleanupTimer(): void {\n    if (this.cleanupTimer) {\n      clearInterval(this.cleanupTimer)\n    }\n\n    this.cleanupTimer = setInterval(async () => {\n      try {\n        await this.cleanupExpired()\n      } catch (error) {\n        this.logger.error('定时清理失败:', error)\n      }\n    }, this.config.cleanupInterval * 1000)\n  }\n\n  /**\n   * 销毁缓存管理器\n   */\n  async destroy(): Promise<void> {\n    if (this.cleanupTimer) {\n      clearInterval(this.cleanupTimer)\n    }\n\n    // 保存当前状态\n    const stats = this.getStats()\n    this.logger.info(`缓存管理器销毁，最终统计: ${stats.totalEntries} 条目, ${Math.round(stats.totalSize / 1024)} KB`)\n  }\n}\n"]}