{"version":3,"file":"build-performance-analyzer.js","sourceRoot":"","sources":["../../src/utils/build-performance-analyzer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * 构建性能分析器\n * \n * 提供详细的构建性能分析、瓶颈识别和优化建议\n */\n\nimport { Logger } from './logger'\nimport { PerformanceMonitor } from '../core/PerformanceMonitor'\n\n/**\n * 构建阶段\n */\nexport type BuildPhase =\n  | 'initialization'\n  | 'dependency-resolution'\n  | 'file-scanning'\n  | 'compilation'\n  | 'bundling'\n  | 'optimization'\n  | 'output-generation'\n  | 'validation'\n\n/**\n * 性能指标\n */\nexport interface PerformanceMetrics {\n  duration: number\n  memoryUsage: {\n    peak: number\n    average: number\n    final: number\n  }\n  cpuUsage?: {\n    user: number\n    system: number\n  }\n  fileOperations: {\n    reads: number\n    writes: number\n    totalSize: number\n  }\n  cacheHits: number\n  cacheMisses: number\n}\n\n/**\n * 阶段性能数据\n */\nexport interface PhasePerformance {\n  phase: BuildPhase\n  startTime: number\n  endTime: number\n  duration: number\n  memoryUsage: {\n    heapUsed: number\n    heapTotal: number\n    peak: number\n    average: number\n    final: number\n  }\n  metrics: PerformanceMetrics\n  subPhases?: PhasePerformance[]\n  warnings: string[]\n  bottlenecks: string[]\n}\n\n/**\n * 性能瓶颈\n */\nexport interface PerformanceBottleneck {\n  type: 'memory' | 'cpu' | 'io' | 'cache' | 'dependency'\n  severity: 'low' | 'medium' | 'high' | 'critical'\n  description: string\n  impact: string\n  suggestion: string\n  phase: BuildPhase\n  metrics: {\n    value: number\n    threshold: number\n    unit: string\n  }\n}\n\n/**\n * 性能分析结果\n */\nexport interface BuildPerformanceAnalysis {\n  totalDuration: number\n  phases: PhasePerformance[]\n  bottlenecks: {\n    slowestPhase: string | null\n    slowestDuration: number\n    memoryPeak: number\n    issues: string[]\n  }\n  recommendations: string[]\n  comparison?: {\n    previousBuild?: BuildPerformanceAnalysis\n    baseline?: BuildPerformanceAnalysis\n    improvement: number\n  }\n  summary: {\n    averagePhaseTime: number\n    memoryEfficiency: number\n    cacheHitRate: number\n    parallelizationOpportunities: string[]\n  }\n  detailedMetrics?: {\n    cpuUsage: { user: number; system: number }\n    memoryPeak: number\n    diskIO: { reads: number; writes: number }\n    networkRequests: number\n  }\n}\n\n/**\n * 分析选项\n */\nexport interface AnalysisOptions {\n  /** 是否启用详细分析 */\n  detailed?: boolean\n  /** 是否包含详细指标 */\n  includeDetailedMetrics?: boolean\n  /** 是否包含建议 */\n  includeRecommendations?: boolean\n  /** 性能阈值配置 */\n  thresholds?: {\n    slowPhase: number // 毫秒\n    highMemory: number // 字节\n    lowCacheHit: number // 百分比\n  }\n  /** 是否与历史数据比较 */\n  compareWithHistory?: boolean\n  /** 历史数据保留数量 */\n  historyLimit?: number\n}\n\n/**\n * 构建性能分析器\n */\nexport class BuildPerformanceAnalyzer {\n  private logger: Logger\n  private performanceMonitor: PerformanceMonitor\n  private currentAnalysis: Partial<BuildPerformanceAnalysis> = {}\n  private phaseStack: PhasePerformance[] = []\n  private history: BuildPerformanceAnalysis[] = []\n\n  constructor(logger?: Logger) {\n    this.logger = logger || new Logger({ level: 'info' })\n    this.performanceMonitor = new PerformanceMonitor()\n  }\n\n  /**\n   * 开始性能分析\n   */\n  startAnalysis(): void {\n    this.currentAnalysis = {\n      phases: [],\n      bottlenecks: {\n        slowestPhase: null,\n        slowestDuration: 0,\n        memoryPeak: 0,\n        issues: []\n      },\n      recommendations: []\n    }\n    this.phaseStack = []\n    this.logger.debug('开始构建性能分析')\n  }\n\n  /**\n   * 开始阶段\n   */\n  startPhase(phase: BuildPhase): void {\n    this.performanceMonitor.startSession(`phase-${phase}`)\n\n    const memUsage = process.memoryUsage()\n    const phaseData: PhasePerformance = {\n      phase,\n      startTime: Date.now(),\n      endTime: 0,\n      duration: 0,\n      memoryUsage: {\n        heapUsed: memUsage.heapUsed,\n        heapTotal: memUsage.heapTotal,\n        peak: memUsage.heapUsed,\n        average: memUsage.heapUsed,\n        final: memUsage.heapUsed\n      },\n      metrics: {\n        duration: 0,\n        memoryUsage: { peak: memUsage.heapUsed, average: memUsage.heapUsed, final: memUsage.heapUsed },\n        fileOperations: { reads: 0, writes: 0, totalSize: 0 },\n        cacheHits: 0,\n        cacheMisses: 0\n      },\n      warnings: [],\n      bottlenecks: []\n    }\n\n    this.phaseStack.push(phaseData)\n    this.logger.debug(`开始阶段: ${phase}`)\n  }\n\n  /**\n   * 结束阶段\n   */\n  endPhase(phase: BuildPhase): PhasePerformance | null {\n    // 查找指定阶段\n    const phaseIndex = this.phaseStack.findIndex(p => p.phase === phase)\n\n    if (phaseIndex === -1) {\n      this.logger.warn(`阶段不匹配: 期望 ${phase}, 实际 ${this.phaseStack.length > 0 ? this.phaseStack[this.phaseStack.length - 1].phase : 'undefined'}`)\n      this.logger.debug(`当前阶段栈: [${this.phaseStack.map(p => p.phase).join(', ')}]`)\n      return null\n    }\n\n    // 移除指定阶段\n    const currentPhase = this.phaseStack.splice(phaseIndex, 1)[0]\n    this.logger.debug(`结束阶段 ${phase}, 剩余阶段: [${this.phaseStack.map(p => p.phase).join(', ')}]`)\n\n    currentPhase.endTime = Date.now()\n    currentPhase.duration = currentPhase.endTime - currentPhase.startTime\n    currentPhase.metrics.duration = currentPhase.duration\n\n    // 获取性能指标\n    this.performanceMonitor.endSession(`phase-${phase}`)\n    const memUsage = process.memoryUsage()\n\n    // 更新内存使用信息\n    currentPhase.memoryUsage = {\n      heapUsed: memUsage.heapUsed,\n      heapTotal: memUsage.heapTotal,\n      peak: Math.max(currentPhase.memoryUsage.peak, memUsage.heapUsed),\n      average: (currentPhase.memoryUsage.heapUsed + memUsage.heapUsed) / 2,\n      final: memUsage.heapUsed\n    }\n\n    currentPhase.metrics.memoryUsage = {\n      peak: currentPhase.memoryUsage.peak,\n      average: currentPhase.memoryUsage.average,\n      final: currentPhase.memoryUsage.final\n    }\n\n    // 检测阶段瓶颈\n    this.detectPhaseBottlenecks(currentPhase)\n\n    // 添加到当前分析\n    if (!this.currentAnalysis.phases) {\n      this.currentAnalysis.phases = []\n    }\n    this.currentAnalysis.phases.push(currentPhase)\n\n    this.logger.info(`构建监控完成: phase-${phase} (${currentPhase.metrics.duration}ms)`)\n    return currentPhase\n  }\n\n  /**\n   * 记录文件操作\n   */\n  recordFileOperation(type: 'read' | 'write', size: number): void {\n    const currentPhase = this.phaseStack[this.phaseStack.length - 1]\n    if (currentPhase) {\n      if (type === 'read') {\n        currentPhase.metrics.fileOperations.reads++\n      } else {\n        currentPhase.metrics.fileOperations.writes++\n      }\n      currentPhase.metrics.fileOperations.totalSize += size\n    }\n  }\n\n  /**\n   * 记录缓存操作\n   */\n  recordCacheOperation(hit: boolean): void {\n    const currentPhase = this.phaseStack[this.phaseStack.length - 1]\n    if (currentPhase) {\n      if (hit) {\n        currentPhase.metrics.cacheHits++\n      } else {\n        currentPhase.metrics.cacheMisses++\n      }\n    }\n  }\n\n  /**\n   * 完成分析\n   */\n  finishAnalysis(options: AnalysisOptions = {}): BuildPerformanceAnalysis {\n    if (!this.currentAnalysis.phases || this.currentAnalysis.phases.length === 0) {\n      // 如果没有阶段数据，返回空的分析结果而不是抛出错误\n      const analysis: BuildPerformanceAnalysis = {\n        totalDuration: 0,\n        phases: [],\n        bottlenecks: {\n          slowestPhase: null,\n          slowestDuration: 0,\n          memoryPeak: 0,\n          issues: []\n        },\n        recommendations: [],\n        summary: {\n          averagePhaseTime: 0,\n          memoryEfficiency: 100,\n          cacheHitRate: 0,\n          parallelizationOpportunities: []\n        }\n      }\n\n      if (options.includeDetailedMetrics) {\n        analysis.detailedMetrics = {\n          cpuUsage: { user: 0, system: 0 },\n          memoryPeak: 0,\n          diskIO: { reads: 0, writes: 0 },\n          networkRequests: 0\n        }\n      }\n\n      return analysis\n    }\n\n    const totalDuration = this.currentAnalysis.phases.reduce(\n      (sum, phase) => sum + phase.metrics.duration,\n      0\n    )\n\n    // 检测全局瓶颈\n    const bottlenecks = this.detectGlobalBottlenecks(this.currentAnalysis.phases, options)\n\n    // 生成建议（如果请求）\n    const recommendations = options.includeRecommendations\n      ? this.generateRecommendations(this.currentAnalysis.phases, bottlenecks.issues)\n      : []\n\n    // 生成摘要\n    const summary = this.generateSummary(this.currentAnalysis.phases)\n\n    const analysis: BuildPerformanceAnalysis = {\n      totalDuration,\n      phases: this.currentAnalysis.phases,\n      bottlenecks,\n      recommendations,\n      summary\n    }\n\n    // 添加详细指标（如果请求）\n    if (options.includeDetailedMetrics) {\n      analysis.detailedMetrics = {\n        cpuUsage: { user: 0, system: 0 },\n        memoryPeak: Math.max(...this.currentAnalysis.phases.map(p => p.metrics.memoryUsage?.peak || 0)),\n        diskIO: {\n          reads: this.currentAnalysis.phases.reduce((sum, p) => sum + p.metrics.fileOperations.reads, 0),\n          writes: this.currentAnalysis.phases.reduce((sum, p) => sum + p.metrics.fileOperations.writes, 0)\n        },\n        networkRequests: 0\n      }\n    }\n\n    // 与历史数据比较\n    if (options.compareWithHistory && this.history.length > 0) {\n      const previousBuild = this.history[this.history.length - 1]\n      analysis.comparison = {\n        previousBuild,\n        improvement: ((previousBuild.totalDuration - totalDuration) / previousBuild.totalDuration) * 100\n      }\n    }\n\n    // 保存到历史\n    this.history.push(analysis)\n    if (options.historyLimit && this.history.length > options.historyLimit) {\n      this.history.shift()\n    }\n\n    this.logger.info(`构建性能分析完成，总耗时: ${totalDuration}ms`)\n    return analysis\n  }\n\n  /**\n   * 检测阶段瓶颈\n   */\n  private detectPhaseBottlenecks(phase: PhasePerformance): void {\n    const thresholds = {\n      slowPhase: 5000, // 5秒\n      highMemory: 500 * 1024 * 1024, // 500MB\n      lowCacheHit: 50 // 50%\n    }\n\n    // 检查耗时\n    if (phase.metrics.duration > thresholds.slowPhase) {\n      phase.bottlenecks.push(`阶段 ${phase.phase} 耗时过长: ${phase.metrics.duration}ms`)\n    }\n\n    // 检查内存使用\n    if (phase.metrics.memoryUsage.peak > thresholds.highMemory) {\n      phase.bottlenecks.push(`阶段 ${phase.phase} 内存使用过高: ${Math.round(phase.metrics.memoryUsage.peak / 1024 / 1024)}MB`)\n    }\n\n    // 检查缓存命中率\n    const totalCacheOps = phase.metrics.cacheHits + phase.metrics.cacheMisses\n    if (totalCacheOps > 0) {\n      const hitRate = (phase.metrics.cacheHits / totalCacheOps) * 100\n      if (hitRate < thresholds.lowCacheHit) {\n        phase.bottlenecks.push(`阶段 ${phase.phase} 缓存命中率过低: ${hitRate.toFixed(1)}%`)\n      }\n    }\n  }\n\n  /**\n   * 检测全局瓶颈\n   */\n  private detectGlobalBottlenecks(phases: PhasePerformance[], options: AnalysisOptions) {\n    const issues: string[] = []\n    const thresholds = options.thresholds || {\n      slowPhase: 5000,\n      highMemory: 500 * 1024 * 1024,\n      lowCacheHit: 50\n    }\n\n    let slowestPhase: string | null = null\n    let slowestDuration = 0\n    let memoryPeak = 0\n\n    phases.forEach(phase => {\n      if (phase.duration > slowestDuration) {\n        slowestDuration = phase.duration\n        slowestPhase = phase.phase\n      }\n\n      const phaseMemoryPeak = phase.memoryUsage?.peak || 0\n      if (phaseMemoryPeak > memoryPeak) {\n        memoryPeak = phaseMemoryPeak\n      }\n\n      if (phase.duration > thresholds.slowPhase) {\n        issues.push(`阶段 ${phase.phase} 耗时过长: ${phase.duration}ms`)\n      }\n\n      if (phaseMemoryPeak > thresholds.highMemory) {\n        issues.push(`阶段 ${phase.phase} 内存使用过高: ${Math.round(phaseMemoryPeak / 1024 / 1024)}MB`)\n      }\n    })\n\n    return {\n      slowestPhase,\n      slowestDuration,\n      memoryPeak,\n      issues\n    }\n\n    // 移除这部分代码，因为它与函数的返回类型不匹配\n    // 这个函数应该只返回简单的瓶颈信息对象\n  }\n\n  /**\n   * 生成建议\n   */\n  private generateRecommendations(phases: PhasePerformance[], issues: string[]): string[] {\n    const recommendations: string[] = []\n\n    // 基于问题生成建议\n    recommendations.push(...issues)\n\n    // 基于整体分析生成建议\n    const totalDuration = phases.reduce((sum, phase) => sum + phase.duration, 0)\n    const slowestPhase = phases.reduce((slowest, phase) =>\n      phase.duration > slowest.duration ? phase : slowest\n    )\n\n    if (slowestPhase.duration > totalDuration * 0.5) {\n      recommendations.push(`${slowestPhase.phase} 阶段占用了超过50%的构建时间，建议重点优化此阶段`)\n      recommendations.push(this.getSuggestionForSlowPhase(slowestPhase.phase))\n    }\n\n    // 内存使用建议\n    phases.forEach(phase => {\n      const memoryPeak = phase.memoryUsage?.peak || 0\n      const memoryThreshold = 10 * 1024 * 1024 // 10MB - 更适合前端构建工具\n\n      if (memoryPeak > memoryThreshold) {\n        recommendations.push(`${phase.phase} 阶段内存使用过高 (${Math.round(memoryPeak / 1024 / 1024)}MB)`)\n        recommendations.push(this.getSuggestionForHighMemory(phase.phase))\n      }\n    })\n\n    // 缓存相关建议\n    const totalCacheOps = phases.reduce((sum, phase) =>\n      sum + phase.metrics.cacheHits + phase.metrics.cacheMisses, 0\n    )\n    const totalCacheHits = phases.reduce((sum, phase) => sum + phase.metrics.cacheHits, 0)\n\n    if (totalCacheOps > 0) {\n      const overallHitRate = (totalCacheHits / totalCacheOps) * 100\n      if (overallHitRate < 70) {\n        recommendations.push(`整体缓存命中率为 ${overallHitRate.toFixed(1)}%，建议优化缓存策略`)\n      }\n    }\n\n    return [...new Set(recommendations)] // 去重\n  }\n\n  /**\n   * 生成摘要\n   */\n  private generateSummary(phases: PhasePerformance[]) {\n    if (phases.length === 0) {\n      return {\n        averagePhaseTime: 0,\n        memoryEfficiency: 100,\n        cacheHitRate: 0,\n        parallelizationOpportunities: []\n      }\n    }\n\n    const totalDuration = phases.reduce((sum, phase) => sum + phase.duration, 0)\n    const averagePhaseTime = totalDuration / phases.length\n\n    const totalCacheOps = phases.reduce((sum, phase) =>\n      sum + phase.metrics.cacheHits + phase.metrics.cacheMisses, 0\n    )\n    const totalCacheHits = phases.reduce((sum, phase) => sum + phase.metrics.cacheHits, 0)\n    const cacheHitRate = totalCacheOps > 0 ? (totalCacheHits / totalCacheOps) * 100 : 0\n\n    // 计算内存效率（优化计算逻辑）\n    const memoryUsages = phases.map(phase => phase.metrics.memoryUsage?.peak || 0).filter(m => m > 0)\n    const memoryEfficiency = this.calculateMemoryEfficiency(memoryUsages)\n\n    // 识别并行化机会\n    const parallelizationOpportunities: string[] = []\n    const longPhases = phases.filter(phase => phase.duration > averagePhaseTime * 1.5)\n    if (longPhases.length > 0) {\n      parallelizationOpportunities.push(`可以并行化的阶段: ${longPhases.map(p => p.phase).join(', ')}`)\n    }\n\n    return {\n      averagePhaseTime,\n      memoryEfficiency,\n      cacheHitRate,\n      parallelizationOpportunities\n    }\n  }\n\n  /**\n   * 获取慢阶段的建议\n   */\n  private getSuggestionForSlowPhase(phase: BuildPhase): string {\n    const suggestions = {\n      'initialization': '考虑减少初始化时的配置验证和插件加载',\n      'dependency-resolution': '使用依赖缓存或减少不必要的依赖',\n      'file-scanning': '优化文件扫描模式，使用更精确的 glob 模式',\n      'compilation': '启用增量编译或使用更快的编译器',\n      'bundling': '考虑代码分割或并行打包',\n      'optimization': '调整优化级别或使用更快的压缩算法',\n      'output-generation': '优化输出文件写入，使用流式写入',\n      'validation': '减少验证规则或使用并行验证'\n    }\n\n    return suggestions[phase] || '考虑优化此阶段的实现逻辑'\n  }\n\n  /**\n   * 获取高内存使用的建议\n   */\n  private getSuggestionForHighMemory(phase: BuildPhase): string {\n    const suggestions: Record<BuildPhase, string> = {\n      'initialization': '优化初始化过程，延迟加载非必要模块',\n      'dependency-resolution': '使用流式依赖解析，避免一次性加载所有依赖',\n      'file-scanning': '使用流式文件读取，避免一次性加载大文件',\n      'compilation': '启用增量编译，避免一次性编译大量文件',\n      'bundling': '使用流式处理，避免将所有内容加载到内存',\n      'optimization': '分批处理优化任务，释放中间结果',\n      'output-generation': '使用流式输出生成，避免在内存中缓存大量数据',\n      'validation': '分批验证，避免同时验证所有文件'\n    }\n\n    return suggestions[phase] || '考虑使用流式处理和及时释放内存'\n  }\n\n  /**\n   * 获取历史分析数据\n   */\n  getHistory(): BuildPerformanceAnalysis[] {\n    return [...this.history]\n  }\n\n  /**\n   * 清除历史数据\n   */\n  clearHistory(): void {\n    this.history = []\n  }\n\n  /**\n   * 计算内存效率\n   */\n  private calculateMemoryEfficiency(memoryUsages: number[]): number {\n    if (memoryUsages.length === 0) return 100\n\n    const maxMemoryUsage = Math.max(...memoryUsages)\n    const memoryUsageGB = maxMemoryUsage / (1024 * 1024 * 1024)\n\n    // 基于内存使用量计算效率分数\n    // 1GB以下为100分，每增加1GB减少10分\n    return Math.max(0, 100 - memoryUsageGB * 10)\n  }\n}\n"]}