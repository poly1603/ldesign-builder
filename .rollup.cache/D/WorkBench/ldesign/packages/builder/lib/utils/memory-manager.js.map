{"version":3,"file":"memory-manager.js","sourceRoot":"","sources":["../../src/utils/memory-manager.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;AAEH,OAAO,EAAE,YAAY,EAAE,MAAM,QAAQ,CAAA;AA0BrC;;GAEG;AACH,MAAM,OAAO,eAAe;IAA5B;QACU,cAAS,GAAG,IAAI,GAAG,EAAwB,CAAA;QAC3C,WAAM,GAAG,IAAI,GAAG,EAAkB,CAAA;QAClC,aAAQ,GAAG,IAAI,GAAG,EAAO,CAAA;QACzB,cAAS,GAAG,IAAI,GAAG,EAAqD,CAAA;QACxE,gBAAW,GAAG,KAAK,CAAA;IA6K7B,CAAC;IA3KC;;OAEG;IACH,QAAQ,CAAC,EAAU,EAAE,QAAsB;QACzC,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;YACrB,iBAAiB;YACjB,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,MAAM,IAAI,OAAO,CAAC,GAAG,CAAC,MAAM,KAAK,MAAM,EAAE,CAAC;gBACrE,IAAI,CAAC,WAAW,GAAG,KAAK,CAAA;gBACxB,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAA;gBACtB,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAA;gBACnB,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAA;gBACrB,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAA;YACxB,CAAC;iBAAM,CAAC;gBACN,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAA;YACvD,CAAC;QACH,CAAC;QACD,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAA;IAClC,CAAC;IAED;;OAEG;IACH,UAAU,CAAC,EAAU;QACnB,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC,CAAA;QACvC,IAAI,QAAQ,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;YACtC,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAA;QAChC,CAAC;QACD,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAA;IAC3B,CAAC;IAED;;OAEG;IACH,QAAQ,CAAC,KAAqB;QAC5B,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;IACxB,CAAC;IAED;;OAEG;IACH,UAAU,CAAC,KAAqB;QAC9B,YAAY,CAAC,KAAK,CAAC,CAAA;QACnB,aAAa,CAAC,KAAK,CAAC,CAAA;QACpB,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;IAC3B,CAAC;IAED;;OAEG;IACH,UAAU,CAAC,OAAY;QACrB,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;IAC5B,CAAC;IAED;;OAEG;IACH,aAAa,CAAC,OAAqB,EAAE,KAAsB,EAAE,QAAkB;QAC7E,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC;YACjC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,GAAG,EAAE,CAAC,CAAA;QACxC,CAAC;QACD,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAE,CAAA;QAC3C,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC;YACvB,MAAM,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,GAAG,EAAE,CAAC,CAAA;QAC9B,CAAC;QACD,MAAM,CAAC,GAAG,CAAC,KAAK,CAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;IAClC,CAAC;IAED;;OAEG;IACH,eAAe,CAAC,OAAqB,EAAE,KAAsB,EAAE,QAAkB;QAC/E,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;QAC1C,IAAI,CAAC,MAAM;YAAE,OAAM;QAEnB,MAAM,SAAS,GAAG,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;QACnC,IAAI,SAAS,EAAE,CAAC;YACd,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAA;YAC1B,IAAI,SAAS,CAAC,IAAI,KAAK,CAAC,EAAE,CAAC;gBACzB,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;YACtB,CAAC;QACH,CAAC;QAED,IAAI,MAAM,CAAC,IAAI,KAAK,CAAC,EAAE,CAAC;YACtB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,CAAA;QAChC,CAAC;IACH,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,eAAe,CAAC,QAAsB;QAClD,IAAI,QAAQ,CAAC,WAAW;YAAE,OAAM;QAEhC,IAAI,CAAC;YACH,MAAM,QAAQ,CAAC,OAAO,EAAE,CAAA;YACxB,QAAQ,CAAC,WAAW,GAAG,IAAI,CAAA;QAC7B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,CAAA;QACjC,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,OAAO;QACX,IAAI,IAAI,CAAC,WAAW;YAAE,OAAM;QAE5B,UAAU;QACV,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;YAChC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAA;QACxB,CAAC;QACD,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAA;QAEnB,YAAY;QACZ,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YACpC,IAAI,OAAO,IAAI,OAAO,OAAO,CAAC,KAAK,KAAK,UAAU,EAAE,CAAC;gBACnD,IAAI,CAAC;oBACH,MAAM,OAAO,CAAC,KAAK,EAAE,CAAA;gBACvB,CAAC;gBAAC,OAAO,KAAK,EAAE,CAAC;oBACf,OAAO,CAAC,KAAK,CAAC,YAAY,EAAE,KAAK,CAAC,CAAA;gBACpC,CAAC;YACH,CAAC;QACH,CAAC;QACD,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAA;QAErB,YAAY;QACZ,KAAK,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;YAC/C,KAAK,MAAM,CAAC,KAAK,EAAE,SAAS,CAAC,IAAI,MAAM,EAAE,CAAC;gBACxC,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE,CAAC;oBACjC,IAAI,CAAC;wBACH,OAAO,CAAC,cAAc,CAAC,KAAK,EAAE,QAAe,CAAC,CAAA;oBAChD,CAAC;oBAAC,OAAO,KAAK,EAAE,CAAC;wBACf,OAAO,CAAC,KAAK,CAAC,YAAY,EAAE,KAAK,CAAC,CAAA;oBACpC,CAAC;gBACH,CAAC;YACH,CAAC;QACH,CAAC;QACD,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAA;QAEtB,YAAY;QACZ,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,CAAC;YAC/C,MAAM,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAA;QACtC,CAAC;QACD,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAA;QAEtB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAA;IACzB,CAAC;IAED;;OAEG;IACH,QAAQ;QAMN,IAAI,aAAa,GAAG,CAAC,CAAA;QACrB,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,CAAC;YAC7C,KAAK,MAAM,SAAS,IAAI,MAAM,CAAC,MAAM,EAAE,EAAE,CAAC;gBACxC,aAAa,IAAI,SAAS,CAAC,IAAI,CAAA;YACjC,CAAC;QACH,CAAC;QAED,OAAO;YACL,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI;YAC9B,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI;YACxB,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI;YAC5B,SAAS,EAAE,aAAa;SACzB,CAAA;IACH,CAAC;CACF;AAED;;GAEG;AACH,MAAM,OAAO,aAAc,SAAQ,YAAY;IAQ7C,YAAY,UAAgC,EAAE;QAC5C,KAAK,EAAE,CAAA;QAPD,oBAAe,GAAG,IAAI,eAAe,EAAE,CAAA;QAGvC,oBAAe,GAAmD,EAAE,CAAA;QACpE,iBAAY,GAAG,GAAG,CAAA;QAKxB,IAAI,CAAC,OAAO,GAAG;YACb,gBAAgB,EAAE,KAAK;YACvB,eAAe,EAAE,GAAG,EAAE,QAAQ;YAC9B,eAAe,EAAE,KAAK,EAAE,MAAM;YAC9B,kBAAkB,EAAE,KAAK,EAAE,MAAM;YACjC,WAAW,EAAE,IAAI;YACjB,GAAG,OAAO;SACX,CAAA;QAED,IAAI,CAAC,UAAU,EAAE,CAAA;IACnB,CAAC;IAED;;OAEG;IACK,UAAU;QAChB,IAAI,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE,CAAC;YAClC,IAAI,CAAC,eAAe,EAAE,CAAA;QACxB,CAAC;QAED,IAAI,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;YAC7B,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC,GAAG,EAAE;gBACtC,IAAI,CAAC,cAAc,EAAE,CAAA;YACvB,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,CAAA;YAChC,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,IAAI,CAAC,eAAe,CAAC,CAAA;QACrD,CAAC;QAED,WAAW;QACX,OAAO,CAAC,EAAE,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAA;QACxC,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAA;QAC1C,OAAO,CAAC,EAAE,CAAC,SAAS,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAA;IAC7C,CAAC;IAED;;OAEG;IACK,eAAe;QACrB,IAAI,IAAI,CAAC,kBAAkB;YAAE,OAAM;QAEnC,mBAAmB;QACnB,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,kBAAkB,IAAI,KAAK,CAAA;QACzD,IAAI,CAAC,kBAAkB,GAAG,WAAW,CAAC,GAAG,EAAE;YACzC,IAAI,CAAC,gBAAgB,EAAE,CAAA;QACzB,CAAC,EAAE,QAAQ,CAAC,CAAA;QAEZ,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAA;IACxD,CAAC;IAED;;OAEG;IACK,gBAAgB;QACtB,MAAM,QAAQ,GAAG,OAAO,CAAC,WAAW,EAAE,CAAA;QACtC,MAAM,UAAU,GAAG,QAAQ,CAAC,QAAQ,GAAG,IAAI,GAAG,IAAI,CAAA;QAElD,OAAO;QACP,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;YACxB,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;YACrB,QAAQ,EAAE,QAAQ,CAAC,QAAQ;SAC5B,CAAC,CAAA;QAEF,SAAS;QACT,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;YACpD,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,CAAA;QAC9B,CAAC;QAED,WAAW;QACX,IAAI,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE,CAAC;YAC9C,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;gBACzB,UAAU;gBACV,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,eAAe;gBACvC,QAAQ;aACT,CAAC,CAAA;YAEF,eAAe;YACf,IAAI,MAAM,CAAC,EAAE,EAAE,CAAC;gBACd,MAAM,CAAC,EAAE,EAAE,CAAA;YACb,CAAC;QACH,CAAC;QAED,SAAS;QACT,IAAI,CAAC,gBAAgB,EAAE,CAAA;IACzB,CAAC;IAED;;OAEG;IACK,gBAAgB;QACtB,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,EAAE;YAAE,OAAM;QAE5C,MAAM,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAA;QAC9C,MAAM,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC,CAAA;QACxB,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA;QAExC,MAAM,QAAQ,GAAG,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,CAAA;QACpD,MAAM,QAAQ,GAAG,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAA;QAElD,uBAAuB;QACvB,MAAM,UAAU,GAAG,QAAQ,GAAG,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAA;QAE/C,uBAAuB;QACvB,IAAI,UAAU,GAAG,IAAI,GAAG,IAAI,EAAE,CAAC;YAC7B,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;gBACtB,UAAU,EAAE,UAAU,GAAG,IAAI,GAAG,IAAI,EAAE,OAAO;gBAC7C,QAAQ,EAAE,QAAQ,GAAG,IAAI,EAAE,UAAU;gBACrC,QAAQ,EAAE,QAAQ,GAAG,IAAI,GAAG,IAAI,CAAC,KAAK;aACvC,CAAC,CAAA;QACJ,CAAC;IACH,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,cAAc;QAC1B,IAAI,CAAC;YACH,aAAa;YACb,MAAM,SAAS,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAA;YAEhD,SAAS;YACT,MAAM,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,CAAA;YAEpC,SAAS;YACT,IAAI,MAAM,CAAC,EAAE,EAAE,CAAC;gBACd,MAAM,CAAC,EAAE,EAAE,CAAA;YACb,CAAC;YAED,SAAS;YACT,MAAM,QAAQ,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAA;YAC/C,MAAM,OAAO,GAAG,CAAC,SAAS,GAAG,QAAQ,CAAC,GAAG,IAAI,GAAG,IAAI,CAAA;YAEpD,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE;gBAC5B,OAAO,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,CAAC;gBAC7B,KAAK,EAAE,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE;aACvC,CAAC,CAAA;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,KAAK,CAAC,CAAA;QAClC,CAAC;IACH,CAAC;IAED;;OAEG;IACH,kBAAkB;QAChB,OAAO,IAAI,CAAC,eAAe,CAAA;IAC7B,CAAC;IAED;;OAEG;IACH,cAAc;QAKZ,MAAM,OAAO,GAAG,OAAO,CAAC,WAAW,EAAE,CAAA;QAErC,IAAI,KAAK,GAA2C,QAAQ,CAAA;QAC5D,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,IAAI,CAAC,EAAE,CAAC;YACrC,MAAM,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAA;YAC7C,MAAM,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAA;YAChC,MAAM,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAA;YAC/C,MAAM,IAAI,GAAG,IAAI,GAAG,KAAK,CAAA;YAEzB,IAAI,IAAI,GAAG,EAAE,GAAG,IAAI,GAAG,IAAI,EAAE,CAAC,CAAC,OAAO;gBACpC,KAAK,GAAG,YAAY,CAAA;YACtB,CAAC;iBAAM,IAAI,IAAI,GAAG,CAAC,EAAE,GAAG,IAAI,GAAG,IAAI,EAAE,CAAC;gBACpC,KAAK,GAAG,YAAY,CAAA;YACtB,CAAC;QACH,CAAC;QAED,OAAO;YACL,OAAO;YACP,OAAO,EAAE,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC;YAClC,KAAK;SACN,CAAA;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,OAAO;QACX,MAAM,IAAI,CAAC,cAAc,EAAE,CAAA;IAC7B,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,OAAO;QACX,OAAO;QACP,IAAI,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAC5B,aAAa,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAA;YACtC,IAAI,CAAC,kBAAkB,GAAG,SAAS,CAAA;QACrC,CAAC;QAED,IAAI,IAAI,CAAC,eAAe,EAAE,CAAC;YACzB,aAAa,CAAC,IAAI,CAAC,eAAe,CAAC,CAAA;YACnC,IAAI,CAAC,eAAe,GAAG,SAAS,CAAA;QAClC,CAAC;QAED,OAAO;QACP,MAAM,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,CAAA;QAEpC,OAAO;QACP,IAAI,CAAC,eAAe,GAAG,EAAE,CAAA;QAEzB,UAAU;QACV,IAAI,CAAC,kBAAkB,EAAE,CAAA;IAC3B,CAAC;CACF;AAED;;GAEG;AACH,IAAI,mBAAmB,GAAyB,IAAI,CAAA;AAEpD,MAAM,UAAU,sBAAsB;IACpC,IAAI,CAAC,mBAAmB,EAAE,CAAC;QACzB,mBAAmB,GAAG,IAAI,aAAa,CAAC;YACtC,gBAAgB,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY;YACvD,eAAe,EAAE,GAAG;YACpB,eAAe,EAAE,KAAK;YACtB,WAAW,EAAE,IAAI;SAClB,CAAC,CAAA;IACJ,CAAC;IACD,OAAO,mBAAmB,CAAA;AAC5B,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,wBAAwB;IACtC,IAAI,mBAAmB,EAAE,CAAC;QACxB,mBAAmB,CAAC,OAAO,EAAE,CAAA;QAC7B,mBAAmB,GAAG,IAAI,CAAA;IAC5B,CAAC;AACH,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,iBAAiB,CAC/B,QAAW,EACX,SAAgD;IAEhD,OAAO,MAAM,CAAC,MAAM,CAAC,QAAe,EAAE;QACpC,OAAO,EAAE,GAAG,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC;QAClC,WAAW,EAAE,KAAK;KACnB,CAAqB,CAAA;AACxB,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,eAAe,CAAC,MAAW,EAAE,WAAmB,EAAE,UAA8B;IAC9F,MAAM,cAAc,GAAG,UAAU,CAAC,KAAK,CAAA;IAEvC,UAAU,CAAC,KAAK,GAAG,KAAK,WAAqB,GAAG,IAAW;QACzD,MAAM,aAAa,GAAG,sBAAsB,EAAE,CAAA;QAC9C,MAAM,eAAe,GAAG,aAAa,CAAC,kBAAkB,EAAE,CAAA;QAC1D,MAAM,UAAU,GAAG,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,IAAI,WAAW,IAAI,IAAI,CAAC,GAAG,EAAE,EAAE,CAAA;QAE5E,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;YAErD,mBAAmB;YACnB,IAAI,MAAM,IAAI,OAAO,MAAM,CAAC,OAAO,KAAK,UAAU,EAAE,CAAC;gBACnD,eAAe,CAAC,QAAQ,CAAC,UAAU,EAAE,MAAM,CAAC,CAAA;YAC9C,CAAC;YAED,OAAO,MAAM,CAAA;QACf,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,UAAU;YACV,eAAe,CAAC,UAAU,CAAC,UAAU,CAAC,CAAA;YACtC,MAAM,KAAK,CAAA;QACb,CAAC;IACH,CAAC,CAAA;IAED,OAAO,UAAU,CAAA;AACnB,CAAC","sourcesContent":["/**\r\n * 内存管理器 - 防止内存泄漏和优化内存使用\r\n * \r\n * @author LDesign Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { EventEmitter } from 'events'\r\n\r\n/**\r\n * 资源清理接口\r\n */\r\nexport interface ICleanupable {\r\n  cleanup(): void | Promise<void>\r\n  isCleanedUp?: boolean\r\n}\r\n\r\n/**\r\n * 内存管理器选项\r\n */\r\nexport interface MemoryManagerOptions {\r\n  /** 是否启用内存监控 */\r\n  enableMonitoring?: boolean\r\n  /** 内存使用警告阈值(MB) */\r\n  memoryThreshold?: number\r\n  /** 清理间隔(ms) */\r\n  cleanupInterval?: number\r\n  /** 监控间隔(ms) */\r\n  monitoringInterval?: number\r\n  /** 是否自动清理 */\r\n  autoCleanup?: boolean\r\n}\r\n\r\n/**\r\n * 资源管理器类\r\n */\r\nexport class ResourceManager implements ICleanupable {\r\n  private resources = new Map<string, ICleanupable>()\r\n  private timers = new Set<NodeJS.Timeout>()\r\n  private watchers = new Set<any>()\r\n  private listeners = new Map<EventEmitter, Map<string | symbol, Set<Function>>>()\r\n  private isDestroyed = false\r\n\r\n  /**\r\n   * 注册资源\r\n   */\r\n  register(id: string, resource: ICleanupable): void {\r\n    if (this.isDestroyed) {\r\n      // 在测试环境中，允许重新初始化\r\n      if (process.env.NODE_ENV === 'test' || process.env.VITEST === 'true') {\r\n        this.isDestroyed = false\r\n        this.resources.clear()\r\n        this.timers.clear()\r\n        this.watchers.clear()\r\n        this.listeners.clear()\r\n      } else {\r\n        throw new Error('ResourceManager has been destroyed')\r\n      }\r\n    }\r\n    this.resources.set(id, resource)\r\n  }\r\n\r\n  /**\r\n   * 注销资源\r\n   */\r\n  unregister(id: string): void {\r\n    const resource = this.resources.get(id)\r\n    if (resource && !resource.isCleanedUp) {\r\n      this.cleanupResource(resource)\r\n    }\r\n    this.resources.delete(id)\r\n  }\r\n\r\n  /**\r\n   * 添加定时器\r\n   */\r\n  addTimer(timer: NodeJS.Timeout): void {\r\n    this.timers.add(timer)\r\n  }\r\n\r\n  /**\r\n   * 清除定时器\r\n   */\r\n  clearTimer(timer: NodeJS.Timeout): void {\r\n    clearTimeout(timer)\r\n    clearInterval(timer)\r\n    this.timers.delete(timer)\r\n  }\r\n\r\n  /**\r\n   * 添加文件监听器\r\n   */\r\n  addWatcher(watcher: any): void {\r\n    this.watchers.add(watcher)\r\n  }\r\n\r\n  /**\r\n   * 添加事件监听器追踪\r\n   */\r\n  trackListener(emitter: EventEmitter, event: string | symbol, listener: Function): void {\r\n    if (!this.listeners.has(emitter)) {\r\n      this.listeners.set(emitter, new Map())\r\n    }\r\n    const events = this.listeners.get(emitter)!\r\n    if (!events.has(event)) {\r\n      events.set(event, new Set())\r\n    }\r\n    events.get(event)!.add(listener)\r\n  }\r\n\r\n  /**\r\n   * 移除事件监听器追踪\r\n   */\r\n  untrackListener(emitter: EventEmitter, event: string | symbol, listener: Function): void {\r\n    const events = this.listeners.get(emitter)\r\n    if (!events) return\r\n\r\n    const listeners = events.get(event)\r\n    if (listeners) {\r\n      listeners.delete(listener)\r\n      if (listeners.size === 0) {\r\n        events.delete(event)\r\n      }\r\n    }\r\n\r\n    if (events.size === 0) {\r\n      this.listeners.delete(emitter)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 清理单个资源\r\n   */\r\n  private async cleanupResource(resource: ICleanupable): Promise<void> {\r\n    if (resource.isCleanedUp) return\r\n\r\n    try {\r\n      await resource.cleanup()\r\n      resource.isCleanedUp = true\r\n    } catch (error) {\r\n      console.error('资源清理失败:', error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 清理所有资源\r\n   */\r\n  async cleanup(): Promise<void> {\r\n    if (this.isDestroyed) return\r\n\r\n    // 清理所有定时器\r\n    for (const timer of this.timers) {\r\n      this.clearTimer(timer)\r\n    }\r\n    this.timers.clear()\r\n\r\n    // 清理所有文件监听器\r\n    for (const watcher of this.watchers) {\r\n      if (watcher && typeof watcher.close === 'function') {\r\n        try {\r\n          await watcher.close()\r\n        } catch (error) {\r\n          console.error('关闭文件监听器失败:', error)\r\n        }\r\n      }\r\n    }\r\n    this.watchers.clear()\r\n\r\n    // 清理所有事件监听器\r\n    for (const [emitter, events] of this.listeners) {\r\n      for (const [event, listeners] of events) {\r\n        for (const listener of listeners) {\r\n          try {\r\n            emitter.removeListener(event, listener as any)\r\n          } catch (error) {\r\n            console.error('移除事件监听器失败:', error)\r\n          }\r\n        }\r\n      }\r\n    }\r\n    this.listeners.clear()\r\n\r\n    // 清理所有注册的资源\r\n    for (const resource of this.resources.values()) {\r\n      await this.cleanupResource(resource)\r\n    }\r\n    this.resources.clear()\r\n\r\n    this.isDestroyed = true\r\n  }\r\n\r\n  /**\r\n   * 获取资源统计\r\n   */\r\n  getStats(): {\r\n    resources: number\r\n    timers: number\r\n    watchers: number\r\n    listeners: number\r\n  } {\r\n    let listenerCount = 0\r\n    for (const events of this.listeners.values()) {\r\n      for (const listeners of events.values()) {\r\n        listenerCount += listeners.size\r\n      }\r\n    }\r\n\r\n    return {\r\n      resources: this.resources.size,\r\n      timers: this.timers.size,\r\n      watchers: this.watchers.size,\r\n      listeners: listenerCount\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 内存管理器类\r\n */\r\nexport class MemoryManager extends EventEmitter {\r\n  private options: Required<MemoryManagerOptions>\r\n  private resourceManager = new ResourceManager()\r\n  private monitoringInterval?: NodeJS.Timeout\r\n  private cleanupInterval?: NodeJS.Timeout\r\n  private memorySnapshots: Array<{ timestamp: number; heapUsed: number }> = []\r\n  private maxSnapshots = 100\r\n\r\n  constructor(options: MemoryManagerOptions = {}) {\r\n    super()\r\n\r\n    this.options = {\r\n      enableMonitoring: false,\r\n      memoryThreshold: 500, // 500MB\r\n      cleanupInterval: 60000, // 1分钟\r\n      monitoringInterval: 10000, // 10秒\r\n      autoCleanup: true,\r\n      ...options\r\n    }\r\n\r\n    this.initialize()\r\n  }\r\n\r\n  /**\r\n   * 初始化内存管理器\r\n   */\r\n  private initialize(): void {\r\n    if (this.options.enableMonitoring) {\r\n      this.startMonitoring()\r\n    }\r\n\r\n    if (this.options.autoCleanup) {\r\n      this.cleanupInterval = setInterval(() => {\r\n        this.performCleanup()\r\n      }, this.options.cleanupInterval)\r\n      this.resourceManager.addTimer(this.cleanupInterval)\r\n    }\r\n\r\n    // 监听进程退出事件\r\n    process.on('exit', () => this.destroy())\r\n    process.on('SIGINT', () => this.destroy())\r\n    process.on('SIGTERM', () => this.destroy())\r\n  }\r\n\r\n  /**\r\n   * 开始内存监控\r\n   */\r\n  private startMonitoring(): void {\r\n    if (this.monitoringInterval) return\r\n\r\n    // 使用配置的监控间隔，而不是硬编码\r\n    const interval = this.options.monitoringInterval || 10000\r\n    this.monitoringInterval = setInterval(() => {\r\n      this.checkMemoryUsage()\r\n    }, interval)\r\n\r\n    this.resourceManager.addTimer(this.monitoringInterval)\r\n  }\r\n\r\n  /**\r\n   * 检查内存使用\r\n   */\r\n  private checkMemoryUsage(): void {\r\n    const memUsage = process.memoryUsage()\r\n    const heapUsedMB = memUsage.heapUsed / 1024 / 1024\r\n\r\n    // 记录快照\r\n    this.memorySnapshots.push({\r\n      timestamp: Date.now(),\r\n      heapUsed: memUsage.heapUsed\r\n    })\r\n\r\n    // 限制快照数量\r\n    if (this.memorySnapshots.length > this.maxSnapshots) {\r\n      this.memorySnapshots.shift()\r\n    }\r\n\r\n    // 检查是否超过阈值\r\n    if (heapUsedMB > this.options.memoryThreshold) {\r\n      this.emit('memoryWarning', {\r\n        heapUsedMB,\r\n        threshold: this.options.memoryThreshold,\r\n        memUsage\r\n      })\r\n\r\n      // 触发垃圾回收（如果可用）\r\n      if (global.gc) {\r\n        global.gc()\r\n      }\r\n    }\r\n\r\n    // 检测内存泄漏\r\n    this.detectMemoryLeak()\r\n  }\r\n\r\n  /**\r\n   * 检测内存泄漏\r\n   */\r\n  private detectMemoryLeak(): void {\r\n    if (this.memorySnapshots.length < 10) return\r\n\r\n    const recent = this.memorySnapshots.slice(-10)\r\n    const oldest = recent[0]\r\n    const newest = recent[recent.length - 1]\r\n\r\n    const timeDiff = newest.timestamp - oldest.timestamp\r\n    const heapDiff = newest.heapUsed - oldest.heapUsed\r\n\r\n    // 计算增长率 (bytes/second)\r\n    const growthRate = heapDiff / (timeDiff / 1000)\r\n\r\n    // 如果每秒增长超过1MB，可能存在内存泄漏\r\n    if (growthRate > 1024 * 1024) {\r\n      this.emit('memoryLeak', {\r\n        growthRate: growthRate / 1024 / 1024, // MB/s\r\n        duration: timeDiff / 1000, // seconds\r\n        increase: heapDiff / 1024 / 1024 // MB\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 执行清理\r\n   */\r\n  private async performCleanup(): Promise<void> {\r\n    try {\r\n      // 获取清理前的内存使用\r\n      const beforeMem = process.memoryUsage().heapUsed\r\n\r\n      // 执行资源清理\r\n      await this.resourceManager.cleanup()\r\n\r\n      // 触发垃圾回收\r\n      if (global.gc) {\r\n        global.gc()\r\n      }\r\n\r\n      // 计算清理效果\r\n      const afterMem = process.memoryUsage().heapUsed\r\n      const freedMB = (beforeMem - afterMem) / 1024 / 1024\r\n\r\n      this.emit('cleanupCompleted', {\r\n        freedMB: Math.max(0, freedMB),\r\n        stats: this.resourceManager.getStats()\r\n      })\r\n    } catch (error) {\r\n      this.emit('cleanupError', error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取资源管理器\r\n   */\r\n  getResourceManager(): ResourceManager {\r\n    return this.resourceManager\r\n  }\r\n\r\n  /**\r\n   * 获取内存使用统计\r\n   */\r\n  getMemoryStats(): {\r\n    current: NodeJS.MemoryUsage\r\n    history: Array<{ timestamp: number; heapUsed: number }>\r\n    trend: 'stable' | 'increasing' | 'decreasing'\r\n  } {\r\n    const current = process.memoryUsage()\r\n    \r\n    let trend: 'stable' | 'increasing' | 'decreasing' = 'stable'\r\n    if (this.memorySnapshots.length >= 5) {\r\n      const recent = this.memorySnapshots.slice(-5)\r\n      const first = recent[0].heapUsed\r\n      const last = recent[recent.length - 1].heapUsed\r\n      const diff = last - first\r\n      \r\n      if (diff > 10 * 1024 * 1024) { // 10MB\r\n        trend = 'increasing'\r\n      } else if (diff < -10 * 1024 * 1024) {\r\n        trend = 'decreasing'\r\n      }\r\n    }\r\n\r\n    return {\r\n      current,\r\n      history: [...this.memorySnapshots],\r\n      trend\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 手动触发清理\r\n   */\r\n  async cleanup(): Promise<void> {\r\n    await this.performCleanup()\r\n  }\r\n\r\n  /**\r\n   * 销毁内存管理器\r\n   */\r\n  async destroy(): Promise<void> {\r\n    // 停止监控\r\n    if (this.monitoringInterval) {\r\n      clearInterval(this.monitoringInterval)\r\n      this.monitoringInterval = undefined\r\n    }\r\n\r\n    if (this.cleanupInterval) {\r\n      clearInterval(this.cleanupInterval)\r\n      this.cleanupInterval = undefined\r\n    }\r\n\r\n    // 清理资源\r\n    await this.resourceManager.cleanup()\r\n\r\n    // 清空快照\r\n    this.memorySnapshots = []\r\n\r\n    // 移除所有监听器\r\n    this.removeAllListeners()\r\n  }\r\n}\r\n\r\n/**\r\n * 创建全局内存管理器实例\r\n */\r\nlet globalMemoryManager: MemoryManager | null = null\r\n\r\nexport function getGlobalMemoryManager(): MemoryManager {\r\n  if (!globalMemoryManager) {\r\n    globalMemoryManager = new MemoryManager({\r\n      enableMonitoring: process.env.NODE_ENV !== 'production',\r\n      memoryThreshold: 500,\r\n      cleanupInterval: 60000,\r\n      autoCleanup: true\r\n    })\r\n  }\r\n  return globalMemoryManager\r\n}\r\n\r\n/**\r\n * 重置全局内存管理器（主要用于测试）\r\n */\r\nexport function resetGlobalMemoryManager(): void {\r\n  if (globalMemoryManager) {\r\n    globalMemoryManager.destroy()\r\n    globalMemoryManager = null\r\n  }\r\n}\r\n\r\n/**\r\n * 创建可清理的资源包装器\r\n */\r\nexport function createCleanupable<T extends object>(\r\n  resource: T,\r\n  cleanupFn: (resource: T) => void | Promise<void>\r\n): T & ICleanupable {\r\n  return Object.assign(resource as any, {\r\n    cleanup: () => cleanupFn(resource),\r\n    isCleanedUp: false\r\n  }) as T & ICleanupable\r\n}\r\n\r\n/**\r\n * 装饰器：自动管理资源生命周期\r\n */\r\nexport function managedResource(target: any, propertyKey: string, descriptor: PropertyDescriptor) {\r\n  const originalMethod = descriptor.value\r\n\r\n  descriptor.value = async function(this: any, ...args: any[]) {\r\n    const memoryManager = getGlobalMemoryManager()\r\n    const resourceManager = memoryManager.getResourceManager()\r\n    const resourceId = `${target.constructor.name}.${propertyKey}_${Date.now()}`\r\n\r\n    try {\r\n      const result = await originalMethod.apply(this, args)\r\n\r\n      // 如果返回值是可清理的资源，注册它\r\n      if (result && typeof result.cleanup === 'function') {\r\n        resourceManager.register(resourceId, result)\r\n      }\r\n\r\n      return result\r\n    } catch (error) {\r\n      // 出错时确保清理\r\n      resourceManager.unregister(resourceId)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  return descriptor\r\n}"]}