{"version":3,"file":"config.js","sourceRoot":"","sources":["../../src/types/config.ts"],"names":[],"mappings":"AAAA;;GAEG","sourcesContent":["/**\r\n * 配置相关类型定义\r\n */\r\n\r\nimport type {\r\n  LogLevel,\r\n  BuildMode,\r\n  FilePath,\r\n  ValidationResult,\r\n  ConfigSchema,\r\n  CacheOptions,\r\n  WatchOptions,\r\n  EnvironmentVariables,\r\n  KeyValueMap\r\n} from './common'\r\nimport type {\r\n  LibraryType,\r\n  TypeScriptLibraryConfig,\r\n  VueLibraryConfig,\r\n  VueJsxConfig,\r\n  StyleLibraryConfig,\r\n  LibraryBuildOptions\r\n} from './library'\r\nimport type { OutputConfig, SourcemapType } from './output'\r\nimport type { PerformanceConfig } from './performance'\r\nimport type { UnifiedPlugin } from './plugin'\r\nimport type { PostBuildValidationConfig } from './validation'\r\nimport type { MinifyOptions } from './minify'\r\n\r\n/**\r\n * 构建器主配置接口\r\n */\r\nexport interface BuilderConfig {\r\n  /** 入口文件（可选；未提供时将根据策略自动发现或使用默认值） */\r\n  input?: string | string[] | Record<string, string>\r\n\r\n  /** 输出配置 */\r\n  output?: OutputConfig\r\n\r\n  /** 是否生成类型声明文件（顶层开关，具体格式可覆盖） */\r\n  dts?: boolean\r\n\r\n  /** 是否生成 sourcemap（顶层开关，具体格式可覆盖） */\r\n  sourcemap?: SourcemapType\r\n\r\n  /** 打包核心选择 */\r\n  bundler?: 'rollup' | 'rolldown'\r\n\r\n  /** 构建模式 */\r\n  mode?: BuildMode\r\n\r\n  /** 库类型（自动检测或手动指定） */\r\n  libraryType?: LibraryType\r\n\r\n  /** 是否启用 bundleless 模式 */\r\n  bundleless?: boolean\r\n\r\n  /** 外部依赖 */\r\n  external?: string[] | ((id: string) => boolean)\r\n\r\n  /** 全局变量映射 */\r\n  globals?: Record<string, string>\r\n\r\n  /** 排除的文件模式 */\r\n  exclude?: string[]\r\n\r\n  /** 插件配置 */\r\n  plugins?: UnifiedPlugin[]\r\n\r\n  /** 压缩配置 */\r\n  minify?: boolean | MinifyOptions\r\n\r\n  /** UMD 构建配置 */\r\n  umd?: UMDConfig\r\n\r\n  /** Babel 转换配置 */\r\n  babel?: BabelConfig\r\n\r\n  /** Banner 和 Footer 配置 */\r\n  banner?: BannerConfig\r\n\r\n  /** 是否清理输出目录 */\r\n  clean?: boolean\r\n\r\n  /** TypeScript 配置 */\r\n  typescript?: TypeScriptLibraryConfig\r\n\r\n  /** Vue 配置 */\r\n  vue?: VueLibraryConfig\r\n\r\n  /** Vue JSX 配置 */\r\n  vueJsx?: VueJsxConfig\r\n\r\n  /** 样式配置 */\r\n  style?: StyleLibraryConfig\r\n\r\n  /** 性能配置 */\r\n  performance?: PerformanceConfig\r\n\r\n  /** 调试配置 */\r\n  debug?: boolean\r\n\r\n  /** 环境特定配置 */\r\n  env?: Record<string, Partial<BuilderConfig>>\r\n\r\n  /** 缓存配置 */\r\n  cache?: CacheOptions\r\n\r\n  /** 监听配置 */\r\n  watch?: WatchOptions\r\n\r\n  /** 自定义环境变量 */\r\n  define?: EnvironmentVariables\r\n\r\n  /** 工作目录 */\r\n  cwd?: FilePath\r\n\r\n  /** 配置文件路径 */\r\n  configFile?: FilePath\r\n\r\n  /** 日志级别 */\r\n  logLevel?: LogLevel\r\n\r\n  /** 库构建选项 */\r\n  library?: LibraryBuildOptions\r\n\r\n  /** 打包后验证配置 */\r\n  postBuildValidation?: PostBuildValidationConfig\r\n\r\n  /** Package.json 自动更新配置 */\r\n  packageUpdate?: PackageUpdateConfig\r\n}\r\n\r\n/**\r\n * 配置管理器选项\r\n */\r\nexport interface ConfigManagerOptions {\r\n  /** 配置文件路径 */\r\n  configFile?: string\r\n\r\n  /** 是否监听配置文件变化 */\r\n  watch?: boolean\r\n\r\n  /** 配置验证模式 */\r\n  schema?: ConfigSchema\r\n\r\n  /** 是否在加载时验证 */\r\n  validateOnLoad?: boolean\r\n\r\n  /** 是否冻结配置 */\r\n  freezeConfig?: boolean\r\n\r\n  /** 日志记录器 */\r\n  logger?: any\r\n\r\n  /** 缓存目录 */\r\n  cacheDir?: string\r\n\r\n  /** 环境变量前缀 */\r\n  envPrefix?: string\r\n}\r\n\r\n/**\r\n * 配置加载选项\r\n */\r\nexport interface ConfigLoadOptions {\r\n  /** 配置文件路径 */\r\n  configFile?: string\r\n\r\n  /** 是否合并环境变量 */\r\n  mergeEnv?: boolean\r\n\r\n  /** 是否应用环境特定配置 */\r\n  applyEnvConfig?: boolean\r\n\r\n  /** 是否验证配置 */\r\n  validate?: boolean\r\n\r\n  /** 是否使用缓存 */\r\n  useCache?: boolean\r\n\r\n  /** 是否自动增强配置（自动检测 libraryType、external、globals 等） */\r\n  autoEnhance?: boolean\r\n}\r\n\r\n/**\r\n * 配置合并选项\r\n */\r\nexport interface ConfigMergeOptions {\r\n  /** 是否深度合并 */\r\n  deep?: boolean\r\n\r\n  /** 数组合并策略 */\r\n  arrayMergeStrategy?: 'replace' | 'concat' | 'unique'\r\n\r\n  /** 是否合并函数 */\r\n  mergeFunctions?: boolean\r\n\r\n  /** 自定义合并函数 */\r\n  customMerger?: (target: any, source: any, key: string) => any\r\n}\r\n\r\n/**\r\n * 配置转换选项\r\n */\r\nexport interface ConfigTransformOptions {\r\n  /** 目标格式 */\r\n  target: 'rollup' | 'rolldown'\r\n\r\n  /** 是否保留未知选项 */\r\n  preserveUnknown?: boolean\r\n\r\n  /** 是否启用兼容模式 */\r\n  compatMode?: boolean\r\n\r\n  /** 自定义转换器 */\r\n  customTransformers?: Record<string, (value: any) => any>\r\n}\r\n\r\n/**\r\n * 配置验证选项\r\n */\r\nexport interface ConfigValidationOptions {\r\n  /** 验证模式 */\r\n  schema?: ConfigSchema\r\n\r\n  /** 是否允许额外属性 */\r\n  allowAdditionalProperties?: boolean\r\n\r\n  /** 是否启用严格模式 */\r\n  strict?: boolean\r\n\r\n  /** 自定义验证器 */\r\n  customValidators?: Record<string, (value: any) => ValidationResult>\r\n}\r\n\r\n/**\r\n * 配置文件类型\r\n */\r\nexport type ConfigFileType = 'ts' | 'js' | 'mjs' | 'json'\r\n\r\n/**\r\n * 配置文件信息\r\n */\r\nexport interface ConfigFileInfo {\r\n  /** 文件路径 */\r\n  path: string\r\n\r\n  /** 文件类型 */\r\n  type: ConfigFileType\r\n\r\n  /** 是否存在 */\r\n  exists: boolean\r\n\r\n  /** 最后修改时间 */\r\n  mtime?: Date\r\n\r\n  /** 文件大小 */\r\n  size?: number\r\n}\r\n\r\n/**\r\n * 配置变化回调\r\n */\r\nexport type ConfigChangeCallback = (config: BuilderConfig, configPath: string) => Promise<void> | void\r\n\r\n/**\r\n * 配置预设\r\n */\r\nexport interface ConfigPreset {\r\n  /** 预设名称 */\r\n  name: string\r\n\r\n  /** 预设描述 */\r\n  description?: string\r\n\r\n  /** 预设配置 */\r\n  config: Partial<BuilderConfig>\r\n\r\n  /** 适用条件 */\r\n  condition?: (projectInfo: any) => boolean\r\n\r\n  /** 扩展的预设 */\r\n  extends?: string[]\r\n}\r\n\r\n/**\r\n * 配置上下文\r\n */\r\nexport interface ConfigContext {\r\n  /** 当前工作目录 */\r\n  cwd: string\r\n\r\n  /** 构建模式 */\r\n  mode: BuildMode\r\n\r\n  /** 打包器类型 */\r\n  bundler: 'rollup' | 'rolldown'\r\n\r\n  /** 环境变量 */\r\n  env: EnvironmentVariables\r\n\r\n  /** 命令行参数 */\r\n  args: KeyValueMap\r\n\r\n  /** 项目信息 */\r\n  project?: any\r\n}\r\n\r\n/**\r\n * 配置函数类型\r\n */\r\nexport type ConfigFunction = (context: ConfigContext) => BuilderConfig | Promise<BuilderConfig>\r\n\r\n/**\r\n * 配置定义类型\r\n */\r\nexport type ConfigDefinition = BuilderConfig | ConfigFunction\r\n\r\n/**\r\n * 默认配置\r\n */\r\nexport interface DefaultConfig extends Required<Omit<BuilderConfig, 'env' | 'library'>> {\r\n  env: Record<string, Partial<BuilderConfig>>\r\n  library: Required<LibraryBuildOptions>\r\n}\r\n\r\n/**\r\n * 配置覆盖\r\n */\r\nexport type ConfigOverride = DeepPartial<BuilderConfig>\r\n\r\n/**\r\n * 配置解析结果\r\n */\r\nexport interface ConfigResolveResult {\r\n  /** 解析后的配置 */\r\n  config: BuilderConfig\r\n\r\n  /** 配置文件路径 */\r\n  configFile?: string\r\n\r\n  /** 配置来源 */\r\n  sources: ConfigSource[]\r\n\r\n  /** 验证结果 */\r\n  validation?: ValidationResult\r\n}\r\n\r\n/**\r\n * 配置来源\r\n */\r\nexport interface ConfigSource {\r\n  /** 来源类型 */\r\n  type: 'default' | 'file' | 'env' | 'cli' | 'preset'\r\n\r\n  /** 来源路径或名称 */\r\n  source: string\r\n\r\n  /** 优先级 */\r\n  priority: number\r\n\r\n  /** 配置内容 */\r\n  config: Partial<BuilderConfig>\r\n}\r\n\r\n/**\r\n * UMD 构建配置\r\n */\r\nexport interface UMDConfig {\r\n  /** 是否启用 UMD 构建 */\r\n  enabled?: boolean\r\n\r\n  /** UMD 入口文件（默认为 src/index.ts） */\r\n  entry?: string\r\n\r\n  /** UMD 全局变量名 */\r\n  name?: string\r\n\r\n  /** 是否为多入口项目强制生成 UMD */\r\n  forceMultiEntry?: boolean\r\n\r\n  /** UMD 输出文件名 */\r\n  fileName?: string\r\n\r\n  /** 外部依赖的全局变量映射 */\r\n  globals?: Record<string, string>\r\n\r\n  /** 是否压缩 UMD 文件 */\r\n  minify?: boolean\r\n}\r\n\r\n/**\r\n * Babel 转换配置\r\n */\r\nexport interface BabelConfig {\r\n  /** 是否启用 Babel 转换 */\r\n  enabled?: boolean\r\n\r\n  /** Babel 预设 */\r\n  presets?: Array<string | [string, any]>\r\n\r\n  /** Babel 插件 */\r\n  plugins?: Array<string | [string, any]>\r\n\r\n  /** 目标浏览器 */\r\n  targets?: string | string[] | Record<string, string>\r\n\r\n  /** 是否包含 polyfill */\r\n  polyfill?: boolean | 'usage' | 'entry'\r\n\r\n  /** 是否启用运行时转换 */\r\n  runtime?: boolean\r\n\r\n  /** 自定义 Babel 配置文件路径 */\r\n  configFile?: string | false\r\n\r\n  /** 是否忽略 .babelrc 文件 */\r\n  babelrc?: boolean\r\n\r\n  /** 排除转换的文件模式 */\r\n  exclude?: string | RegExp | Array<string | RegExp>\r\n\r\n  /** 包含转换的文件模式 */\r\n  include?: string | RegExp | Array<string | RegExp>\r\n}\r\n\r\n/**\r\n * Banner 和 Footer 配置\r\n */\r\nexport interface BannerConfig {\r\n  /** 代码前缀（banner） */\r\n  banner?: string | (() => string | Promise<string>)\r\n\r\n  /** 代码后缀（footer） */\r\n  footer?: string | (() => string | Promise<string>)\r\n\r\n  /** 模块前缀（intro） */\r\n  intro?: string | (() => string | Promise<string>)\r\n\r\n  /** 模块后缀（outro） */\r\n  outro?: string | (() => string | Promise<string>)\r\n\r\n  /** 是否自动生成版权信息 */\r\n  copyright?: boolean | CopyrightConfig\r\n\r\n  /** 是否包含构建信息 */\r\n  buildInfo?: boolean | BuildInfoConfig\r\n}\r\n\r\n/**\r\n * 版权信息配置\r\n */\r\nexport interface CopyrightConfig {\r\n  /** 版权所有者 */\r\n  owner?: string\r\n\r\n  /** 版权年份 */\r\n  year?: string | number\r\n\r\n  /** 许可证类型 */\r\n  license?: string\r\n\r\n  /** 自定义版权模板 */\r\n  template?: string\r\n}\r\n\r\n/**\r\n * 构建信息配置\r\n */\r\nexport interface BuildInfoConfig {\r\n  /** 是否包含版本号 */\r\n  version?: boolean\r\n\r\n  /** 是否包含构建时间 */\r\n  buildTime?: boolean\r\n\r\n  /** 是否包含构建环境 */\r\n  environment?: boolean\r\n\r\n  /** 是否包含 Git 信息 */\r\n  git?: boolean\r\n\r\n  /** 自定义构建信息模板 */\r\n  template?: string\r\n}\r\n\r\n/**\r\n * Package.json 自动更新配置\r\n */\r\nexport interface PackageUpdateConfig {\r\n  /** 是否启用 package.json 自动更新 */\r\n  enabled?: boolean\r\n\r\n  /** 源码目录，默认为 'src' */\r\n  srcDir?: string\r\n\r\n  /** 输出目录配置 */\r\n  outputDirs?: {\r\n    /** ESM 输出目录，默认为 'es' */\r\n    esm?: string\r\n    /** CJS 输出目录，默认为 'lib' */\r\n    cjs?: string\r\n    /** UMD 输出目录，默认为 'dist' */\r\n    umd?: string\r\n    /** 类型声明目录，默认为 'types' 或与 esm 相同 */\r\n    types?: string\r\n  }\r\n\r\n  /** 是否启用自动 exports 生成，默认为 true */\r\n  autoExports?: boolean\r\n\r\n  /** 是否更新 main/module/types 字段，默认为 true */\r\n  updateEntryPoints?: boolean\r\n\r\n  /** 是否更新 files 字段，默认为 true */\r\n  updateFiles?: boolean\r\n\r\n  /** 自定义 exports 配置 */\r\n  customExports?: Record<string, any>\r\n}\r\n\r\n/**\r\n * 深度部分类型\r\n */\r\ntype DeepPartial<T> = {\r\n  [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P]\r\n}\r\n"]}