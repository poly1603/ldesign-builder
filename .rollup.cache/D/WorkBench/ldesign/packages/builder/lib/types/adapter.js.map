{"version":3,"file":"adapter.js","sourceRoot":"","sources":["../../src/types/adapter.ts"],"names":[],"mappings":"AAAA;;GAEG;AAOH;;GAEG;AACH,MAAM,CAAN,IAAY,cAgBX;AAhBD,WAAY,cAAc;IACxB,8CAA4B,CAAA;IAC5B,mDAAiC,CAAA;IACjC,mDAAiC,CAAA;IACjC,mDAAiC,CAAA;IACjC,+CAA6B,CAAA;IAC7B,uDAAqC,CAAA;IACrC,yCAAuB,CAAA;IACvB,+CAA6B,CAAA;IAC7B,2CAAyB,CAAA;IACzB,yDAAuC,CAAA;IACvC,yDAAuC,CAAA;IACvC,mDAAiC,CAAA;IACjC,iDAA+B,CAAA;IAC/B,iDAA+B,CAAA;IAC/B,6CAA2B,CAAA;AAC7B,CAAC,EAhBW,cAAc,KAAd,cAAc,QAgBzB","sourcesContent":["/**\n * 适配器相关类型定义\n */\n\nimport type { BuildResult, BuildWatcher } from './builder'\nimport type { PerformanceMetrics } from './performance'\nimport type { UnifiedPlugin, PluginBuild } from './plugin'\nimport type { WatchOptions } from './common'\n\n/**\n * 打包器功能枚举\n */\nexport enum BundlerFeature {\n  TREE_SHAKING = 'treeshaking',\n  CODE_SPLITTING = 'code-splitting',\n  DYNAMIC_IMPORT = 'dynamic-import',\n  WORKER_SUPPORT = 'worker-support',\n  CSS_BUNDLING = 'css-bundling',\n  ASSET_PROCESSING = 'asset-processing',\n  SOURCEMAP = 'sourcemap',\n  MINIFICATION = 'minification',\n  HOT_RELOAD = 'hot-reload',\n  MODULE_FEDERATION = 'module-federation',\n  INCREMENTAL_BUILD = 'incremental-build',\n  PARALLEL_BUILD = 'parallel-build',\n  CACHE_SUPPORT = 'cache-support',\n  PLUGIN_SYSTEM = 'plugin-system',\n  CONFIG_FILE = 'config-file'\n}\n\n/**\n * 功能支持映射\n */\nexport type FeatureSupportMap = Record<BundlerFeature, boolean>\n\n/**\n * 统一配置接口\n */\nexport interface UnifiedConfig {\n  // 基础配置\n  input: string | string[] | Record<string, string>\n  output: UnifiedOutputConfig\n\n  // 外部依赖\n  external?: string[] | ((id: string) => boolean)\n  globals?: Record<string, string>\n\n  // 插件配置\n  plugins?: UnifiedPlugin[]\n\n  // 优化配置\n  treeshake?: boolean | TreeshakeOptions\n  minify?: boolean | BaseMinifyOptions\n\n  // 开发配置\n  sourcemap?: boolean | 'inline' | 'hidden'\n  watch?: boolean | WatchOptions\n\n  // 平台配置 (Rolldown 特有)\n  platform?: 'browser' | 'node' | 'neutral'\n\n  // 模块格式\n  format?: OutputFormat | OutputFormat[]\n\n  // 代码分割\n  manualChunks?: Record<string, string[]> | ((id: string) => string | void)\n\n  // 其他选项\n  [key: string]: any\n}\n\n/**\n * 统一输出配置\n */\nexport interface UnifiedOutputConfig {\n  dir?: string\n  file?: string\n  format?: OutputFormat | OutputFormat[]\n  name?: string\n  fileName?: string | ((chunkInfo: ChunkInfo) => string)\n  chunkFileNames?: string\n  assetFileNames?: string\n  sourcemap?: boolean | 'inline' | 'hidden'\n  globals?: Record<string, string>\n  banner?: string | (() => string | Promise<string>)\n  footer?: string | (() => string | Promise<string>)\n  intro?: string | (() => string | Promise<string>)\n  outro?: string | (() => string | Promise<string>)\n}\n\n/**\n * 输出格式\n */\nexport type OutputFormat = 'esm' | 'cjs' | 'umd' | 'iife' | 'css'\n\n/**\n * Chunk 信息\n */\nexport interface ChunkInfo {\n  isEntry: boolean\n  isDynamicEntry: boolean\n  name: string\n  moduleIds: string[]\n  imports: string[]\n  dynamicImports: string[]\n  exports: string[]\n  referencedFiles: string[]\n  type: 'chunk' | 'asset'\n  fileName: string\n  preliminaryFileName: string\n}\n\n/**\n * Tree Shaking 选项\n */\nexport interface TreeshakeOptions {\n  annotations?: boolean\n  moduleSideEffects?: boolean | string[] | ((id: string) => boolean)\n  propertyReadSideEffects?: boolean\n  tryCatchDeoptimization?: boolean\n  unknownGlobalSideEffects?: boolean\n}\n\n/**\n * 基础压缩选项（用于适配器）\n */\nexport interface BaseMinifyOptions {\n  compress?: any\n  mangle?: any\n  format?: any\n  sourceMap?: any\n}\n\n// WatchOptions 已在 common.ts 中定义，这里导入\nexport type { WatchOptions } from './common'\n\n// UnifiedPlugin 已在 plugin.ts 中定义，这里导入\nexport type { UnifiedPlugin } from './plugin'\n\n// PluginBuild 已在 plugin.ts 中定义，这里导入\nexport type { PluginBuild } from './plugin'\n\n// RollupPluginConfig 已在 plugin.ts 中定义，这里导入\nexport type { RollupPluginConfig } from './plugin'\n\n// RolldownPluginConfig 已在 plugin.ts 中定义，这里导入\nexport type { RolldownPluginConfig } from './plugin'\n\n/**\n * 打包核心适配器接口\n */\nexport interface IBundlerAdapter {\n  /** 适配器名称 */\n  readonly name: 'rollup' | 'rolldown'\n\n  /** 适配器版本 */\n  readonly version: string\n\n  /** 是否可用 */\n  readonly available: boolean\n\n  // 核心构建方法\n  build(config: UnifiedConfig): Promise<BuildResult>\n  watch(config: UnifiedConfig): Promise<BuildWatcher>\n\n  // 配置转换\n  transformConfig(config: UnifiedConfig): Promise<BundlerSpecificConfig>\n\n  // 插件处理\n  transformPlugins(plugins: UnifiedPlugin[]): Promise<BundlerSpecificPlugin[]>\n\n  // 功能检测\n  supportsFeature(feature: BundlerFeature): boolean\n  getFeatureSupport(): FeatureSupportMap\n\n  // 性能监控\n  getPerformanceMetrics(): PerformanceMetrics\n\n  // 生命周期钩子\n  onBuildStart?(config: UnifiedConfig): Promise<void> | void\n  onBuildEnd?(result: BuildResult): Promise<void> | void\n  onError?(error: Error): Promise<void> | void\n\n  // 资源清理\n  dispose(): Promise<void>\n}\n\n/**\n * 打包器特定配置\n */\nexport type BundlerSpecificConfig = RollupOptions | RolldownOptions\n\n/**\n * Rollup 配置选项\n */\nexport interface RollupOptions {\n  input: string | string[] | Record<string, string>\n  output?: RollupOutputOptions | RollupOutputOptions[]\n  external?: string[] | ((id: string) => boolean)\n  plugins?: RollupPlugin[]\n  treeshake?: boolean | TreeshakeOptions\n  watch?: RollupWatchOptions\n  [key: string]: any\n}\n\n/**\n * Rollup 输出选项\n */\nexport interface RollupOutputOptions {\n  dir?: string\n  file?: string\n  format?: RollupFormat\n  name?: string\n  globals?: Record<string, string>\n  sourcemap?: boolean | 'inline' | 'hidden'\n  entryFileNames?: string | ((chunkInfo: any) => string)\n  chunkFileNames?: string\n  assetFileNames?: string\n  banner?: string | (() => string | Promise<string>)\n  footer?: string | (() => string | Promise<string>)\n  intro?: string | (() => string | Promise<string>)\n  outro?: string | (() => string | Promise<string>)\n  [key: string]: any\n}\n\n/**\n * Rollup 格式\n */\nexport type RollupFormat = 'es' | 'cjs' | 'umd' | 'iife' | 'system' | 'amd'\n\n/**\n * Rollup 监听选项\n */\nexport interface RollupWatchOptions extends Omit<RollupOptions, 'watch'> {\n  watch?: {\n    include?: string | string[]\n    exclude?: string | string[]\n    chokidar?: any\n    buildDelay?: number\n    clearScreen?: boolean\n  }\n}\n\n/**\n * Rollup 插件\n */\nexport interface RollupPlugin {\n  name: string\n  buildStart?: (opts: any) => void | Promise<void>\n  resolveId?: (id: string, importer?: string) => string | null | Promise<string | null>\n  load?: (id: string) => string | null | Promise<string | null>\n  transform?: (code: string, id: string) => any | Promise<any>\n  generateBundle?: (opts: any, bundle: any) => void | Promise<void>\n  writeBundle?: (opts: any, bundle: any) => void | Promise<void>\n  [key: string]: any\n}\n\n/**\n * Rolldown 配置选项\n */\nexport interface RolldownOptions {\n  input: string | string[] | Record<string, string>\n  output?: RolldownOutputOptions\n  external?: string[] | ((id: string) => boolean)\n  plugins?: RolldownPlugin[]\n  treeshake?: boolean | TreeshakeOptions\n  platform?: 'browser' | 'node' | 'neutral'\n  watch?: boolean | WatchOptions\n  [key: string]: any\n}\n\n/**\n * Rolldown 输出选项\n */\nexport interface RolldownOutputOptions {\n  dir?: string\n  file?: string\n  format?: RolldownFormat\n  name?: string\n  globals?: Record<string, string>\n  sourcemap?: boolean | 'inline' | 'hidden'\n  entryFileNames?: string\n  chunkFileNames?: string\n  assetFileNames?: string\n  banner?: string | (() => string | Promise<string>)\n  footer?: string | (() => string | Promise<string>)\n  intro?: string | (() => string | Promise<string>)\n  outro?: string | (() => string | Promise<string>)\n  [key: string]: any\n}\n\n/**\n * Rolldown 格式\n */\nexport type RolldownFormat = 'esm' | 'cjs' | 'umd' | 'iife'\n\n/**\n * Rolldown 插件\n */\nexport interface RolldownPlugin {\n  name: string\n  setup?: (build: PluginBuild) => void | Promise<void>\n  [key: string]: any\n}\n\n/**\n * 打包器特定插件\n */\nexport type BundlerSpecificPlugin = RollupPlugin | RolldownPlugin\n\n/**\n * 适配器选项\n */\nexport interface AdapterOptions {\n  logger: any\n  performanceMonitor: any\n  cacheDir?: string\n  tempDir?: string\n}\n\n/**\n * 配置转换器接口\n */\nexport interface ConfigTransformer {\n  transform(config: UnifiedConfig): BundlerSpecificConfig\n}\n\n/**\n * 插件转换器接口\n */\nexport interface PluginTransformer {\n  transform(plugins: UnifiedPlugin[]): BundlerSpecificPlugin[]\n}\n\n/**\n * 结果转换器接口\n */\nexport interface ResultTransformer {\n  transform(result: any, context: TransformContext): BuildResult\n  transformWatcher(watcher: any, context: TransformContext): BuildWatcher\n}\n\n/**\n * 转换上下文\n */\nexport interface TransformContext {\n  bundler: string\n  config: UnifiedConfig\n  duration?: number\n  [key: string]: any\n}\n\n// PerformanceComparison 已在 performance.ts 中定义，这里导入\nexport type { PerformanceComparison } from './performance'\n\n/**\n * 性能结果\n */\nexport interface PerformanceResult {\n  adapter: string\n  buildTime: number\n  memoryUsage: number\n  bundleSize: number\n  success: boolean\n  error?: string\n  features: FeatureSupportMap\n}\n\n/**\n * 对比报告\n */\nexport interface ComparisonReport {\n  buildTimeComparison: any\n  memorySizeComparison: any\n  bundleSizeComparison: any\n  featureComparison: any\n}\n"]}