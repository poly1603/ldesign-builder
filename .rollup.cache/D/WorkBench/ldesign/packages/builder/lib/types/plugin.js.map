{"version":3,"file":"plugin.js","sourceRoot":"","sources":["../../src/types/plugin.ts"],"names":[],"mappings":"AAAA;;GAEG;AAEH;;GAEG;AACH,MAAM,CAAN,IAAY,UAaX;AAbD,WAAY,UAAU;IACpB,WAAW;IACX,2BAAa,CAAA;IACb,WAAW;IACX,qCAAuB,CAAA;IACvB,WAAW;IACX,2CAA6B,CAAA;IAC7B,WAAW;IACX,iCAAmB,CAAA;IACnB,WAAW;IACX,yCAA2B,CAAA;IAC3B,YAAY;IACZ,+BAAiB,CAAA;AACnB,CAAC,EAbW,UAAU,KAAV,UAAU,QAarB;AAED;;GAEG;AACH,MAAM,CAAN,IAAY,WAaX;AAbD,WAAY,WAAW;IACrB,YAAY;IACZ,sCAAuB,CAAA;IACvB,WAAW;IACX,kCAAmB,CAAA;IACnB,WAAW;IACX,4BAAa,CAAA;IACb,WAAW;IACX,sCAAuB,CAAA;IACvB,WAAW;IACX,oCAAqB,CAAA;IACrB,YAAY;IACZ,wCAAyB,CAAA;AAC3B,CAAC,EAbW,WAAW,KAAX,WAAW,QAatB","sourcesContent":["/**\n * 插件相关类型定义\n */\n\n/**\n * 插件类型枚举\n */\nexport enum PluginType {\n  /** 核心插件 */\n  CORE = 'core',\n  /** 转换插件 */\n  TRANSFORM = 'transform',\n  /** 优化插件 */\n  OPTIMIZATION = 'optimization',\n  /** 工具插件 */\n  UTILITY = 'utility',\n  /** 开发插件 */\n  DEVELOPMENT = 'development',\n  /** 自定义插件 */\n  CUSTOM = 'custom'\n}\n\n/**\n * 插件阶段枚举\n */\nexport enum PluginPhase {\n  /** 构建开始前 */\n  PRE_BUILD = 'pre-build',\n  /** 模块解析 */\n  RESOLVE = 'resolve',\n  /** 模块加载 */\n  LOAD = 'load',\n  /** 代码转换 */\n  TRANSFORM = 'transform',\n  /** 代码生成 */\n  GENERATE = 'generate',\n  /** 构建完成后 */\n  POST_BUILD = 'post-build'\n}\n\n/**\n * 统一插件接口\n */\nexport interface UnifiedPlugin {\n  /** 插件名称 */\n  name: string\n\n  /** 插件类型 */\n  type?: PluginType\n\n  /** 插件版本 */\n  version?: string\n\n  /** 插件描述 */\n  description?: string\n\n  /** 插件作者 */\n  author?: string\n\n  /** 插件优先级 */\n  priority?: number\n\n  /** 插件依赖 */\n  dependencies?: string[]\n\n  /** 插件选项 */\n  options?: Record<string, any>\n\n  /** 是否启用 */\n  enabled?: boolean\n\n  /** 应用条件 */\n  condition?: (context: PluginContext) => boolean\n\n  // 通用钩子\n  setup?: (build: PluginBuild) => void | Promise<void>\n\n  // Rollup 兼容钩子\n  buildStart?: (opts: any) => void | Promise<void>\n  resolveId?: (id: string, importer?: string) => string | null | Promise<string | null>\n  load?: (id: string) => string | null | Promise<string | null>\n  transform?: (code: string, id: string) => any | Promise<any>\n  generateBundle?: (opts: any, bundle: any) => void | Promise<void>\n  writeBundle?: (opts: any, bundle: any) => void | Promise<void>\n\n  // 生命周期钩子\n  onInit?: (context: PluginContext) => void | Promise<void>\n  onDestroy?: (context: PluginContext) => void | Promise<void>\n  onError?: (error: Error, context: PluginContext) => void | Promise<void>\n\n  // 适配器特定配置\n  rollup?: RollupPluginConfig\n  rolldown?: RolldownPluginConfig\n\n  // 插件元数据\n  meta?: PluginMetadata\n}\n\n/**\n * 插件构建接口\n */\nexport interface PluginBuild {\n  /** 构建开始时调用 */\n  onStart(callback: () => void | Promise<void>): void\n\n  /** 模块解析时调用 */\n  onResolve(options: ResolveOptions, callback: ResolveCallback): void\n\n  /** 模块加载时调用 */\n  onLoad(options: LoadOptions, callback: LoadCallback): void\n\n  /** 代码转换时调用 */\n  onTransform(options: TransformOptions, callback: TransformCallback): void\n\n  /** 构建结束时调用 */\n  onEnd(callback: () => void | Promise<void>): void\n\n  /** 获取构建上下文 */\n  getContext(): PluginContext\n\n  /** 添加监听文件 */\n  addWatchFile(file: string): void\n\n  /** 发出资源文件 */\n  emitFile(file: EmittedFile): string\n\n  /** 获取文件名 */\n  getFileName(referenceId: string): string\n}\n\n/**\n * 解析选项\n */\nexport interface ResolveOptions {\n  /** 文件过滤器 */\n  filter: RegExp\n\n  /** 命名空间 */\n  namespace?: string\n}\n\n/**\n * 解析回调\n */\nexport type ResolveCallback = (args: ResolveArgs) => ResolveResult | Promise<ResolveResult>\n\n/**\n * 解析参数\n */\nexport interface ResolveArgs {\n  /** 模块 ID */\n  path: string\n\n  /** 导入者 */\n  importer: string\n\n  /** 命名空间 */\n  namespace: string\n\n  /** 解析目录 */\n  resolveDir: string\n\n  /** 导入类型 */\n  kind: ImportKind\n}\n\n/**\n * 导入类型\n */\nexport type ImportKind =\n  | 'entry-point'\n  | 'import-statement'\n  | 'require-call'\n  | 'dynamic-import'\n  | 'require-resolve'\n  | 'import-rule'\n  | 'url-token'\n\n/**\n * 解析结果\n */\nexport interface ResolveResult {\n  /** 解析后的路径 */\n  path?: string\n\n  /** 外部模块 */\n  external?: boolean\n\n  /** 命名空间 */\n  namespace?: string\n\n  /** 后缀 */\n  suffix?: string\n\n  /** 插件数据 */\n  pluginData?: any\n\n  /** 错误信息 */\n  errors?: Message[]\n\n  /** 警告信息 */\n  warnings?: Message[]\n\n  /** 监听文件 */\n  watchFiles?: string[]\n\n  /** 监听目录 */\n  watchDirs?: string[]\n}\n\n/**\n * 加载选项\n */\nexport interface LoadOptions {\n  /** 文件过滤器 */\n  filter: RegExp\n\n  /** 命名空间 */\n  namespace?: string\n}\n\n/**\n * 加载回调\n */\nexport type LoadCallback = (args: LoadArgs) => LoadResult | Promise<LoadResult>\n\n/**\n * 加载参数\n */\nexport interface LoadArgs {\n  /** 文件路径 */\n  path: string\n\n  /** 命名空间 */\n  namespace: string\n\n  /** 后缀 */\n  suffix: string\n\n  /** 插件数据 */\n  pluginData: any\n}\n\n/**\n * 加载结果\n */\nexport interface LoadResult {\n  /** 文件内容 */\n  contents?: string | Uint8Array\n\n  /** 加载器 */\n  loader?: Loader\n\n  /** 解析目录 */\n  resolveDir?: string\n\n  /** 插件数据 */\n  pluginData?: any\n\n  /** 错误信息 */\n  errors?: Message[]\n\n  /** 警告信息 */\n  warnings?: Message[]\n\n  /** 监听文件 */\n  watchFiles?: string[]\n\n  /** 监听目录 */\n  watchDirs?: string[]\n}\n\n/**\n * 加载器类型\n */\nexport type Loader =\n  | 'js'\n  | 'jsx'\n  | 'ts'\n  | 'tsx'\n  | 'css'\n  | 'json'\n  | 'text'\n  | 'base64'\n  | 'dataurl'\n  | 'file'\n  | 'binary'\n  | 'copy'\n\n/**\n * 转换选项\n */\nexport interface TransformOptions {\n  /** 文件过滤器 */\n  filter: RegExp\n\n  /** 命名空间 */\n  namespace?: string\n}\n\n/**\n * 转换回调\n */\nexport type TransformCallback = (args: TransformArgs) => TransformResult | Promise<TransformResult>\n\n/**\n * 转换参数\n */\nexport interface TransformArgs {\n  /** 文件路径 */\n  path: string\n\n  /** 命名空间 */\n  namespace: string\n\n  /** 文件内容 */\n  contents: string\n\n  /** 加载器 */\n  loader: Loader\n\n  /** 插件数据 */\n  pluginData: any\n}\n\n/**\n * 转换结果\n */\nexport interface TransformResult {\n  /** 转换后的内容 */\n  contents?: string\n\n  /** 加载器 */\n  loader?: Loader\n\n  /** 插件数据 */\n  pluginData?: any\n\n  /** 错误信息 */\n  errors?: Message[]\n\n  /** 警告信息 */\n  warnings?: Message[]\n\n  /** 监听文件 */\n  watchFiles?: string[]\n\n  /** 监听目录 */\n  watchDirs?: string[]\n}\n\n/**\n * 消息\n */\nexport interface Message {\n  /** 消息 ID */\n  id?: string\n\n  /** 插件名称 */\n  pluginName: string\n\n  /** 消息文本 */\n  text: string\n\n  /** 位置信息 */\n  location?: Location\n\n  /** 注释 */\n  notes?: Note[]\n\n  /** 详细信息 */\n  detail?: any\n}\n\n/**\n * 位置信息\n */\nexport interface Location {\n  /** 文件路径 */\n  file: string\n\n  /** 命名空间 */\n  namespace: string\n\n  /** 行号 */\n  line: number\n\n  /** 列号 */\n  column: number\n\n  /** 行内容 */\n  lineText: string\n\n  /** 建议 */\n  suggestion: string\n}\n\n/**\n * 注释\n */\nexport interface Note {\n  /** 注释文本 */\n  text: string\n\n  /** 位置信息 */\n  location?: Location\n}\n\n/**\n * 发出的文件\n */\nexport interface EmittedFile {\n  /** 文件类型 */\n  type: 'asset' | 'chunk'\n\n  /** 文件名 */\n  fileName?: string\n\n  /** 文件名模式 */\n  name?: string\n\n  /** 文件内容 */\n  source?: string | Uint8Array\n\n  /** 入口点 */\n  id?: string\n\n  /** 是否保留签名 */\n  preserveSignature?: 'strict' | 'allow-extension' | 'exports-only' | false\n}\n\n/**\n * 插件上下文\n */\nexport interface PluginContext {\n  /** 构建 ID */\n  buildId: string\n\n  /** 插件名称 */\n  pluginName: string\n\n  /** 工作目录 */\n  cwd: string\n\n  /** 构建模式 */\n  mode: 'development' | 'production'\n\n  /** 目标平台 */\n  platform: 'browser' | 'node' | 'neutral'\n\n  /** 环境变量 */\n  env: Record<string, string>\n\n  /** 配置信息 */\n  config: any\n\n  /** 缓存目录 */\n  cacheDir: string\n\n  /** 临时目录 */\n  tempDir: string\n\n  /** 日志记录器 */\n  logger: any\n\n  /** 性能监控器 */\n  performanceMonitor: any\n}\n\n/**\n * Rollup 插件配置\n */\nexport interface RollupPluginConfig {\n  /** 插件选项 */\n  [key: string]: any\n}\n\n/**\n * Rolldown 插件配置\n */\nexport interface RolldownPluginConfig {\n  /** 插件选项 */\n  [key: string]: any\n}\n\n/**\n * 插件元数据\n */\nexport interface PluginMetadata {\n  /** 插件标签 */\n  tags?: string[]\n\n  /** 插件分类 */\n  category?: string\n\n  /** 插件主页 */\n  homepage?: string\n\n  /** 插件仓库 */\n  repository?: string\n\n  /** 插件许可证 */\n  license?: string\n\n  /** 插件关键词 */\n  keywords?: string[]\n\n  /** 插件兼容性 */\n  compatibility?: {\n    rollup?: string\n    rolldown?: string\n    node?: string\n  }\n\n  /** 插件配置模式 */\n  configSchema?: any\n}\n\n/**\n * 插件管理器选项\n */\nexport interface PluginManagerOptions {\n  /** 插件目录 */\n  pluginDir?: string\n\n  /** 是否启用缓存 */\n  cache?: boolean\n\n  /** 缓存目录 */\n  cacheDir?: string\n\n  /** 是否启用热重载 */\n  hotReload?: boolean\n\n  /** 插件加载超时时间 */\n  timeout?: number\n\n  /** 最大插件数量 */\n  maxPlugins?: number\n\n  /** 插件白名单 */\n  whitelist?: string[]\n\n  /** 插件黑名单 */\n  blacklist?: string[]\n}\n\n/**\n * 插件加载结果\n */\nexport interface PluginLoadResult {\n  /** 加载的插件 */\n  plugin: UnifiedPlugin\n\n  /** 加载时间 */\n  loadTime: number\n\n  /** 是否成功 */\n  success: boolean\n\n  /** 错误信息 */\n  error?: Error\n\n  /** 警告信息 */\n  warnings?: string[]\n}\n\n// PluginPerformanceStats 已在 performance.ts 中定义，这里导入\nexport type { PluginPerformanceStats } from './performance'\n\n// HookPerformance 已在 performance.ts 中定义，这里导入\nexport type { HookPerformance } from './performance'\n"]}