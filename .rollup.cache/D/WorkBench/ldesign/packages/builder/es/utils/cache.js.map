{"version":3,"file":"cache.js","sourceRoot":"","sources":["../../src/utils/cache.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * 缓存相关工具函数\r\n */\r\n\r\nimport { createHash } from 'crypto'\r\nimport { promises as fs } from 'fs'\r\nimport path from 'path'\r\n\r\ninterface CacheEntry {\r\n  key: string\r\n  value: any\r\n  timestamp: number\r\n  hash?: string\r\n}\r\n\r\ninterface CacheOptions {\r\n  cacheDir?: string\r\n  ttl?: number // Time to live in milliseconds\r\n  namespace?: string\r\n  maxSize?: number // 最大缓存体积（字节），超过后按时间淘汰\r\n}\r\n\r\n/**\r\n * 构建缓存管理器\r\n */\r\nexport class BuildCache {\r\n  private cacheDir: string\r\n  private ttl: number\r\n  private namespace: string\r\n  private maxSize?: number\r\n  private memoryCache: Map<string, CacheEntry> = new Map()\r\n  private initialized: boolean = false\r\n\r\n  constructor(options: CacheOptions = {}) {\r\n    const defaultCacheDir = path.join(process.cwd(), 'node_modules', '.cache', '@ldesign', 'builder')\r\n    this.cacheDir = options.cacheDir || defaultCacheDir\r\n    this.ttl = options.ttl || 24 * 60 * 60 * 1000 // 默认24小时\r\n    this.namespace = options.namespace || 'default'\r\n    this.maxSize = options.maxSize\r\n  }\r\n\r\n  /**\r\n   * 初始化缓存目录\r\n   */\r\n  private async ensureCacheDir(): Promise<void> {\r\n    if (!this.initialized) {\r\n      await fs.mkdir(this.cacheDir, { recursive: true })\r\n      this.initialized = true\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 生成缓存键的哈希值\r\n   */\r\n  private generateHash(key: string): string {\r\n    return createHash('md5').update(`${this.namespace}:${key}`).digest('hex')\r\n  }\r\n\r\n  /**\r\n   * 获取缓存文件路径\r\n   */\r\n  private getCachePath(key: string): string {\r\n    const hash = this.generateHash(key)\r\n    return path.join(this.cacheDir, `${hash}.json`)\r\n  }\r\n\r\n  /**\r\n   * 设置缓存\r\n   */\r\n  async set(key: string, value: any, _options?: { ttl?: number }): Promise<void> {\r\n    await this.ensureCacheDir()\r\n\r\n    const entry: CacheEntry = {\r\n      key,\r\n      value,\r\n      timestamp: Date.now(),\r\n      hash: this.generateHash(key)\r\n    }\r\n\r\n    // 更新内存缓存\r\n    this.memoryCache.set(key, entry)\r\n\r\n    // 写入文件缓存\r\n    const cachePath = this.getCachePath(key)\r\n    try {\r\n      await fs.writeFile(cachePath, JSON.stringify(entry, null, 2))\r\n      // 写入后进行体积检查与清理\r\n      if (this.maxSize && this.maxSize > 0) {\r\n        await this.enforceMaxSize()\r\n      }\r\n    } catch (error) {\r\n      // 缓存写入失败不应该中断构建\r\n      console.warn(`Cache write failed for key: ${key}`, error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取缓存\r\n   */\r\n  async get<T = any>(key: string): Promise<T | null> {\r\n    // 先检查内存缓存\r\n    const memoryEntry = this.memoryCache.get(key)\r\n    if (memoryEntry && this.isValid(memoryEntry)) {\r\n      return memoryEntry.value as T\r\n    }\r\n\r\n    // 检查文件缓存\r\n    const cachePath = this.getCachePath(key)\r\n    try {\r\n      const content = await fs.readFile(cachePath, 'utf-8')\r\n      const entry: CacheEntry = JSON.parse(content)\r\n\r\n      if (this.isValid(entry)) {\r\n        // 更新内存缓存\r\n        this.memoryCache.set(key, entry)\r\n        return entry.value as T\r\n      }\r\n    } catch {\r\n      // 缓存不存在或读取失败\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  /** 获取缓存目录 */\r\n  public getDirectory(): string { return this.cacheDir }\r\n  /** 获取 TTL */\r\n  public getTTL(): number { return this.ttl }\r\n  /** 获取最大体积限制 */\r\n  public getMaxSize(): number | undefined { return this.maxSize }\r\n\r\n  /**\r\n   * 检查缓存是否有效\r\n   */\r\n  private isValid(entry: CacheEntry): boolean {\r\n    const now = Date.now()\r\n    return now - entry.timestamp < this.ttl\r\n  }\r\n\r\n  /**\r\n   * 若设置了 maxSize，则在超过阈值时按旧到新淘汰文件\r\n   */\r\n  private async enforceMaxSize(): Promise<void> {\r\n    if (!this.maxSize || this.maxSize <= 0) return\r\n    try {\r\n      const files = await fs.readdir(this.cacheDir)\r\n      // 收集 {file, size, timestamp}\r\n      const entries: Array<{ file: string; size: number; timestamp: number }> = []\r\n      let total = 0\r\n      for (const f of files) {\r\n        const full = path.join(this.cacheDir, f)\r\n        const stat = await fs.stat(full)\r\n        total += stat.size\r\n        try {\r\n          const content = await fs.readFile(full, 'utf-8')\r\n          const parsed = JSON.parse(content) as CacheEntry\r\n          entries.push({ file: full, size: stat.size, timestamp: parsed.timestamp || 0 })\r\n        } catch {\r\n          entries.push({ file: full, size: stat.size, timestamp: 0 })\r\n        }\r\n      }\r\n      if (total <= this.maxSize) return\r\n      // 按 timestamp 升序（旧的优先删除）\r\n      entries.sort((a, b) => (a.timestamp || 0) - (b.timestamp || 0))\r\n      for (const e of entries) {\r\n        if (total <= this.maxSize) break\r\n        try {\r\n          await fs.unlink(e.file)\r\n          total -= e.size\r\n        } catch {\r\n          // ignore\r\n        }\r\n      }\r\n    } catch {\r\n      // ignore\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 删除缓存\r\n   */\r\n  async delete(key: string): Promise<void> {\r\n    this.memoryCache.delete(key)\r\n\r\n    const cachePath = this.getCachePath(key)\r\n    try {\r\n      await fs.unlink(cachePath)\r\n    } catch {\r\n      // 文件可能不存在\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 清空所有缓存\r\n   */\r\n  async clear(): Promise<void> {\r\n    this.memoryCache.clear()\r\n\r\n    try {\r\n      const files = await fs.readdir(this.cacheDir)\r\n      await Promise.all(\r\n        files.map(file => fs.unlink(path.join(this.cacheDir, file)))\r\n      )\r\n    } catch {\r\n      // 目录可能不存在\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取缓存统计信息\r\n   */\r\n  async getStats(): Promise<{\r\n    memoryEntries: number\r\n    fileEntries: number\r\n    totalSize: number\r\n  }> {\r\n    let fileEntries = 0\r\n    let totalSize = 0\r\n\r\n    try {\r\n      const files = await fs.readdir(this.cacheDir)\r\n      fileEntries = files.length\r\n\r\n      for (const file of files) {\r\n        const stat = await fs.stat(path.join(this.cacheDir, file))\r\n        totalSize += stat.size\r\n      }\r\n    } catch {\r\n      // 目录可能不存在\r\n    }\r\n\r\n    return {\r\n      memoryEntries: this.memoryCache.size,\r\n      fileEntries,\r\n      totalSize\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * TypeScript 编译缓存\r\n */\r\nexport class TypeScriptCache extends BuildCache {\r\n  constructor() {\r\n    super({\r\n      namespace: 'typescript',\r\n      ttl: 7 * 24 * 60 * 60 * 1000 // 7天\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 生成 TypeScript 文件的缓存键\r\n   */\r\n  async generateFileKey(filePath: string, content?: string): Promise<string> {\r\n    if (!content) {\r\n      content = await fs.readFile(filePath, 'utf-8')\r\n    }\r\n    const hash = createHash('sha256').update(content).digest('hex')\r\n    return `${filePath}:${hash}`\r\n  }\r\n\r\n  /**\r\n   * 缓存编译结果\r\n   */\r\n  async cacheCompiled(\r\n    filePath: string,\r\n    content: string,\r\n    compiled: { code: string; map?: string; dts?: string }\r\n  ): Promise<void> {\r\n    const key = await this.generateFileKey(filePath, content)\r\n    await this.set(key, compiled)\r\n  }\r\n\r\n  /**\r\n   * 获取编译缓存\r\n   */\r\n  async getCompiled(\r\n    filePath: string,\r\n    content?: string\r\n  ): Promise<{ code: string; map?: string; dts?: string } | null> {\r\n    const key = await this.generateFileKey(filePath, content)\r\n    return this.get(key)\r\n  }\r\n}\r\n\r\n/**\r\n * Rollup 插件缓存\r\n */\r\nexport class RollupCache extends BuildCache {\r\n  constructor(options: CacheOptions = {}) {\r\n    super({\r\n      namespace: 'rollup',\r\n      ttl: options.ttl ?? 24 * 60 * 60 * 1000, // 24小时\r\n      cacheDir: options.cacheDir,\r\n      maxSize: options.maxSize,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 缓存 Rollup 构建结果（包含文件内容）\r\n   */\r\n  async cacheBuildResult(\r\n    config: any,\r\n    result: any\r\n  ): Promise<void> {\r\n    const configHash = createHash('md5').update(JSON.stringify(config)).digest('hex')\r\n\r\n    // 增强缓存数据，包含文件内容\r\n    const enhancedResult = {\r\n      ...result,\r\n      _cacheMetadata: {\r\n        timestamp: Date.now(),\r\n        configHash,\r\n        hasFileContents: true\r\n      }\r\n    }\r\n\r\n    // 如果有输出文件，尝试读取文件内容并缓存\r\n    if (result.outputs && Array.isArray(result.outputs)) {\r\n      const fs = await import('fs-extra')\r\n      const path = await import('path')\r\n\r\n      for (const output of result.outputs) {\r\n        if (output.fileName && typeof output.fileName === 'string') {\r\n          try {\r\n            const fullPath = path.isAbsolute(output.fileName)\r\n              ? output.fileName\r\n              : path.resolve(process.cwd(), output.fileName)\r\n\r\n            if (await fs.pathExists(fullPath)) {\r\n              // 读取文件内容并添加到缓存\r\n              const content = await fs.readFile(fullPath)\r\n              output._cachedContent = content.toString('base64')\r\n              output._cachedPath = fullPath\r\n            }\r\n          } catch (error) {\r\n            // 忽略文件读取错误，继续处理其他文件\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    await this.set(`build:${configHash}`, enhancedResult)\r\n  }\r\n\r\n  /**\r\n   * 获取 Rollup 构建缓存\r\n   */\r\n  async getBuildResult(config: any): Promise<any> {\r\n    const configHash = createHash('md5').update(JSON.stringify(config)).digest('hex')\r\n    return this.get(`build:${configHash}`)\r\n  }\r\n\r\n  /**\r\n   * 从缓存结果恢复文件\r\n   */\r\n  async restoreFilesFromCache(cachedResult: any): Promise<boolean> {\r\n    if (!cachedResult || !cachedResult.outputs || !Array.isArray(cachedResult.outputs)) {\r\n      return false\r\n    }\r\n\r\n    const fs = await import('fs-extra')\r\n    const path = await import('path')\r\n    let restoredCount = 0\r\n\r\n    for (const output of cachedResult.outputs) {\r\n      if (output._cachedContent && output._cachedPath) {\r\n        try {\r\n          // 确保目录存在\r\n          await fs.ensureDir(path.dirname(output._cachedPath))\r\n\r\n          // 恢复文件内容\r\n          const content = Buffer.from(output._cachedContent, 'base64')\r\n          await fs.writeFile(output._cachedPath, content)\r\n\r\n          restoredCount++\r\n        } catch (error) {\r\n          console.warn(`恢复文件失败: ${output._cachedPath}`, error)\r\n        }\r\n      }\r\n    }\r\n\r\n    return restoredCount > 0\r\n  }\r\n}\r\n\r\n/**\r\n * 创建默认缓存实例\r\n */\r\nexport const buildCache = new BuildCache()\r\nexport const tsCache = new TypeScriptCache()\r\nexport const rollupCache = new RollupCache()\r\n\r\n/**\r\n * 缓存装饰器\r\n */\r\nexport function cached<T extends (...args: any[]) => Promise<any>>(\r\n  fn: T,\r\n  options?: {\r\n    key?: (...args: Parameters<T>) => string\r\n    ttl?: number\r\n  }\r\n): T {\r\n  const cache = new BuildCache({ ttl: options?.ttl })\r\n\r\n  return (async (...args: Parameters<T>): Promise<ReturnType<T>> => {\r\n    const cacheKey = options?.key ? options.key(...args) : JSON.stringify(args)\r\n\r\n    // 尝试从缓存获取\r\n    const cached = await cache.get(cacheKey)\r\n    if (cached !== null) {\r\n      return cached\r\n    }\r\n\r\n    // 执行原函数\r\n    const result = await fn(...args)\r\n\r\n    // 缓存结果\r\n    await cache.set(cacheKey, result)\r\n\r\n    return result\r\n  }) as T\r\n}\r\n"]}