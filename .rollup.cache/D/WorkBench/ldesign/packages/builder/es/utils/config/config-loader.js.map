{"version":3,"file":"config-loader.js","sourceRoot":"","sources":["../../../src/utils/config/config-loader.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * 配置文件加载器\n */\n\nimport path from 'path'\nimport createJiti from 'jiti'\nimport { CONFIG_FILE_NAMES } from '../../constants/defaults'\nimport { exists, readFile } from '../file-system'\nimport type { BuilderConfig, ConfigFileInfo, ConfigFileType } from '../../types/config'\nimport { ErrorCode } from '../../constants/errors'\nimport { BuilderError } from '../error-handler'\n\n/**\n * 配置文件加载器类\n */\nexport class ConfigLoader {\n  /**\n   * 查找配置文件\n   */\n  async findConfigFile(startDir: string = process.cwd()): Promise<string | null> {\n    for (const fileName of CONFIG_FILE_NAMES) {\n      const configPath = path.resolve(startDir, fileName)\n      if (await exists(configPath)) {\n        return configPath\n      }\n    }\n    return null\n  }\n\n  /**\n   * 获取配置文件信息\n   */\n  async getConfigFileInfo(configPath: string): Promise<ConfigFileInfo> {\n    const fileExists = await exists(configPath)\n    const ext = path.extname(configPath)\n\n    let type: ConfigFileType\n    switch (ext) {\n      case '.ts':\n        type = 'ts'\n        break\n      case '.js':\n      case '.mjs':\n        type = 'js'\n        break\n      case '.json':\n        type = 'json'\n        break\n      default:\n        type = 'js'\n    }\n\n    const info: ConfigFileInfo = {\n      path: configPath,\n      type,\n      exists: fileExists\n    }\n\n    if (fileExists) {\n      try {\n        const stats = await import('fs').then(fs => fs.promises.stat(configPath))\n        info.mtime = stats.mtime\n        info.size = stats.size\n      } catch {\n        // 忽略获取文件信息失败的错误\n      }\n    }\n\n    return info\n  }\n\n  /**\n   * 加载配置文件\n   */\n  async loadConfigFile(configPath: string): Promise<BuilderConfig> {\n    const info = await this.getConfigFileInfo(configPath)\n\n    if (!info.exists) {\n      throw new BuilderError(\n        ErrorCode.CONFIG_NOT_FOUND,\n        `配置文件不存在: ${configPath}`\n      )\n    }\n\n    try {\n      switch (info.type) {\n        case 'ts':\n        case 'js':\n          return this.loadJSConfig(configPath)\n        case 'json':\n          return this.loadJSONConfig(configPath)\n        default:\n          throw new BuilderError(\n            ErrorCode.CONFIG_PARSE_ERROR,\n            `不支持的配置文件格式: ${info.type}`\n          )\n      }\n    } catch (error) {\n      if (error instanceof BuilderError) {\n        throw error\n      }\n\n      throw new BuilderError(\n        ErrorCode.CONFIG_PARSE_ERROR,\n        `加载配置文件失败: ${configPath}`,\n        { cause: error as Error }\n      )\n    }\n  }\n\n  /**\n   * 加载 JavaScript/TypeScript 配置\n   */\n  private async loadJSConfig(configPath: string): Promise<BuilderConfig> {\n    try {\n      // 使用 jiti 动态导入，支持 TypeScript\n      const jiti = createJiti(import.meta.url, {\n        interopDefault: true,\n        esmResolve: true,\n        cache: false // 禁用缓存以支持配置热重载\n      })\n\n      const configModule = await jiti(configPath)\n\n      // 处理不同的导出格式\n      let config: BuilderConfig\n      if (typeof configModule === 'function') {\n        // 函数式配置\n        const env: Record<string, string> = Object.fromEntries(\n          Object.entries(process.env || {}).map(([k, v]) => [k, v ?? ''])\n        )\n        config = await configModule({\n          mode: process.env.NODE_ENV || 'production',\n          bundler: process.env.BUILDER_BUNDLER || 'rollup',\n          env\n        })\n      } else if (configModule && typeof configModule === 'object') {\n        // 对象配置\n        config = configModule\n      } else {\n        throw new Error('配置文件必须导出对象或函数')\n      }\n\n      return config\n    } catch (error) {\n      throw new BuilderError(\n        ErrorCode.CONFIG_PARSE_ERROR,\n        `解析 JavaScript/TypeScript 配置文件失败: ${configPath}`,\n        {\n          cause: error as Error,\n          suggestion: '请检查配置文件语法是否正确'\n        }\n      )\n    }\n  }\n\n  /**\n   * 加载 JSON 配置\n   */\n  private async loadJSONConfig(configPath: string): Promise<BuilderConfig> {\n    try {\n      const content = await readFile(configPath, 'utf-8')\n\n      // 特殊处理 package.json\n      if (path.basename(configPath) === 'package.json') {\n        const pkg = JSON.parse(content)\n        return pkg.builder || {}\n      }\n\n      return JSON.parse(content)\n    } catch (error) {\n      throw new BuilderError(\n        ErrorCode.CONFIG_PARSE_ERROR,\n        `解析 JSON 配置文件失败: ${configPath}`,\n        {\n          cause: error as Error,\n          suggestion: '请检查 JSON 格式是否正确'\n        }\n      )\n    }\n  }\n\n  /**\n   * 加载多个配置文件并合并\n   */\n  async loadMultipleConfigs(configPaths: string[]): Promise<BuilderConfig> {\n    const configs: BuilderConfig[] = []\n\n    for (const configPath of configPaths) {\n      try {\n        const config = await this.loadConfigFile(configPath)\n        configs.push(config)\n      } catch (error) {\n        // 如果是文件不存在，跳过；其他错误抛出\n        if (error instanceof BuilderError && error.code === ErrorCode.CONFIG_NOT_FOUND) {\n          continue\n        }\n        throw error\n      }\n    }\n\n    if (configs.length === 0) {\n      return { input: 'src/index.ts' }\n    }\n\n    // 合并配置（后面的配置覆盖前面的）\n    return configs.reduce((merged, config) => ({\n      ...merged,\n      ...config\n    }), { input: 'src/index.ts' })\n  }\n\n  /**\n   * 监听配置文件变化\n   */\n  async watchConfigFile(\n    configPath: string,\n    callback: (config: BuilderConfig) => void\n  ): Promise<() => void> {\n    const chokidar = await import('chokidar')\n\n    const watcher = chokidar.watch(configPath, {\n      ignoreInitial: true,\n      persistent: true\n    })\n\n    const handleChange = async () => {\n      try {\n        const config = await this.loadConfigFile(configPath)\n        callback(config)\n      } catch (error) {\n        console.error('重新加载配置文件失败:', error)\n      }\n    }\n\n    watcher.on('change', handleChange)\n    watcher.on('add', handleChange)\n\n    // 返回清理函数\n    return () => {\n      watcher.close()\n    }\n  }\n\n  /**\n   * 获取所有可能的配置文件路径\n   */\n  getAllConfigPaths(baseDir: string = process.cwd()): string[] {\n    return CONFIG_FILE_NAMES.map(name => path.resolve(baseDir, name))\n  }\n\n  /**\n   * 检查配置文件是否存在\n   */\n  async hasConfigFile(baseDir: string = process.cwd()): Promise<boolean> {\n    const configPath = await this.findConfigFile(baseDir)\n    return configPath !== null\n  }\n\n  /**\n   * 获取配置文件的优先级\n   */\n  getConfigFilePriority(configPath: string): number {\n    const fileName = path.basename(configPath)\n    const index = CONFIG_FILE_NAMES.indexOf(fileName as any)\n    return index >= 0 ? index : CONFIG_FILE_NAMES.length\n  }\n\n  /**\n   * 选择最高优先级的配置文件\n   */\n  async selectBestConfigFile(baseDir: string = process.cwd()): Promise<string | null> {\n    const allPaths = this.getAllConfigPaths(baseDir)\n    const existingPaths: Array<{ path: string; priority: number }> = []\n\n    for (const configPath of allPaths) {\n      if (await exists(configPath)) {\n        existingPaths.push({\n          path: configPath,\n          priority: this.getConfigFilePriority(configPath)\n        })\n      }\n    }\n\n    if (existingPaths.length === 0) {\n      return null\n    }\n\n    // 按优先级排序，返回优先级最高的\n    existingPaths.sort((a, b) => a.priority - b.priority)\n    return existingPaths[0].path\n  }\n}\n\n/**\n * 默认配置加载器实例\n */\nexport const configLoader = new ConfigLoader()\n\n/**\n * 便捷函数：查找配置文件\n */\nexport function findConfigFile(startDir?: string): Promise<string | null> {\n  return configLoader.findConfigFile(startDir)\n}\n\n/**\n * 便捷函数：加载配置文件\n */\nexport function loadConfigFile(configPath: string): Promise<BuilderConfig> {\n  return configLoader.loadConfigFile(configPath)\n}\n\n/**\n * 定义配置的上下文参数\n */\nexport interface DefineConfigContext {\n  mode: 'development' | 'production' | string\n  bundler: 'rollup' | 'rolldown'\n  env: Record<string, string>\n}\n\n/**\n * 便捷函数：定义配置\n * \n * @param config - 构建配置对象或返回配置的函数\n * @returns 配置对象或函数\n * \n * @example\n * // 对象配置\n * export default defineConfig({\n *   input: 'src/index.ts',\n *   output: {\n *     esm: true,\n *     cjs: true,\n *     umd: { name: 'MyLib' }\n *   }\n * })\n * \n * @example\n * // 函数配置\n * export default defineConfig((context) => ({\n *   input: 'src/index.ts',\n *   minify: context.mode === 'production'\n * }))\n */\nexport function defineConfig(\n  config: BuilderConfig | ((context: DefineConfigContext) => BuilderConfig | Promise<BuilderConfig>)\n): BuilderConfig | ((context: DefineConfigContext) => BuilderConfig | Promise<BuilderConfig>) {\n  return config\n}\n\n/**\n * 便捷函数：定义异步配置\n * 用于异步计算配置（例如读取远程/本地元数据后生成配置）\n */\nexport function defineAsyncConfig(\n  config:\n    | Promise<BuilderConfig>\n    | ((context: DefineConfigContext) => Promise<BuilderConfig> | BuilderConfig)\n): Promise<BuilderConfig> | ((context: DefineConfigContext) => Promise<BuilderConfig> | BuilderConfig) {\n  return config as any\n}\n"]}