{"version":3,"file":"path-utils.js","sourceRoot":"","sources":["../../src/utils/path-utils.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * 路径处理工具\n * \n * TODO: 后期可以移到 @ldesign/kit 中统一管理\n */\n\nimport path from 'path'\nimport { fileURLToPath } from 'url'\n\n/**\n * 路径工具类\n */\nexport class PathUtils {\n  /**\n   * 规范化路径（统一使用正斜杠）\n   */\n  static normalize(filePath: string): string {\n    return path.posix.normalize(filePath.replace(/\\\\/g, '/'))\n  }\n\n  /**\n   * 解析绝对路径\n   */\n  static resolve(...paths: string[]): string {\n    return path.resolve(...paths)\n  }\n\n  /**\n   * 获取相对路径\n   */\n  static relative(from: string, to: string): string {\n    return this.normalize(path.relative(from, to))\n  }\n\n  /**\n   * 连接路径\n   */\n  static join(...paths: string[]): string {\n    return this.normalize(path.join(...paths))\n  }\n\n  /**\n   * 获取目录名\n   */\n  static dirname(filePath: string): string {\n    return this.normalize(path.dirname(filePath))\n  }\n\n  /**\n   * 获取文件名（包含扩展名）\n   */\n  static basename(filePath: string, ext?: string): string {\n    return path.basename(filePath, ext)\n  }\n\n  /**\n   * 获取文件扩展名\n   */\n  static extname(filePath: string): string {\n    return path.extname(filePath)\n  }\n\n  /**\n   * 获取文件名（不包含扩展名）\n   */\n  static filename(filePath: string): string {\n    return this.basename(filePath, this.extname(filePath))\n  }\n\n  /**\n   * 判断路径是否为绝对路径\n   */\n  static isAbsolute(filePath: string): boolean {\n    return path.isAbsolute(filePath)\n  }\n\n  /**\n   * 转换为绝对路径\n   */\n  static toAbsolute(filePath: string, basePath?: string): string {\n    if (this.isAbsolute(filePath)) {\n      return this.normalize(filePath)\n    }\n    return this.resolve(basePath || process.cwd(), filePath)\n  }\n\n  /**\n   * 转换为相对路径\n   */\n  static toRelative(filePath: string, basePath?: string): string {\n    const base = basePath || process.cwd()\n    if (this.isAbsolute(filePath)) {\n      return this.relative(base, filePath)\n    }\n    return this.normalize(filePath)\n  }\n\n  /**\n   * 替换文件扩展名\n   */\n  static replaceExt(filePath: string, newExt: string): string {\n    const dir = this.dirname(filePath)\n    const name = this.filename(filePath)\n    const ext = newExt.startsWith('.') ? newExt : `.${newExt}`\n    return this.join(dir, `${name}${ext}`)\n  }\n\n  /**\n   * 添加后缀到文件名\n   */\n  static addSuffix(filePath: string, suffix: string): string {\n    const dir = this.dirname(filePath)\n    const name = this.filename(filePath)\n    const ext = this.extname(filePath)\n    return this.join(dir, `${name}${suffix}${ext}`)\n  }\n\n  /**\n   * 获取路径的各个部分\n   */\n  static parse(filePath: string): {\n    root: string\n    dir: string\n    base: string\n    ext: string\n    name: string\n  } {\n    const parsed = path.parse(filePath)\n    return {\n      root: parsed.root,\n      dir: this.normalize(parsed.dir),\n      base: parsed.base,\n      ext: parsed.ext,\n      name: parsed.name\n    }\n  }\n\n  /**\n   * 从路径部分构建路径\n   */\n  static format(pathObject: {\n    root?: string\n    dir?: string\n    base?: string\n    ext?: string\n    name?: string\n  }): string {\n    return this.normalize(path.format(pathObject))\n  }\n\n  /**\n   * 检查路径是否在指定目录内\n   */\n  static isInside(filePath: string, dirPath: string): boolean {\n    const relativePath = this.relative(dirPath, filePath)\n    return !relativePath.startsWith('../') && !this.isAbsolute(relativePath)\n  }\n\n  /**\n   * 获取两个路径的公共父目录\n   */\n  static getCommonParent(path1: string, path2: string): string {\n    const abs1 = this.toAbsolute(path1)\n    const abs2 = this.toAbsolute(path2)\n    \n    const parts1 = abs1.split(path.sep)\n    const parts2 = abs2.split(path.sep)\n    \n    const commonParts: string[] = []\n    const minLength = Math.min(parts1.length, parts2.length)\n    \n    for (let i = 0; i < minLength; i++) {\n      if (parts1[i] === parts2[i]) {\n        commonParts.push(parts1[i])\n      } else {\n        break\n      }\n    }\n    \n    return commonParts.join(path.sep) || path.sep\n  }\n\n  /**\n   * 获取路径深度\n   */\n  static getDepth(filePath: string): number {\n    const normalized = this.normalize(filePath)\n    if (normalized === '/' || normalized === '.') {\n      return 0\n    }\n    return normalized.split('/').filter(part => part && part !== '.').length\n  }\n\n  /**\n   * 匹配路径模式\n   */\n  static matchPattern(filePath: string, pattern: string): boolean {\n    // 简单的 glob 模式匹配\n    const regexPattern = pattern\n      .replace(/\\./g, '\\\\.')\n      .replace(/\\*/g, '.*')\n      .replace(/\\?/g, '.')\n    \n    const regex = new RegExp(`^${regexPattern}$`)\n    return regex.test(this.normalize(filePath))\n  }\n\n  /**\n   * 获取文件的 URL 路径\n   */\n  static toFileURL(filePath: string): string {\n    const absolutePath = this.toAbsolute(filePath)\n    return `file://${absolutePath.replace(/\\\\/g, '/')}`\n  }\n\n  /**\n   * 从文件 URL 获取路径\n   */\n  static fromFileURL(fileURL: string): string {\n    return this.normalize(fileURLToPath(fileURL))\n  }\n\n  /**\n   * 获取项目根目录\n   */\n  static findProjectRoot(startPath?: string): string {\n    let currentPath = startPath || process.cwd()\n    \n    while (currentPath !== path.dirname(currentPath)) {\n      // 检查是否存在 package.json\n      const packageJsonPath = this.join(currentPath, 'package.json')\n      if (require('fs').existsSync(packageJsonPath)) {\n        return currentPath\n      }\n      \n      // 检查是否存在 .git 目录\n      const gitPath = this.join(currentPath, '.git')\n      if (require('fs').existsSync(gitPath)) {\n        return currentPath\n      }\n      \n      currentPath = path.dirname(currentPath)\n    }\n    \n    // 如果没找到，返回起始路径\n    return startPath || process.cwd()\n  }\n\n  /**\n   * 获取相对于项目根目录的路径\n   */\n  static getProjectRelativePath(filePath: string, projectRoot?: string): string {\n    const root = projectRoot || this.findProjectRoot()\n    return this.relative(root, filePath)\n  }\n\n  /**\n   * 清理路径（移除多余的分隔符和相对路径符号）\n   */\n  static clean(filePath: string): string {\n    return this.normalize(filePath)\n      .replace(/\\/+/g, '/') // 移除多余的斜杠\n      .replace(/\\/\\.\\//g, '/') // 移除 ./\n      .replace(/\\/\\.$/, '') // 移除结尾的 /.\n      .replace(/^\\.\\//g, '') // 移除开头的 ./\n  }\n\n  /**\n   * 确保路径以指定字符结尾\n   */\n  static ensureTrailingSlash(dirPath: string): string {\n    const normalized = this.normalize(dirPath)\n    return normalized.endsWith('/') ? normalized : `${normalized}/`\n  }\n\n  /**\n   * 确保路径不以指定字符结尾\n   */\n  static removeTrailingSlash(dirPath: string): string {\n    const normalized = this.normalize(dirPath)\n    return normalized.endsWith('/') ? normalized.slice(0, -1) : normalized\n  }\n\n  /**\n   * 获取路径的所有父目录\n   */\n  static getParents(filePath: string): string[] {\n    const parents: string[] = []\n    let currentPath = this.dirname(filePath)\n    \n    while (currentPath !== this.dirname(currentPath)) {\n      parents.push(currentPath)\n      currentPath = this.dirname(currentPath)\n    }\n    \n    return parents\n  }\n\n  /**\n   * 检查路径是否为隐藏文件或目录\n   */\n  static isHidden(filePath: string): boolean {\n    const basename = this.basename(filePath)\n    return basename.startsWith('.')\n  }\n\n  /**\n   * 获取平台特定的路径分隔符\n   */\n  static get sep(): string {\n    return path.sep\n  }\n\n  /**\n   * 获取平台特定的路径定界符\n   */\n  static get delimiter(): string {\n    return path.delimiter\n  }\n}\n\n// 导出便捷函数\nexport const {\n  normalize,\n  resolve,\n  relative,\n  join,\n  dirname,\n  basename,\n  extname,\n  filename,\n  isAbsolute,\n  toAbsolute,\n  toRelative,\n  replaceExt,\n  addSuffix,\n  parse,\n  format,\n  isInside,\n  getCommonParent,\n  getDepth,\n  matchPattern,\n  toFileURL,\n  fromFileURL,\n  findProjectRoot,\n  getProjectRelativePath,\n  clean,\n  ensureTrailingSlash,\n  removeTrailingSlash,\n  getParents,\n  isHidden\n} = PathUtils\n"]}