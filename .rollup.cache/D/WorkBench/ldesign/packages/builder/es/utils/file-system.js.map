{"version":3,"file":"file-system.js","sourceRoot":"","sources":["../../src/utils/file-system.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * 文件系统操作工具\r\n * \r\n * TODO: 后期可以移到 @ldesign/kit 中统一管理\r\n */\r\n\r\nimport { promises as fs } from 'fs'\r\nimport path from 'path'\r\nimport fastGlob from 'fast-glob'\r\nimport type { FileInfo } from '../types/common'\r\n\r\n/**\r\n * 文件系统工具类\r\n */\r\nexport class FileSystem {\r\n  /**\r\n   * 检查文件或目录是否存在\r\n   */\r\n  static async exists(filePath: string): Promise<boolean> {\r\n    try {\r\n      await fs.access(filePath)\r\n      return true\r\n    } catch {\r\n      return false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 同步检查文件或目录是否存在\r\n   */\r\n  static existsSync(filePath: string): boolean {\r\n    try {\r\n      // 使用显式导入而不是 require\r\n      const { accessSync } = require('fs')\r\n      accessSync(filePath)\r\n      return true\r\n    } catch {\r\n      return false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 读取文件内容\r\n   */\r\n  static async readFile(filePath: string, encoding: BufferEncoding = 'utf8'): Promise<string> {\r\n    return fs.readFile(filePath, encoding)\r\n  }\r\n\r\n  /**\r\n   * 写入文件内容\r\n   */\r\n  static async writeFile(filePath: string, content: string, encoding: BufferEncoding = 'utf8'): Promise<void> {\r\n    // 确保目录存在\r\n    await this.ensureDir(path.dirname(filePath))\r\n    return fs.writeFile(filePath, content, encoding)\r\n  }\r\n\r\n  /**\r\n   * 复制文件\r\n   */\r\n  static async copyFile(src: string, dest: string): Promise<void> {\r\n    // 确保目标目录存在\r\n    await this.ensureDir(path.dirname(dest))\r\n    return fs.copyFile(src, dest)\r\n  }\r\n\r\n  /**\r\n   * 删除文件\r\n   */\r\n  static async removeFile(filePath: string): Promise<void> {\r\n    if (await this.exists(filePath)) {\r\n      return fs.unlink(filePath)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 创建目录\r\n   */\r\n  static async ensureDir(dirPath: string): Promise<void> {\r\n    try {\r\n      await fs.mkdir(dirPath, { recursive: true })\r\n    } catch (error) {\r\n      // 忽略目录已存在的错误\r\n      if ((error as NodeJS.ErrnoException).code !== 'EEXIST') {\r\n        throw error\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 删除目录\r\n   */\r\n  static async removeDir(dirPath: string): Promise<void> {\r\n    if (await this.exists(dirPath)) {\r\n      return fs.rmdir(dirPath, { recursive: true })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 清空目录\r\n   */\r\n  static async emptyDir(dirPath: string): Promise<void> {\r\n    if (await this.exists(dirPath)) {\r\n      const files = await fs.readdir(dirPath)\r\n      await Promise.all(\r\n        files.map(async (file) => {\r\n          const filePath = path.join(dirPath, file)\r\n          const stat = await fs.stat(filePath)\r\n          if (stat.isDirectory()) {\r\n            await this.removeDir(filePath)\r\n          } else {\r\n            await this.removeFile(filePath)\r\n          }\r\n        })\r\n      )\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取文件统计信息\r\n   */\r\n  static async stat(filePath: string): Promise<FileInfo> {\r\n    const stats = await fs.stat(filePath)\r\n    const ext = path.extname(filePath)\r\n\r\n    return {\r\n      path: filePath,\r\n      size: stats.size,\r\n      type: stats.isDirectory() ? 'directory' : this.getFileType(ext)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 读取目录内容\r\n   */\r\n  static async readDir(dirPath: string): Promise<string[]> {\r\n    return fs.readdir(dirPath)\r\n  }\r\n\r\n  /**\r\n   * 递归读取目录内容\r\n   */\r\n  static async readDirRecursive(dirPath: string): Promise<string[]> {\r\n    const files: string[] = []\r\n\r\n    const traverse = async (currentPath: string) => {\r\n      const items = await fs.readdir(currentPath)\r\n\r\n      for (const item of items) {\r\n        const itemPath = path.join(currentPath, item)\r\n        const stat = await fs.stat(itemPath)\r\n\r\n        if (stat.isDirectory()) {\r\n          await traverse(itemPath)\r\n        } else {\r\n          files.push(itemPath)\r\n        }\r\n      }\r\n    }\r\n\r\n    await traverse(dirPath)\r\n    return files\r\n  }\r\n\r\n  /**\r\n   * 使用 glob 模式查找文件\r\n   */\r\n  static async glob(pattern: string | string[], options: {\r\n    cwd?: string\r\n    ignore?: string[]\r\n    absolute?: boolean\r\n    onlyFiles?: boolean\r\n    onlyDirectories?: boolean\r\n  } = {}): Promise<string[]> {\r\n    return fastGlob(pattern, {\r\n      cwd: options.cwd || process.cwd(),\r\n      ignore: options.ignore || [],\r\n      absolute: options.absolute ?? true,\r\n      onlyFiles: options.onlyFiles ?? true,\r\n      onlyDirectories: options.onlyDirectories ?? false\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 查找文件\r\n   */\r\n  static async findFiles(\r\n    patterns: string[],\r\n    options: {\r\n      cwd?: string\r\n      ignore?: string[]\r\n      maxDepth?: number\r\n    } = {}\r\n  ): Promise<string[]> {\r\n    return this.glob(patterns, {\r\n      cwd: options.cwd,\r\n      ignore: options.ignore,\r\n      onlyFiles: true\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 查找目录\r\n   */\r\n  static async findDirs(\r\n    patterns: string[],\r\n    options: {\r\n      cwd?: string\r\n      ignore?: string[]\r\n      maxDepth?: number\r\n    } = {}\r\n  ): Promise<string[]> {\r\n    return this.glob(patterns, {\r\n      cwd: options.cwd,\r\n      ignore: options.ignore,\r\n      onlyDirectories: true\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 获取文件大小\r\n   */\r\n  static async getFileSize(filePath: string): Promise<number> {\r\n    const stats = await fs.stat(filePath)\r\n    return stats.size\r\n  }\r\n\r\n  /**\r\n   * 获取目录大小\r\n   */\r\n  static async getDirSize(dirPath: string): Promise<number> {\r\n    let totalSize = 0\r\n\r\n    const traverse = async (currentPath: string) => {\r\n      const items = await fs.readdir(currentPath)\r\n\r\n      for (const item of items) {\r\n        const itemPath = path.join(currentPath, item)\r\n        const stat = await fs.stat(itemPath)\r\n\r\n        if (stat.isDirectory()) {\r\n          await traverse(itemPath)\r\n        } else {\r\n          totalSize += stat.size\r\n        }\r\n      }\r\n    }\r\n\r\n    await traverse(dirPath)\r\n    return totalSize\r\n  }\r\n\r\n  /**\r\n   * 检查路径是否为文件\r\n   */\r\n  static async isFile(filePath: string): Promise<boolean> {\r\n    try {\r\n      const stats = await fs.stat(filePath)\r\n      return stats.isFile()\r\n    } catch {\r\n      return false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 检查路径是否为目录\r\n   */\r\n  static async isDirectory(dirPath: string): Promise<boolean> {\r\n    try {\r\n      const stats = await fs.stat(dirPath)\r\n      return stats.isDirectory()\r\n    } catch {\r\n      return false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取文件的修改时间\r\n   */\r\n  static async getModifiedTime(filePath: string): Promise<Date> {\r\n    const stats = await fs.stat(filePath)\r\n    return stats.mtime\r\n  }\r\n\r\n  /**\r\n   * 比较文件修改时间\r\n   */\r\n  static async isNewer(file1: string, file2: string): Promise<boolean> {\r\n    if (!(await this.exists(file1))) return false\r\n    if (!(await this.exists(file2))) return true\r\n\r\n    const time1 = await this.getModifiedTime(file1)\r\n    const time2 = await this.getModifiedTime(file2)\r\n\r\n    return time1 > time2\r\n  }\r\n\r\n  /**\r\n   * 创建临时文件\r\n   */\r\n  static async createTempFile(prefix: string = 'temp', suffix: string = '.tmp'): Promise<string> {\r\n    const tempDir = require('os').tmpdir()\r\n    const fileName = `${prefix}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}${suffix}`\r\n    return path.join(tempDir, fileName)\r\n  }\r\n\r\n  /**\r\n   * 创建临时目录\r\n   */\r\n  static async createTempDir(prefix: string = 'temp'): Promise<string> {\r\n    const tempDir = require('os').tmpdir()\r\n    const dirName = `${prefix}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\r\n    const tempDirPath = path.join(tempDir, dirName)\r\n    await this.ensureDir(tempDirPath)\r\n    return tempDirPath\r\n  }\r\n\r\n  /**\r\n   * 获取文件类型\r\n   */\r\n  private static getFileType(extension: string): string {\r\n    const typeMap: Record<string, string> = {\r\n      '.js': 'javascript',\r\n      '.ts': 'typescript',\r\n      '.jsx': 'jsx',\r\n      '.tsx': 'tsx',\r\n      '.vue': 'vue',\r\n      '.css': 'css',\r\n      '.less': 'less',\r\n      '.scss': 'scss',\r\n      '.sass': 'sass',\r\n      '.json': 'json',\r\n      '.md': 'markdown',\r\n      '.html': 'html',\r\n      '.xml': 'xml',\r\n      '.svg': 'svg',\r\n      '.png': 'image',\r\n      '.jpg': 'image',\r\n      '.jpeg': 'image',\r\n      '.gif': 'image',\r\n      '.webp': 'image'\r\n    }\r\n\r\n    return typeMap[extension.toLowerCase()] || 'unknown'\r\n  }\r\n}\r\n\r\n// 导出便捷函数\r\nexport const {\r\n  exists,\r\n  existsSync,\r\n  readFile,\r\n  writeFile,\r\n  copyFile,\r\n  removeFile,\r\n  ensureDir,\r\n  removeDir,\r\n  emptyDir,\r\n  stat,\r\n  readDir,\r\n  readDirRecursive,\r\n  findDirs,\r\n  getFileSize,\r\n  getDirSize,\r\n  isFile,\r\n  isDirectory,\r\n  getModifiedTime,\r\n  isNewer,\r\n  createTempFile,\r\n  createTempDir\r\n} = FileSystem\r\n\r\n// 单独导出 findFiles 以保持正确的 this 上下文\r\nexport const findFiles = FileSystem.findFiles.bind(FileSystem)\r\n"]}