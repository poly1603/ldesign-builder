{"version":3,"file":"ValidationReporter.js","sourceRoot":"","sources":["../../src/core/ValidationReporter.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * 验证报告生成器\n * \n * 负责生成和输出验证报告\n * 支持多种格式的报告输出\n * \n * @author LDesign Team\n * @version 1.0.0\n */\n\nimport * as path from 'path'\nimport * as fs from 'fs-extra'\nimport type {\n  IValidationReporter,\n  ValidationReport,\n  ValidationReportingConfig,\n  ValidationResult,\n  ValidationSummary\n} from '../types/validation'\nimport { Logger } from '../utils/logger'\n\n/**\n * 验证报告生成器实现\n */\nexport class ValidationReporter implements IValidationReporter {\n  /** 日志记录器 */\n  private logger: Logger\n\n  /**\n   * 构造函数\n   */\n  constructor(options: {\n    logger?: Logger\n  } = {}) {\n    this.logger = options.logger || new Logger({ level: 'info', prefix: 'ValidationReporter' })\n  }\n\n  /**\n   * 生成报告\n   */\n  async generateReport(\n    result: ValidationResult,\n    _config: ValidationReportingConfig\n  ): Promise<ValidationReport> {\n    this.logger.info('生成验证报告...')\n\n    const report: ValidationReport = {\n      title: `构建验证报告 - ${result.validationId}`,\n      summary: this.generateSummary(result),\n      details: {\n        fileResults: [],\n        formatResults: [],\n        typeResults: [],\n        styleResults: []\n      },\n      recommendations: this.generateRecommendations(result),\n      generatedAt: Date.now(),\n      version: '1.0.0'\n    }\n\n    return report\n  }\n\n  /**\n   * 输出报告\n   */\n  async outputReport(\n    report: ValidationReport,\n    config: ValidationReportingConfig\n  ): Promise<void> {\n    this.logger.info(`输出验证报告 (格式: ${config.format})`)\n\n    switch (config.format) {\n      case 'console':\n        await this.outputConsoleReport(report, config)\n        break\n      case 'json':\n        await this.outputJsonReport(report, config)\n        break\n      case 'html':\n        await this.outputHtmlReport(report, config)\n        break\n      case 'markdown':\n        await this.outputMarkdownReport(report, config)\n        break\n      default:\n        await this.outputConsoleReport(report, config)\n    }\n  }\n\n  /**\n   * 生成摘要\n   */\n  private generateSummary(result: ValidationResult): ValidationSummary {\n    return {\n      status: result.success ? 'passed' : 'failed',\n      totalFiles: result.stats.totalFiles,\n      passedFiles: result.success ? result.stats.totalFiles : 0,\n      failedFiles: result.success ? 0 : result.stats.totalFiles,\n      totalTests: result.testResult.totalTests,\n      passedTests: result.testResult.passedTests,\n      failedTests: result.testResult.failedTests,\n      duration: result.duration\n    }\n  }\n\n  /**\n   * 生成建议\n   */\n  private generateRecommendations(result: ValidationResult): any[] {\n    const recommendations: any[] = []\n\n    // 如果验证失败，添加建议\n    if (!result.success) {\n      recommendations.push({\n        type: 'error',\n        title: '验证失败',\n        description: '打包后的代码验证失败，请检查构建配置和测试用例',\n        solution: '检查构建输出和测试日志，修复相关问题',\n        priority: 'high'\n      })\n    }\n\n    // 如果有错误，添加具体建议\n    if (result.errors.length > 0) {\n      recommendations.push({\n        type: 'error',\n        title: '发现错误',\n        description: `发现 ${result.errors.length} 个错误`,\n        solution: '查看详细错误信息并逐一修复',\n        priority: 'high'\n      })\n    }\n\n    // 如果有警告，添加建议\n    if (result.warnings.length > 0) {\n      recommendations.push({\n        type: 'warning',\n        title: '发现警告',\n        description: `发现 ${result.warnings.length} 个警告`,\n        solution: '查看警告信息并考虑优化',\n        priority: 'medium'\n      })\n    }\n\n    // 性能建议\n    if (result.duration > 60000) {\n      recommendations.push({\n        type: 'optimization',\n        title: '验证耗时较长',\n        description: `验证耗时 ${Math.round(result.duration / 1000)}s，建议优化`,\n        solution: '考虑减少测试用例数量或优化测试性能',\n        priority: 'low'\n      })\n    }\n\n    return recommendations\n  }\n\n  /**\n   * 输出控制台报告\n   */\n  private async outputConsoleReport(\n    report: ValidationReport,\n    config: ValidationReportingConfig\n  ): Promise<void> {\n    const { summary } = report\n\n    console.log('\\n' + '='.repeat(60))\n    console.log(`📋 ${report.title}`)\n    console.log('='.repeat(60))\n\n    // 状态\n    const statusIcon = summary.status === 'passed' ? '✅' : '❌'\n    const statusText = summary.status === 'passed' ? '通过' : '失败'\n    console.log(`\\n${statusIcon} 验证状态: ${statusText}`)\n\n    // 统计信息\n    console.log('\\n📊 统计信息:')\n    console.log(`   总测试数: ${summary.totalTests}`)\n    console.log(`   通过测试: ${summary.passedTests}`)\n    console.log(`   失败测试: ${summary.failedTests}`)\n    console.log(`   验证耗时: ${Math.round(summary.duration / 1000)}s`)\n\n    // 建议\n    if (report.recommendations.length > 0) {\n      console.log('\\n💡 建议:')\n      report.recommendations.forEach((rec, index) => {\n        const icon = this.getRecommendationIcon(rec.type)\n        console.log(`   ${index + 1}. ${icon} ${rec.title}`)\n        if (config.verbose) {\n          console.log(`      ${rec.description}`)\n          if (rec.solution) {\n            console.log(`      解决方案: ${rec.solution}`)\n          }\n        }\n      })\n    }\n\n    console.log('\\n' + '='.repeat(60) + '\\n')\n  }\n\n  /**\n   * 输出 JSON 报告\n   */\n  private async outputJsonReport(\n    report: ValidationReport,\n    config: ValidationReportingConfig\n  ): Promise<void> {\n    const outputPath = config.outputPath || 'validation-report.json'\n    const reportJson = JSON.stringify(report, null, 2)\n\n    await fs.ensureDir(path.dirname(outputPath))\n    await fs.writeFile(outputPath, reportJson, 'utf8')\n\n    this.logger.success(`JSON 报告已保存到: ${outputPath}`)\n  }\n\n  /**\n   * 输出 HTML 报告\n   */\n  private async outputHtmlReport(\n    report: ValidationReport,\n    config: ValidationReportingConfig\n  ): Promise<void> {\n    const outputPath = config.outputPath || 'validation-report.html'\n    const html = this.generateHtmlReport(report)\n\n    await fs.ensureDir(path.dirname(outputPath))\n    await fs.writeFile(outputPath, html, 'utf8')\n\n    this.logger.success(`HTML 报告已保存到: ${outputPath}`)\n  }\n\n  /**\n   * 输出 Markdown 报告\n   */\n  private async outputMarkdownReport(\n    report: ValidationReport,\n    config: ValidationReportingConfig\n  ): Promise<void> {\n    const outputPath = config.outputPath || 'validation-report.md'\n    const markdown = this.generateMarkdownReport(report)\n\n    await fs.ensureDir(path.dirname(outputPath))\n    await fs.writeFile(outputPath, markdown, 'utf8')\n\n    this.logger.success(`Markdown 报告已保存到: ${outputPath}`)\n  }\n\n  /**\n   * 生成 HTML 报告\n   */\n  private generateHtmlReport(report: ValidationReport): string {\n    const { summary } = report\n    const statusClass = summary.status === 'passed' ? 'success' : 'error'\n\n    return `\n<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>${report.title}</title>\n    <style>\n        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 40px; }\n        .header { border-bottom: 2px solid #eee; padding-bottom: 20px; margin-bottom: 30px; }\n        .status { padding: 10px 20px; border-radius: 5px; margin: 20px 0; }\n        .success { background-color: #d4edda; color: #155724; border: 1px solid #c3e6cb; }\n        .error { background-color: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }\n        .stats { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin: 20px 0; }\n        .stat-card { background: #f8f9fa; padding: 15px; border-radius: 5px; text-align: center; }\n        .stat-number { font-size: 2em; font-weight: bold; color: #007bff; }\n        .recommendations { margin-top: 30px; }\n        .recommendation { margin: 10px 0; padding: 15px; border-left: 4px solid #007bff; background: #f8f9fa; }\n    </style>\n</head>\n<body>\n    <div class=\"header\">\n        <h1>${report.title}</h1>\n        <p>生成时间: ${new Date(report.generatedAt).toLocaleString()}</p>\n    </div>\n\n    <div class=\"status ${statusClass}\">\n        <h2>验证状态: ${summary.status === 'passed' ? '✅ 通过' : '❌ 失败'}</h2>\n    </div>\n\n    <div class=\"stats\">\n        <div class=\"stat-card\">\n            <div class=\"stat-number\">${summary.totalTests}</div>\n            <div>总测试数</div>\n        </div>\n        <div class=\"stat-card\">\n            <div class=\"stat-number\">${summary.passedTests}</div>\n            <div>通过测试</div>\n        </div>\n        <div class=\"stat-card\">\n            <div class=\"stat-number\">${summary.failedTests}</div>\n            <div>失败测试</div>\n        </div>\n        <div class=\"stat-card\">\n            <div class=\"stat-number\">${Math.round(summary.duration / 1000)}s</div>\n            <div>验证耗时</div>\n        </div>\n    </div>\n\n    ${report.recommendations.length > 0 ? `\n    <div class=\"recommendations\">\n        <h2>💡 建议</h2>\n        ${report.recommendations.map(rec => `\n        <div class=\"recommendation\">\n            <h3>${this.getRecommendationIcon(rec.type)} ${rec.title}</h3>\n            <p>${rec.description}</p>\n            ${rec.solution ? `<p><strong>解决方案:</strong> ${rec.solution}</p>` : ''}\n        </div>\n        `).join('')}\n    </div>\n    ` : ''}\n</body>\n</html>\n    `.trim()\n  }\n\n  /**\n   * 生成 Markdown 报告\n   */\n  private generateMarkdownReport(report: ValidationReport): string {\n    const { summary } = report\n\n    return `\n# ${report.title}\n\n**生成时间:** ${new Date(report.generatedAt).toLocaleString()}\n\n## 验证状态\n\n${summary.status === 'passed' ? '✅ **通过**' : '❌ **失败**'}\n\n## 统计信息\n\n| 项目 | 数量 |\n|------|------|\n| 总测试数 | ${summary.totalTests} |\n| 通过测试 | ${summary.passedTests} |\n| 失败测试 | ${summary.failedTests} |\n| 验证耗时 | ${Math.round(summary.duration / 1000)}s |\n\n${report.recommendations.length > 0 ? `\n## 💡 建议\n\n${report.recommendations.map((rec, index) => `\n### ${index + 1}. ${this.getRecommendationIcon(rec.type)} ${rec.title}\n\n${rec.description}\n\n${rec.solution ? `**解决方案:** ${rec.solution}` : ''}\n`).join('')}\n` : ''}\n    `.trim()\n  }\n\n  /**\n   * 获取建议图标\n   */\n  private getRecommendationIcon(type: string): string {\n    switch (type) {\n      case 'error': return '❌'\n      case 'warning': return '⚠️'\n      case 'info': return 'ℹ️'\n      case 'optimization': return '⚡'\n      default: return '💡'\n    }\n  }\n}\n"]}