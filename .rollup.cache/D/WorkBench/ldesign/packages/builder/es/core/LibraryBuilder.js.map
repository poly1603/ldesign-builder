{"version":3,"file":"LibraryBuilder.js","sourceRoot":"","sources":["../../src/core/LibraryBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * 库构建器主控制器类\r\n * \r\n * 这是 @ldesign/builder 的核心类，负责协调各个组件完成库的构建工作\r\n * \r\n * @author LDesign Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { EventEmitter } from 'events'\r\nimport {\r\n  ILibraryBuilder,\r\n  BuilderOptions,\r\n  BuilderStatus,\r\n  BuildResult,\r\n  BuildWatcher\r\n} from '../types/builder'\r\nimport type { BuilderConfig } from '../types/config'\r\nimport type { ValidationResult } from '../types/common'\r\nimport type { LibraryType } from '../types/library'\r\nimport type {\r\n  ValidationResult as PostBuildValidationResult,\r\n  ValidationContext\r\n} from '../types/validation'\r\nimport { ConfigManager } from './ConfigManager'\r\nimport { StrategyManager } from './StrategyManager'\r\nimport { PluginManager } from './PluginManager'\r\nimport { LibraryDetector } from './LibraryDetector'\r\nimport { PerformanceMonitor } from './PerformanceMonitor'\r\nimport { PostBuildValidator } from './PostBuildValidator'\r\nimport { BundlerAdapterFactory } from '../adapters/base/AdapterFactory'\r\nimport type { IBundlerAdapter } from '../types/adapter'\r\nimport { Logger, createLogger } from '../utils/logger'\r\nimport { ErrorHandler, createErrorHandler } from '../utils/error-handler'\r\nimport { ErrorCode } from '../constants/errors'\r\nimport { DEFAULT_BUILDER_CONFIG } from '../constants/defaults'\r\nimport { getOutputDirs } from '../utils/glob'\r\nimport { promises as fs } from 'fs'\r\nimport path from 'path'\r\nimport { getGlobalMemoryManager } from '../utils/memory-manager'\r\nimport { PackageUpdater } from '../utils/package-updater'\r\n\r\n/**\r\n * 库构建器主控制器类\r\n * \r\n * 采用依赖注入模式，统一管理各种服务组件\r\n * 继承 EventEmitter，支持事件驱动的构建流程\r\n */\r\nexport class LibraryBuilder extends EventEmitter implements ILibraryBuilder {\r\n  /** 当前状态 */\r\n  private status: BuilderStatus = BuilderStatus.IDLE\r\n\r\n  /** 当前配置 */\r\n  private config: BuilderConfig\r\n\r\n  /** 打包核心适配器 */\r\n  private bundlerAdapter!: IBundlerAdapter\r\n\r\n  /** 策略管理器 */\r\n  private strategyManager!: StrategyManager\r\n\r\n  /** 配置管理器 */\r\n  private configManager!: ConfigManager\r\n\r\n  /** 插件管理器 */\r\n  private pluginManager!: PluginManager\r\n\r\n  /** 日志记录器 */\r\n  private logger!: Logger\r\n\r\n  /** 错误处理器 */\r\n  private errorHandler!: ErrorHandler\r\n\r\n  /** 性能监控器 */\r\n  private performanceMonitor!: PerformanceMonitor\r\n\r\n  /** 库类型检测器 */\r\n  private libraryDetector!: LibraryDetector\r\n\r\n  /** 打包后验证器 */\r\n  private postBuildValidator!: PostBuildValidator\r\n\r\n  /** 当前构建统计 */\r\n  private currentStats: any = null\r\n\r\n  /** 当前性能指标 */\r\n  private currentMetrics: any = null\r\n\r\n  /** 内存管理器 */\r\n  private memoryManager = getGlobalMemoryManager()\r\n\r\n  /** 文件监听器 */\r\n  private fileWatchers: Set<any> = new Set()\r\n\r\n  /** 清理函数列表 */\r\n  private cleanupFunctions: Array<() => void | Promise<void>> = []\r\n\r\n  constructor(options: BuilderOptions = {}) {\r\n    super()\r\n\r\n    // 初始化各种服务\r\n    this.initializeServices(options)\r\n\r\n    // 设置事件监听器\r\n    this.setupEventListeners()\r\n\r\n    // 设置错误处理\r\n    this.setupErrorHandling()\r\n\r\n    // 初始化配置\r\n    this.config = { ...DEFAULT_BUILDER_CONFIG, ...options.config }\r\n\r\n    // 注册清理函数\r\n    this.registerCleanup()\r\n  }\r\n\r\n  /**\r\n   * 执行库构建\r\n   * \r\n   * @param config 可选的配置覆盖\r\n   * @returns 构建结果\r\n   */\r\n  async build(config?: BuilderConfig): Promise<BuildResult> {\r\n    const buildId = this.generateBuildId()\r\n\r\n    try {\r\n      // 设置构建状态\r\n      this.setStatus(BuilderStatus.BUILDING)\r\n\r\n      // 合并配置\r\n      const mergedConfig = config ? this.mergeConfig(this.config, config) : this.config\r\n\r\n      // 清理输出目录（如果启用）\r\n      if (mergedConfig.clean) {\r\n        await this.cleanOutputDirs(mergedConfig)\r\n      }\r\n\r\n      // 根据配置切换打包核心（确保与 CLI/配置一致）\r\n      if (mergedConfig.bundler && mergedConfig.bundler !== this.bundlerAdapter.name) {\r\n        this.setBundler(mergedConfig.bundler)\r\n      }\r\n\r\n      // 发出构建开始事件\r\n      this.emit('build:start', {\r\n        config: mergedConfig,\r\n        timestamp: Date.now(),\r\n        buildId\r\n      })\r\n\r\n      // 开始性能监控\r\n      this.performanceMonitor.startBuild(buildId)\r\n\r\n      // 获取库类型（优先使用配置中指定的类型；否则基于项目根目录自动检测）\r\n      const projectRoot = (mergedConfig as any).cwd || process.cwd()\r\n      let libraryType = mergedConfig.libraryType || await this.detectLibraryType(projectRoot)\r\n\r\n      // 确保 libraryType 是正确的枚举值\r\n      if (typeof libraryType === 'string') {\r\n        libraryType = libraryType as LibraryType\r\n      }\r\n\r\n      // 获取构建策略\r\n      const strategy = this.strategyManager.getStrategy(libraryType)\r\n\r\n      // 应用策略配置\r\n      const strategyConfig = await strategy.applyStrategy(mergedConfig)\r\n\r\n      // 执行构建\r\n      const result = await this.bundlerAdapter.build(strategyConfig)\r\n\r\n      // 执行打包后验证（如果启用）\r\n      let validationResult: PostBuildValidationResult | undefined\r\n      if (mergedConfig.postBuildValidation?.enabled) {\r\n        validationResult = await this.runPostBuildValidation(mergedConfig, result, buildId)\r\n      }\r\n\r\n      // 结束性能监控\r\n      const metrics = this.performanceMonitor.endBuild(buildId)\r\n\r\n      // 构建成功\r\n      const buildResult: BuildResult = {\r\n        success: true,\r\n        outputs: result.outputs,\r\n        duration: metrics.buildTime,\r\n        stats: result.stats,\r\n        performance: metrics,\r\n        warnings: result.warnings || [],\r\n        errors: [],\r\n        buildId,\r\n        timestamp: Date.now(),\r\n        bundler: this.bundlerAdapter.name,\r\n        mode: mergedConfig.mode || 'production',\r\n        libraryType,\r\n        validation: validationResult\r\n      }\r\n\r\n      // 保存统计信息\r\n      this.currentStats = buildResult.stats\r\n      this.currentMetrics = buildResult.performance\r\n\r\n      // 自动更新 package.json（如果启用）\r\n      await this.updatePackageJsonIfEnabled(mergedConfig, projectRoot)\r\n\r\n      // 发出构建结束事件\r\n      this.emit('build:end', {\r\n        result: buildResult,\r\n        duration: buildResult.duration,\r\n        timestamp: Date.now()\r\n      })\r\n\r\n      // 重置状态\r\n      this.setStatus(BuilderStatus.IDLE)\r\n\r\n      return buildResult\r\n\r\n    } catch (error) {\r\n      // 处理构建错误\r\n      const buildError = this.handleBuildError(error as Error, buildId)\r\n\r\n      // 发出错误事件\r\n      this.emit('build:error', {\r\n        error: buildError,\r\n        phase: 'build',\r\n        timestamp: Date.now()\r\n      })\r\n\r\n      // 重置状态\r\n      this.setStatus(BuilderStatus.ERROR)\r\n\r\n      throw buildError\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 启动监听构建模式\r\n   * \r\n   * @param config 可选的配置覆盖\r\n   * @returns 构建监听器\r\n   */\r\n  async buildWatch(config?: BuilderConfig): Promise<BuildWatcher> {\r\n    try {\r\n      // 设置监听状态\r\n      this.setStatus(BuilderStatus.WATCHING)\r\n\r\n      // 合并配置\r\n      const mergedConfig = config ? this.mergeConfig(this.config, config) : this.config\r\n\r\n      // 根据配置切换打包核心（确保与 CLI/配置一致）\r\n      if (mergedConfig.bundler && mergedConfig.bundler !== this.bundlerAdapter.name) {\r\n        this.setBundler(mergedConfig.bundler)\r\n      }\r\n\r\n      // 获取库类型（优先使用配置中指定的类型；否则基于项目根目录自动检测）\r\n      const projectRoot = (mergedConfig as any).cwd || process.cwd()\r\n      let libraryType = mergedConfig.libraryType || await this.detectLibraryType(projectRoot)\r\n\r\n      // 确保 libraryType 是正确的枚举值\r\n      if (typeof libraryType === 'string') {\r\n        libraryType = libraryType as LibraryType\r\n      }\r\n\r\n      // 获取构建策略\r\n      const strategy = this.strategyManager.getStrategy(libraryType)\r\n\r\n      // 应用策略配置\r\n      const strategyConfig = await strategy.applyStrategy(mergedConfig)\r\n\r\n      // 启动监听\r\n      const watcher = await this.bundlerAdapter.watch(strategyConfig)\r\n\r\n      // 发出监听开始事件\r\n      this.emit('watch:start', {\r\n        patterns: watcher.patterns,\r\n        timestamp: Date.now()\r\n      })\r\n\r\n      return watcher\r\n\r\n    } catch (error) {\r\n      this.setStatus(BuilderStatus.ERROR)\r\n      throw this.errorHandler.createError(\r\n        ErrorCode.BUILD_FAILED,\r\n        '启动监听模式失败',\r\n        { cause: error as Error }\r\n      )\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 合并配置\r\n   */\r\n  mergeConfig(base: BuilderConfig, override: BuilderConfig): BuilderConfig {\r\n    return this.configManager.mergeConfigs(base, override)\r\n  }\r\n\r\n  /**\r\n   * 验证配置\r\n   */\r\n  validateConfig(config: BuilderConfig): ValidationResult {\r\n    return this.configManager.validateConfig(config)\r\n  }\r\n\r\n  /**\r\n   * 加载配置文件\r\n   */\r\n  async loadConfig(configPath?: string): Promise<BuilderConfig> {\r\n    const config = await this.configManager.loadConfig(configPath ? { configFile: configPath } : {})\r\n    this.config = config\r\n    return config\r\n  }\r\n\r\n  /**\r\n   * 注册清理函数\r\n   */\r\n  private registerCleanup(): void {\r\n    const resourceManager = this.memoryManager.getResourceManager()\r\n\r\n    // 注册自身的清理函数\r\n    resourceManager.register('LibraryBuilder', {\r\n      cleanup: async () => await this.cleanup(),\r\n      isCleanedUp: false\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 清理资源\r\n   */\r\n  async cleanup(): Promise<void> {\r\n    try {\r\n      // 清理文件监听器\r\n      for (const watcher of this.fileWatchers) {\r\n        if (watcher && typeof watcher.close === 'function') {\r\n          await watcher.close()\r\n        }\r\n      }\r\n      this.fileWatchers.clear()\r\n\r\n      // 执行所有清理函数\r\n      for (const cleanupFn of this.cleanupFunctions) {\r\n        try {\r\n          await cleanupFn()\r\n        } catch (error) {\r\n          this.logger.error('清理函数执行失败:', error)\r\n        }\r\n      }\r\n      this.cleanupFunctions = []\r\n\r\n      // 移除所有事件监听器\r\n      this.removeAllListeners()\r\n\r\n      // 清理适配器\r\n      if (this.bundlerAdapter && typeof (this.bundlerAdapter as any).cleanup === 'function') {\r\n        await (this.bundlerAdapter as any).cleanup()\r\n      }\r\n\r\n      // 重置状态\r\n      this.status = BuilderStatus.IDLE\r\n      this.currentStats = null\r\n      this.currentMetrics = null\r\n    } catch (error) {\r\n      this.logger.error('资源清理失败:', error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 切换打包核心\r\n   */\r\n  setBundler(bundler: 'rollup' | 'rolldown'): void {\r\n    try {\r\n      // 清理旧的适配器\r\n      if (this.bundlerAdapter && typeof (this.bundlerAdapter as any).cleanup === 'function') {\r\n        (this.bundlerAdapter as any).cleanup()\r\n      }\r\n\r\n      this.bundlerAdapter = BundlerAdapterFactory.create(bundler, {\r\n        logger: this.logger,\r\n        performanceMonitor: this.performanceMonitor\r\n      })\r\n\r\n      this.logger.info(`已切换到 ${bundler} 打包核心`)\r\n    } catch (error) {\r\n      throw this.errorHandler.createError(\r\n        ErrorCode.ADAPTER_NOT_AVAILABLE,\r\n        `切换到 ${bundler} 失败`,\r\n        { cause: error as Error }\r\n      )\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取当前打包核心\r\n   */\r\n  getBundler(): 'rollup' | 'rolldown' {\r\n    return this.bundlerAdapter.name\r\n  }\r\n\r\n  /**\r\n   * 设置库类型\r\n   */\r\n  setLibraryType(type: LibraryType): void {\r\n    this.config.libraryType = type\r\n    this.logger.info(`已设置库类型为: ${type}`)\r\n  }\r\n\r\n  /**\r\n   * 检测库类型\r\n   * - 传入路径可能为文件路径或子目录，这里做归一化：\r\n   *   1) 若为文件，取其所在目录\r\n   *   2) 自下而上查找最近的 package.json 作为项目根\r\n   *   3) 若未找到，回退到当前工作目录\r\n   */\r\n  async detectLibraryType(projectPath: string): Promise<LibraryType> {\r\n    let base = projectPath\r\n\r\n    try {\r\n      const stat = await fs.stat(projectPath).catch(() => null as any)\r\n      if (stat && stat.isFile()) {\r\n        base = path.dirname(projectPath)\r\n      }\r\n\r\n      // 自下而上查找最近的 package.json\r\n      let current = base\r\n      let resolvedRoot = ''\r\n      for (let i = 0; i < 10; i++) {\r\n        const pkg = path.join(current, 'package.json')\r\n        const exists = await fs.access(pkg).then(() => true).catch(() => false)\r\n        if (exists) {\r\n          resolvedRoot = current\r\n          break\r\n        }\r\n        const parent = path.dirname(current)\r\n        if (parent === current) break\r\n        current = parent\r\n      }\r\n\r\n      const root = resolvedRoot || (this.config.cwd || process.cwd())\r\n      const result = await this.libraryDetector.detect(root)\r\n      return result.type\r\n\r\n    } catch {\r\n      const fallbackRoot = this.config.cwd || process.cwd()\r\n      const result = await this.libraryDetector.detect(fallbackRoot)\r\n      return result.type\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取当前状态\r\n   */\r\n  getStatus(): BuilderStatus {\r\n    return this.status\r\n  }\r\n\r\n  /**\r\n   * 是否正在构建\r\n   */\r\n  isBuilding(): boolean {\r\n    return this.status === 'building'\r\n  }\r\n\r\n  /**\r\n   * 是否正在监听\r\n   */\r\n  isWatching(): boolean {\r\n    return this.status === 'watching'\r\n  }\r\n\r\n  /**\r\n   * 初始化\r\n   */\r\n  async initialize(): Promise<void> {\r\n    this.setStatus(BuilderStatus.INITIALIZING)\r\n\r\n    try {\r\n      // 加载配置\r\n      await this.loadConfig()\r\n\r\n      // 初始化适配器\r\n      this.setBundler(this.config.bundler || 'rollup')\r\n\r\n      this.setStatus(BuilderStatus.IDLE)\r\n      this.logger.success('LibraryBuilder 初始化完成')\r\n    } catch (error) {\r\n      this.setStatus(BuilderStatus.ERROR)\r\n      throw this.errorHandler.createError(\r\n        ErrorCode.BUILD_FAILED,\r\n        '初始化失败',\r\n        { cause: error as Error }\r\n      )\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 销毁资源\r\n   */\r\n  async dispose(): Promise<void> {\r\n    this.setStatus(BuilderStatus.DISPOSED)\r\n\r\n    // 清理适配器\r\n    if (this.bundlerAdapter) {\r\n      await this.bundlerAdapter.dispose()\r\n    }\r\n\r\n    // 清理插件管理器\r\n    if (this.pluginManager) {\r\n      await this.pluginManager.dispose()\r\n    }\r\n\r\n    // 清理验证器\r\n    if (this.postBuildValidator) {\r\n      await this.postBuildValidator.dispose()\r\n    }\r\n\r\n    // 移除所有事件监听器\r\n    this.removeAllListeners()\r\n\r\n    this.logger.info('LibraryBuilder 已销毁')\r\n  }\r\n\r\n  /**\r\n   * 获取构建统计信息\r\n   */\r\n  getStats(): any {\r\n    return this.currentStats\r\n  }\r\n\r\n  /**\r\n   * 获取性能指标\r\n   */\r\n  getPerformanceMetrics(): any {\r\n    return this.currentMetrics\r\n  }\r\n\r\n  /**\r\n   * 初始化各种服务\r\n   */\r\n  private initializeServices(options: BuilderOptions): void {\r\n    // 初始化日志记录器\r\n    this.logger = options.logger || createLogger({\r\n      level: 'info',\r\n      prefix: '@ldesign/builder'\r\n    })\r\n\r\n    // 初始化错误处理器\r\n    this.errorHandler = createErrorHandler({\r\n      logger: this.logger,\r\n      showSuggestions: true\r\n    })\r\n\r\n    // 初始化性能监控器\r\n    this.performanceMonitor = new PerformanceMonitor({\r\n      logger: this.logger\r\n    })\r\n\r\n    // 初始化配置管理器\r\n    this.configManager = new ConfigManager({\r\n      logger: this.logger\r\n    })\r\n\r\n    // 初始化策略管理器\r\n    this.strategyManager = new StrategyManager({\r\n      autoDetection: true,\r\n      cache: true\r\n    } as any)\r\n\r\n    // 初始化插件管理器\r\n    this.pluginManager = new PluginManager({\r\n      cache: true,\r\n      hotReload: false\r\n    } as any)\r\n\r\n    // 初始化库类型检测器\r\n    this.libraryDetector = new LibraryDetector({\r\n      logger: this.logger\r\n    })\r\n\r\n    // 初始化打包后验证器\r\n    this.postBuildValidator = new PostBuildValidator({}, {\r\n      logger: this.logger,\r\n      errorHandler: this.errorHandler\r\n    })\r\n\r\n    // 初始化默认适配器\r\n    this.bundlerAdapter = BundlerAdapterFactory.create('rollup', {\r\n      logger: this.logger,\r\n      performanceMonitor: this.performanceMonitor\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 设置事件监听器\r\n   */\r\n  private setupEventListeners(): void {\r\n    // 监听配置变化\r\n    this.configManager.on('config:change', (config: BuilderConfig) => {\r\n      this.config = config\r\n      this.emit('config:change', {\r\n        config,\r\n        oldConfig: this.config,\r\n        timestamp: Date.now()\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 设置错误处理\r\n   */\r\n  private setupErrorHandling(): void {\r\n    // 处理未捕获的错误\r\n    this.on('error', (error) => {\r\n      this.errorHandler.handle(error, 'LibraryBuilder')\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 设置状态\r\n   */\r\n  private setStatus(status: BuilderStatus): void {\r\n    const oldStatus = this.status\r\n    this.status = status\r\n\r\n    this.emit('status:change', {\r\n      status,\r\n      oldStatus,\r\n      timestamp: Date.now()\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 生成构建 ID\r\n   */\r\n  private generateBuildId(): string {\r\n    return `build-${Date.now()}-${Math.random().toString(36).substring(2, 11)}`\r\n  }\r\n\r\n  /**\r\n   * 清理输出目录\r\n   * \r\n   * @param config - 构建配置\r\n   */\r\n  private async cleanOutputDirs(config: BuilderConfig): Promise<void> {\r\n    const dirs = getOutputDirs(config)\r\n    const rootDir = (config as any).root || (config as any).cwd || process.cwd()\r\n\r\n    for (const dir of dirs) {\r\n      const fullPath = path.isAbsolute(dir) ? dir : path.resolve(rootDir, dir)\r\n\r\n      try {\r\n        // 检查目录是否存在\r\n        const exists = await fs.access(fullPath).then(() => true).catch(() => false)\r\n\r\n        if (exists) {\r\n          this.logger.info(`清理输出目录: ${fullPath}`)\r\n          await fs.rm(fullPath, { recursive: true, force: true })\r\n        }\r\n      } catch (error) {\r\n        this.logger.warn(`清理目录失败: ${fullPath}`, error)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 处理构建错误\r\n   */\r\n  private handleBuildError(error: Error, buildId: string): Error {\r\n    this.performanceMonitor.recordError(buildId, error)\r\n\r\n    if (error instanceof Error) {\r\n      return this.errorHandler.createError(\r\n        ErrorCode.BUILD_FAILED,\r\n        `构建失败: ${error.message}`,\r\n        { cause: error }\r\n      )\r\n    }\r\n\r\n    return this.errorHandler.createError(\r\n      ErrorCode.BUILD_FAILED,\r\n      '构建失败: 未知错误'\r\n    )\r\n  }\r\n\r\n  /**\r\n   * 运行打包后验证\r\n   */\r\n  private async runPostBuildValidation(\r\n    config: BuilderConfig,\r\n    buildResult: any,\r\n    buildId: string\r\n  ): Promise<PostBuildValidationResult> {\r\n    this.logger.info('开始打包后验证...')\r\n\r\n    try {\r\n      // 创建验证上下文\r\n      const validationContext: ValidationContext = {\r\n        buildContext: {\r\n          buildId,\r\n          startTime: Date.now(),\r\n          config,\r\n          cwd: process.cwd(),\r\n          cacheDir: '.cache',\r\n          tempDir: '.temp',\r\n          watch: false,\r\n          env: process.env as Record<string, string>,\r\n          logger: this.logger,\r\n          performanceMonitor: this.performanceMonitor\r\n        },\r\n        buildResult: {\r\n          success: true,\r\n          outputs: buildResult.outputs,\r\n          duration: 0,\r\n          stats: buildResult.stats,\r\n          performance: this.currentMetrics || {} as any,\r\n          warnings: buildResult.warnings || [],\r\n          errors: [],\r\n          buildId,\r\n          timestamp: Date.now(),\r\n          bundler: this.bundlerAdapter.name,\r\n          mode: config.mode || 'production',\r\n          libraryType: config.libraryType\r\n        },\r\n        config: config.postBuildValidation || {},\r\n        tempDir: '',\r\n        startTime: Date.now(),\r\n        validationId: `validation-${buildId}`,\r\n        projectRoot: process.cwd(),\r\n        outputDir: config.output?.dir || 'dist'\r\n      }\r\n\r\n      // 更新验证器配置\r\n      if (config.postBuildValidation) {\r\n        this.postBuildValidator.setConfig(config.postBuildValidation)\r\n      }\r\n\r\n      // 执行验证\r\n      const validationResult = await this.postBuildValidator.validate(validationContext)\r\n\r\n      // 如果验证失败且配置为失败时停止构建\r\n      if (!validationResult.success && config.postBuildValidation?.failOnError) {\r\n        throw this.errorHandler.createError(\r\n          ErrorCode.BUILD_FAILED,\r\n          '打包后验证失败',\r\n          {\r\n            cause: new Error(`验证失败: ${validationResult.errors.length} 个错误`)\r\n          }\r\n        )\r\n      }\r\n\r\n      this.logger.success('打包后验证完成')\r\n      return validationResult\r\n\r\n    } catch (error) {\r\n      this.logger.error('打包后验证失败:', error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 自动更新 package.json（如果启用）\r\n   */\r\n  private async updatePackageJsonIfEnabled(config: BuilderConfig, projectRoot: string): Promise<void> {\r\n    try {\r\n      // 检查是否启用了 package.json 自动更新\r\n      const packageUpdateConfig = (config as any).packageUpdate\r\n      if (!packageUpdateConfig || packageUpdateConfig.enabled === false) {\r\n        return\r\n      }\r\n\r\n      this.logger.info('开始自动更新 package.json...')\r\n\r\n      // 获取输出目录配置\r\n      const outputDirs = this.getOutputDirsFromConfig(config)\r\n\r\n      // 创建 PackageUpdater 实例\r\n      const packageUpdater = new PackageUpdater({\r\n        projectRoot,\r\n        srcDir: packageUpdateConfig.srcDir || 'src',\r\n        outputDirs,\r\n        autoExports: packageUpdateConfig.autoExports !== false,\r\n        updateEntryPoints: packageUpdateConfig.updateEntryPoints !== false,\r\n        updateFiles: packageUpdateConfig.updateFiles !== false,\r\n        customExports: packageUpdateConfig.customExports || {},\r\n        logger: this.logger\r\n      })\r\n\r\n      // 执行更新\r\n      await packageUpdater.update()\r\n\r\n    } catch (error) {\r\n      this.logger.warn('package.json 自动更新失败:', error)\r\n      // 不抛出错误，避免影响构建流程\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 从配置中获取输出目录配置\r\n   */\r\n  private getOutputDirsFromConfig(config: BuilderConfig): any {\r\n    const output = config.output || {}\r\n    const outputDirs: any = {}\r\n\r\n    // 处理不同的输出配置格式\r\n    if (Array.isArray(output)) {\r\n      // 数组格式：[{ format: 'esm', dir: 'es' }, { format: 'cjs', dir: 'lib' }]\r\n      for (const item of output) {\r\n        if (item.format === 'esm' || item.format === 'es') {\r\n          outputDirs.esm = item.dir || 'es'\r\n          outputDirs.types = item.dir || 'es' // 默认类型声明与 ESM 同目录\r\n        } else if (item.format === 'cjs' || item.format === 'commonjs') {\r\n          outputDirs.cjs = item.dir || 'lib'\r\n        } else if (item.format === 'umd' || item.format === 'iife') {\r\n          outputDirs.umd = item.dir || 'dist'\r\n        }\r\n      }\r\n    } else if (typeof output === 'object') {\r\n      // 对象格式：{ esm: { dir: 'es' }, cjs: { dir: 'lib' } }\r\n      if (output.esm && typeof output.esm === 'object') {\r\n        outputDirs.esm = output.esm.dir || 'es'\r\n        outputDirs.types = output.esm.dir || 'es'\r\n      }\r\n      if (output.cjs && typeof output.cjs === 'object') {\r\n        outputDirs.cjs = output.cjs.dir || 'lib'\r\n      }\r\n      if (output.umd && typeof output.umd === 'object') {\r\n        outputDirs.umd = output.umd.dir || 'dist'\r\n      }\r\n      // 注意：不再使用通用的 output.dir，因为它会覆盖格式特定的目录配置\r\n      // 多格式构建应该使用各自的专用目录，而不是单一目录\r\n    }\r\n\r\n    // 设置默认值 - 使用标准的多格式目录结构\r\n    return {\r\n      esm: outputDirs.esm || 'es',\r\n      cjs: outputDirs.cjs || 'lib',\r\n      umd: outputDirs.umd || 'dist',\r\n      types: outputDirs.types || outputDirs.esm || 'es'\r\n    }\r\n  }\r\n}\r\n"]}