{"version":3,"file":"PluginManager.js","sourceRoot":"","sources":["../../src/core/PluginManager.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * 插件管理器\n * \n * 负责插件的加载、管理和执行\n * \n * @author LDesign Team\n * @version 1.0.0\n */\n\nimport { EventEmitter } from 'events'\nimport type {\n  UnifiedPlugin,\n  PluginManagerOptions,\n  PluginLoadResult,\n  PluginPerformanceStats\n} from '../types/plugin'\nimport { Logger } from '../utils/logger'\nimport { BuilderError } from '../utils/error-handler'\nimport { ErrorCode } from '../constants/errors'\n\n/**\n * 插件管理器类\n */\nexport class PluginManager extends EventEmitter {\n  private logger: Logger\n  private options: PluginManagerOptions\n  private plugins: Map<string, UnifiedPlugin> = new Map()\n  private performanceStats: Map<string, PluginPerformanceStats> = new Map()\n\n  constructor(options: PluginManagerOptions = {}) {\n    super()\n\n    this.options = {\n      cache: true,\n      hotReload: false,\n      timeout: 30000,\n      maxPlugins: 100,\n      whitelist: [],\n      blacklist: [],\n      ...options\n    }\n\n    this.logger = (options as any).logger || new Logger()\n  }\n\n  /**\n   * 加载插件\n   */\n  async loadPlugin(plugin: UnifiedPlugin): Promise<PluginLoadResult> {\n    const startTime = Date.now()\n\n    try {\n      // 检查插件是否已加载\n      if (this.plugins.has(plugin.name)) {\n        this.logger.warn(`插件 ${plugin.name} 已存在，将被覆盖`)\n      }\n\n      // 检查黑名单\n      if (this.options.blacklist?.includes(plugin.name)) {\n        throw new BuilderError(\n          ErrorCode.PLUGIN_LOAD_ERROR,\n          `插件 ${plugin.name} 在黑名单中`\n        )\n      }\n\n      // 检查白名单\n      if (this.options.whitelist?.length && !this.options.whitelist.includes(plugin.name)) {\n        throw new BuilderError(\n          ErrorCode.PLUGIN_LOAD_ERROR,\n          `插件 ${plugin.name} 不在白名单中`\n        )\n      }\n\n      // 检查插件数量限制\n      if (this.plugins.size >= (this.options.maxPlugins || 100)) {\n        throw new BuilderError(\n          ErrorCode.PLUGIN_LOAD_ERROR,\n          `插件数量超过限制 (${this.options.maxPlugins})`\n        )\n      }\n\n      // 验证插件\n      this.validatePlugin(plugin)\n\n      // 初始化插件\n      if (plugin.onInit) {\n        await plugin.onInit({\n          buildId: 'init',\n          pluginName: plugin.name,\n          cwd: process.cwd(),\n          mode: 'production',\n          platform: 'browser',\n          env: process.env as any,\n          config: {},\n          cacheDir: '',\n          tempDir: '',\n          logger: this.logger,\n          performanceMonitor: null as any\n        })\n      }\n\n      // 注册插件\n      this.plugins.set(plugin.name, plugin)\n\n      const loadTime = Date.now() - startTime\n\n      // 初始化性能统计\n      this.performanceStats.set(plugin.name, {\n        name: plugin.name,\n        totalTime: 0,\n        callCount: 0,\n        averageTime: 0,\n        maxTime: 0,\n        hookPerformance: {}\n      })\n\n      this.logger.success(`插件 ${plugin.name} 加载成功 (${loadTime}ms)`)\n\n      return {\n        plugin,\n        loadTime,\n        success: true\n      }\n\n    } catch (error) {\n      const loadTime = Date.now() - startTime\n\n      this.logger.error(`插件 ${plugin.name} 加载失败:`, error)\n\n      return {\n        plugin,\n        loadTime,\n        success: false,\n        error: error as Error\n      }\n    }\n  }\n\n  /**\n   * 批量加载插件\n   */\n  async loadPlugins(plugins: UnifiedPlugin[]): Promise<PluginLoadResult[]> {\n    const results: PluginLoadResult[] = []\n\n    for (const plugin of plugins) {\n      const result = await this.loadPlugin(plugin)\n      results.push(result)\n\n      // 如果加载失败且不是可选插件，抛出错误\n      if (!result.success && !plugin.enabled) {\n        throw new BuilderError(\n          ErrorCode.PLUGIN_LOAD_ERROR,\n          `必需插件 ${plugin.name} 加载失败`,\n          { cause: result.error }\n        )\n      }\n    }\n\n    return results\n  }\n\n  /**\n   * 获取插件\n   */\n  getPlugin(name: string): UnifiedPlugin | undefined {\n    return this.plugins.get(name)\n  }\n\n  /**\n   * 获取所有插件\n   */\n  getAllPlugins(): UnifiedPlugin[] {\n    return Array.from(this.plugins.values())\n  }\n\n  /**\n   * 移除插件\n   */\n  async removePlugin(name: string): Promise<boolean> {\n    const plugin = this.plugins.get(name)\n\n    if (!plugin) {\n      return false\n    }\n\n    try {\n      // 调用插件销毁钩子\n      if (plugin.onDestroy) {\n        await plugin.onDestroy({\n          buildId: 'destroy',\n          pluginName: plugin.name,\n          cwd: process.cwd(),\n          mode: 'production',\n          platform: 'browser',\n          env: process.env as any,\n          config: {},\n          cacheDir: '',\n          tempDir: '',\n          logger: this.logger,\n          performanceMonitor: null as any\n        })\n      }\n\n      this.plugins.delete(name)\n      this.performanceStats.delete(name)\n\n      this.logger.info(`插件 ${name} 已移除`)\n      return true\n\n    } catch (error) {\n      this.logger.error(`移除插件 ${name} 失败:`, error)\n      return false\n    }\n  }\n\n  /**\n   * 清空所有插件\n   */\n  async clear(): Promise<void> {\n    const pluginNames = Array.from(this.plugins.keys())\n\n    for (const name of pluginNames) {\n      await this.removePlugin(name)\n    }\n  }\n\n  /**\n   * 获取插件性能统计\n   */\n  getPerformanceStats(name?: string): PluginPerformanceStats | PluginPerformanceStats[] {\n    if (name) {\n      const stats = this.performanceStats.get(name)\n      if (!stats) {\n        throw new BuilderError(\n          ErrorCode.PLUGIN_NOT_FOUND,\n          `插件 ${name} 不存在`\n        )\n      }\n      return stats\n    }\n\n    return Array.from(this.performanceStats.values())\n  }\n\n  /**\n   * 验证插件\n   */\n  private validatePlugin(plugin: UnifiedPlugin): void {\n    if (!plugin.name) {\n      throw new BuilderError(\n        ErrorCode.PLUGIN_LOAD_ERROR,\n        '插件必须有名称'\n      )\n    }\n\n    if (typeof plugin.name !== 'string') {\n      throw new BuilderError(\n        ErrorCode.PLUGIN_LOAD_ERROR,\n        '插件名称必须是字符串'\n      )\n    }\n\n    // 检查插件依赖\n    if (plugin.dependencies) {\n      for (const dep of plugin.dependencies) {\n        if (!this.plugins.has(dep)) {\n          throw new BuilderError(\n            ErrorCode.PLUGIN_DEPENDENCY_ERROR,\n            `插件 ${plugin.name} 依赖的插件 ${dep} 未找到`\n          )\n        }\n      }\n    }\n  }\n\n  /**\n   * 销毁资源\n   */\n  async dispose(): Promise<void> {\n    await this.clear()\n    this.removeAllListeners()\n  }\n}\n"]}