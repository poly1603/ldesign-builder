{"version":3,"file":"EnhancedLibraryBuilder.js","sourceRoot":"","sources":["../../src/core/EnhancedLibraryBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * 增强版库构建器主控制器类\r\n * \r\n * 这是 @ldesign/builder 的核心增强版类，提供更强大的构建功能和验证机制\r\n * \r\n * @author LDesign Team\r\n * @version 2.0.0\r\n */\r\n\r\nimport { EventEmitter } from 'events'\r\nimport { createHash } from 'crypto'\r\nimport * as fs from 'fs-extra'\r\nimport * as path from 'path'\r\nimport fg from 'fast-glob'\r\nimport {\r\n  ILibraryBuilder,\r\n  BuilderOptions,\r\n  BuilderStatus,\r\n  BuildResult,\r\n  BuildWatcher\r\n} from '../types/builder'\r\nimport type { BuilderConfig } from '../types/config'\r\nimport type { ValidationResult } from '../types/common'\r\nimport type { LibraryType } from '../types/library'\r\nimport type {\r\n  ValidationResult as PostBuildValidationResult,\r\n  ValidationContext\r\n} from '../types/validation'\r\nimport { ConfigManager } from './ConfigManager'\r\nimport { StrategyManager } from './StrategyManager'\r\nimport { PluginManager } from './PluginManager'\r\nimport { LibraryDetector } from './LibraryDetector'\r\nimport { PerformanceMonitor } from './PerformanceMonitor'\r\nimport { PostBuildValidator } from './PostBuildValidator'\r\nimport { BundlerAdapterFactory } from '../adapters/base/AdapterFactory'\r\nimport type { IBundlerAdapter } from '../types/adapter'\r\nimport { Logger, createLogger } from '../utils/logger'\r\nimport { ErrorHandler, createErrorHandler } from '../utils/error-handler'\r\nimport { ErrorCode } from '../constants/errors'\r\nimport { DEFAULT_BUILDER_CONFIG } from '../constants/defaults'\r\n\r\n/**\r\n * 构建缓存接口\r\n */\r\ninterface BuildCache {\r\n  configHash: string\r\n  buildResult: BuildResult\r\n  timestamp: number\r\n  dependencies: string[]\r\n}\r\n\r\n/**\r\n * 依赖分析结果\r\n */\r\ninterface DependencyAnalysis {\r\n  external: string[]\r\n  bundled: string[]\r\n  circular: string[][]\r\n  unused: string[]\r\n  missing: string[]\r\n  versions: Record<string, string>\r\n}\r\n\r\n/**\r\n * 代码质量检查结果\r\n */\r\ninterface CodeQualityResult {\r\n  issues: Array<{\r\n    severity: 'error' | 'warning' | 'info'\r\n    file: string\r\n    line?: number\r\n    column?: number\r\n    message: string\r\n    rule?: string\r\n  }>\r\n  metrics: {\r\n    complexity: number\r\n    maintainability: number\r\n    duplications: number\r\n    coverage?: number\r\n  }\r\n}\r\n\r\n/**\r\n * 增强版库构建器主控制器类\r\n */\r\nexport class EnhancedLibraryBuilder extends EventEmitter implements ILibraryBuilder {\r\n  /** 当前状态 */\r\n  private status: BuilderStatus = BuilderStatus.IDLE\r\n\r\n  /** 当前配置 */\r\n  private config: BuilderConfig\r\n\r\n  /** 打包核心适配器 */\r\n  private bundlerAdapter!: IBundlerAdapter\r\n\r\n  /** 策略管理器 */\r\n  private strategyManager!: StrategyManager\r\n\r\n  /** 配置管理器 */\r\n  private configManager!: ConfigManager\r\n\r\n  /** 插件管理器 */\r\n  private pluginManager!: PluginManager\r\n\r\n  /** 日志记录器 */\r\n  private logger!: Logger\r\n\r\n  /** 错误处理器 */\r\n  private errorHandler!: ErrorHandler\r\n\r\n  /** 性能监控器 */\r\n  private performanceMonitor!: PerformanceMonitor\r\n\r\n  /** 库类型检测器 */\r\n  private libraryDetector!: LibraryDetector\r\n\r\n  /** 打包后验证器 */\r\n  private postBuildValidator!: PostBuildValidator\r\n\r\n  /** 当前构建统计 */\r\n  private currentStats: any = null\r\n\r\n  /** 当前性能指标 */\r\n  private currentMetrics: any = null\r\n\r\n  /** 构建缓存 */\r\n  private buildCache: Map<string, BuildCache> = new Map()\r\n\r\n  /** 依赖分析缓存 */\r\n  private dependencyCache: Map<string, DependencyAnalysis> = new Map()\r\n\r\n  /** 构建历史 */\r\n  private buildHistory: BuildResult[] = []\r\n\r\n  /** 最大历史记录数 */\r\n  private readonly maxHistorySize = 10\r\n\r\n  constructor(options: BuilderOptions = {}) {\r\n    super()\r\n\r\n    // 初始化各种服务\r\n    this.initializeServices(options)\r\n\r\n    // 设置事件监听器\r\n    this.setupEventListeners()\r\n\r\n    // 设置错误处理\r\n    this.setupErrorHandling()\r\n\r\n    // 初始化配置\r\n    this.config = { ...DEFAULT_BUILDER_CONFIG, ...options.config }\r\n\r\n    // 临时禁用缓存加载以解决缓存bug\r\n    // this.loadBuildCache()\r\n  }\r\n\r\n  /**\r\n   * 执行库构建（增强版）\r\n   */\r\n  async build(config?: BuilderConfig): Promise<BuildResult> {\r\n    const buildId = this.generateBuildId()\r\n\r\n    try {\r\n      // 设置构建状态\r\n      this.setStatus(BuilderStatus.BUILDING)\r\n\r\n      // 合并并验证配置\r\n      const mergedConfig = config ? this.mergeConfig(this.config, config) : this.config\r\n      const configValidation = await this.validateBuildConfig(mergedConfig)\r\n\r\n      if (!configValidation.valid) {\r\n        throw this.errorHandler.createError(\r\n          ErrorCode.CONFIG_VALIDATION_ERROR,\r\n          `配置验证失败: ${configValidation.errors.join(', ')}`\r\n        )\r\n      }\r\n\r\n      // 检查构建缓存 - 临时禁用缓存以解决缓存bug\r\n      const cacheKey = this.generateCacheKey(mergedConfig)\r\n      const cachedResult = this.getCachedBuild(cacheKey)\r\n\r\n      // 临时强制禁用缓存\r\n      if (false && cachedResult) {\r\n        this.logger.info('使用缓存的构建结果')\r\n        return cachedResult as BuildResult\r\n      }\r\n\r\n      // 根据配置切换打包核心\r\n      if (mergedConfig.bundler && mergedConfig.bundler !== this.bundlerAdapter.name) {\r\n        this.setBundler(mergedConfig.bundler)\r\n      }\r\n\r\n      // 发出构建开始事件\r\n      this.emit('build:start', {\r\n        config: mergedConfig,\r\n        timestamp: Date.now(),\r\n        buildId\r\n      })\r\n\r\n      // 开始性能监控\r\n      this.performanceMonitor.startBuild(buildId)\r\n\r\n      // 分析依赖\r\n      const dependencies = await this.analyzeDependencies(mergedConfig)\r\n\r\n      // 检查循环依赖\r\n      if (dependencies.circular.length > 0) {\r\n        this.logger.warn(`发现 ${dependencies.circular.length} 个循环依赖`)\r\n        dependencies.circular.forEach(cycle => {\r\n          this.logger.warn(`  循环依赖: ${cycle.join(' -> ')}`)\r\n        })\r\n      }\r\n\r\n      // 获取库类型（优先使用项目根目录进行检测，而不是入口文件路径）\r\n      const projectRoot = mergedConfig.cwd || process.cwd()\r\n      let libraryType = mergedConfig.libraryType || await this.detectLibraryType(projectRoot)\r\n\r\n      if (typeof libraryType === 'string') {\r\n        libraryType = libraryType as LibraryType\r\n      }\r\n\r\n      // 获取构建策略\r\n      const strategy = this.strategyManager.getStrategy(libraryType)\r\n\r\n      // 应用策略配置\r\n      const strategyConfig = await strategy.applyStrategy(mergedConfig)\r\n\r\n      // 预处理源代码\r\n      await this.preprocessSources(strategyConfig)\r\n\r\n      // 执行构建\r\n      const result = await this.bundlerAdapter.build(strategyConfig)\r\n\r\n      // 后处理构建产物\r\n      await this.postprocessOutputs(result, mergedConfig)\r\n\r\n      // 执行代码质量检查\r\n      const qualityResult = await this.checkCodeQuality(result.outputs, mergedConfig)\r\n\r\n      if (qualityResult.issues.filter(i => i.severity === 'error').length > 0) {\r\n        this.logger.warn('发现代码质量问题')\r\n      }\r\n\r\n      // 执行打包后验证\r\n      let validationResult: PostBuildValidationResult | undefined\r\n      if (mergedConfig.postBuildValidation?.enabled) {\r\n        validationResult = await this.runEnhancedValidation(mergedConfig, result, buildId)\r\n      }\r\n\r\n      // 对比打包前后的功能\r\n      const functionalityCheck = await this.compareFunctionality(mergedConfig, result)\r\n\r\n      if (!functionalityCheck.identical) {\r\n        this.logger.error('打包前后功能存在差异！')\r\n        functionalityCheck.differences.forEach(diff => {\r\n          this.logger.error(`  - ${diff}`)\r\n        })\r\n\r\n        if (mergedConfig.postBuildValidation?.failOnError) {\r\n          throw this.errorHandler.createError(\r\n            ErrorCode.BUILD_FAILED,\r\n            '打包前后功能不一致'\r\n          )\r\n        }\r\n      }\r\n\r\n      // 结束性能监控\r\n      const metrics = this.performanceMonitor.endBuild(buildId)\r\n\r\n      // 鐢熸垚鏋勫缓鎶ュ憡（鍙€夊彲鑳藉悎骞朵负鏂版姄鍙栧姞杞藉唴閮ㄧ骇鐢熸垚鎶ュ憡）\r\n      await this.generateBuildReport(result, metrics, qualityResult)\r\n\r\n      // 构建成功\r\n      const buildResult: BuildResult = {\r\n        success: true,\r\n        outputs: result.outputs,\r\n        duration: metrics.buildTime,\r\n        stats: result.stats,\r\n        performance: metrics,\r\n        warnings: result.warnings || [],\r\n        errors: [],\r\n        buildId,\r\n        timestamp: Date.now(),\r\n        bundler: this.bundlerAdapter.name,\r\n        mode: mergedConfig.mode || 'production',\r\n        libraryType,\r\n        validation: validationResult\r\n      }\r\n\r\n      // 保存到缓存\r\n      this.cacheBuildResult(cacheKey, buildResult, dependencies.external.concat(dependencies.bundled))\r\n\r\n      // 保存到历史\r\n      this.addToHistory(buildResult)\r\n\r\n      // 保存统计信息\r\n      this.currentStats = buildResult.stats\r\n      this.currentMetrics = buildResult.performance\r\n\r\n      // 发出构建结束事件\r\n      this.emit('build:end', {\r\n        result: buildResult,\r\n        duration: buildResult.duration,\r\n        timestamp: Date.now()\r\n      })\r\n\r\n      // 重置状态\r\n      this.setStatus(BuilderStatus.IDLE)\r\n\r\n      return buildResult\r\n\r\n    } catch (error) {\r\n      // 处理构建错误\r\n      const buildError = this.handleBuildError(error as Error, buildId)\r\n\r\n      // 发出错误事件\r\n      this.emit('build:error', {\r\n        error: buildError,\r\n        phase: 'build',\r\n        timestamp: Date.now()\r\n      })\r\n\r\n      // 重置状态\r\n      this.setStatus(BuilderStatus.ERROR)\r\n\r\n      // 尝试错误恢复\r\n      await this.attemptErrorRecovery(buildError, buildId)\r\n\r\n      throw buildError\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 验证构建配置\r\n   */\r\n  private async validateBuildConfig(config: BuilderConfig): Promise<{\r\n    valid: boolean\r\n    errors: string[]\r\n    warnings: string[]\r\n  }> {\r\n    const errors: string[] = []\r\n    const warnings: string[] = []\r\n\r\n    // 验证入口文件\r\n    if (!config.input) {\r\n      errors.push('未指定入口文件')\r\n    } else if (typeof config.input === 'string') {\r\n      if (!await fs.pathExists(config.input)) {\r\n        errors.push(`入口文件不存在: ${config.input}`)\r\n      }\r\n    } else if (Array.isArray(config.input)) {\r\n      for (const entry of config.input) {\r\n        if (!await fs.pathExists(entry)) {\r\n          errors.push(`入口文件不存在: ${entry}`)\r\n        }\r\n      }\r\n    }\r\n\r\n    // 验证输出配置\r\n    if (!config.output) {\r\n      errors.push('未指定输出配置')\r\n    } else {\r\n      if (!config.output.dir) {\r\n        errors.push('未指定输出目录')\r\n      }\r\n      if (!config.output.format) {\r\n        warnings.push('未指定输出格式，将使用默认格式')\r\n      }\r\n    }\r\n\r\n    // 验证外部依赖\r\n    if (config.external) {\r\n      const packageJson = await this.loadPackageJson()\r\n      const allDeps = [\r\n        ...Object.keys(packageJson.dependencies || {}),\r\n        ...Object.keys(packageJson.peerDependencies || {}),\r\n        ...Object.keys(packageJson.devDependencies || {})\r\n      ]\r\n\r\n      const external = Array.isArray(config.external) ? config.external : [config.external]\r\n      for (const dep of external) {\r\n        if (typeof dep === 'string' && !allDeps.includes(dep) && !dep.startsWith('/') && !dep.includes('*')) {\r\n          warnings.push(`外部依赖 \"${dep}\" 未在 package.json 中声明`)\r\n        }\r\n      }\r\n    }\r\n\r\n    // 验证插件配置\r\n    if (config.plugins) {\r\n      for (const plugin of config.plugins) {\r\n        if (!plugin || typeof plugin !== 'object') {\r\n          errors.push('无效的插件配置')\r\n        }\r\n      }\r\n    }\r\n\r\n    return {\r\n      valid: errors.length === 0,\r\n      errors,\r\n      warnings\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 分析依赖\r\n   */\r\n  private async analyzeDependencies(config: BuilderConfig): Promise<DependencyAnalysis> {\r\n    const cacheKey = `deps-${this.generateCacheKey(config)}`\r\n\r\n    // 检查缓存\r\n    if (this.dependencyCache.has(cacheKey)) {\r\n      return this.dependencyCache.get(cacheKey)!\r\n    }\r\n\r\n    const analysis: DependencyAnalysis = {\r\n      external: [],\r\n      bundled: [],\r\n      circular: [],\r\n      unused: [],\r\n      missing: [],\r\n      versions: {}\r\n    }\r\n\r\n    try {\r\n      // 加载 package.json\r\n      const packageJson = await this.loadPackageJson()\r\n      const allDeps = {\r\n        ...packageJson.dependencies,\r\n        ...packageJson.peerDependencies\r\n      }\r\n\r\n      // 解析入口集合（支持字符串、数组、对象与 glob）\r\n      const entries = await this.resolveEntries(config.input)\r\n\r\n      // 汇总各入口导入\r\n      const importSet = new Set<string>()\r\n      for (const entry of entries) {\r\n        const imports = await this.analyzeImports(entry)\r\n        for (const imp of imports) importSet.add(imp)\r\n      }\r\n      const entryImports = Array.from(importSet)\r\n\r\n      // 分类依赖\r\n      for (const imp of entryImports) {\r\n        if (imp.startsWith('.') || imp.startsWith('/')) {\r\n          // 本地模块\r\n          continue\r\n        }\r\n\r\n        const packageName = this.extractPackageName(imp)\r\n\r\n        if (config.external && this.isExternal(packageName, config.external)) {\r\n          analysis.external.push(packageName)\r\n        } else {\r\n          analysis.bundled.push(packageName)\r\n        }\r\n\r\n        // 记录版本\r\n        if ((allDeps as any)[packageName]) {\r\n          analysis.versions[packageName] = (allDeps as any)[packageName]\r\n        }\r\n      }\r\n\r\n      // 检查未使用的依赖\r\n      for (const dep of Object.keys(allDeps)) {\r\n        if (!analysis.external.includes(dep) && !analysis.bundled.includes(dep)) {\r\n          analysis.unused.push(dep)\r\n        }\r\n      }\r\n\r\n      // 检查循环依赖\r\n      analysis.circular = await this.detectCircularDependencies(entries)\r\n\r\n    } catch (error) {\r\n      this.logger.warn('依赖分析失败:', error)\r\n    }\r\n\r\n    // 缓存结果\r\n    this.dependencyCache.set(cacheKey, analysis)\r\n\r\n    return analysis\r\n  }\r\n\r\n  /**\r\n   * 分析文件导入\r\n   */\r\n  private async analyzeImports(filePath: string): Promise<string[]> {\r\n    const imports: string[] = []\r\n\r\n    try {\r\n      const content = await fs.readFile(filePath, 'utf-8')\r\n\r\n      // 匹配 import 语句\r\n      const importRegex = /import\\s+(?:[\\w\\s{},*]+\\s+from\\s+)?['\"]([^'\"]+)['\"]/g\r\n      let match\r\n      while ((match = importRegex.exec(content)) !== null) {\r\n        imports.push(match[1])\r\n      }\r\n\r\n      // 匹配 require 语句\r\n      const requireRegex = /require\\s*\\(['\"]([^'\"]+)['\"]\\)/g\r\n      while ((match = requireRegex.exec(content)) !== null) {\r\n        imports.push(match[1])\r\n      }\r\n\r\n      // 匹配动态导入\r\n      const dynamicImportRegex = /import\\s*\\(['\"]([^'\"]+)['\"]\\)/g\r\n      while ((match = dynamicImportRegex.exec(content)) !== null) {\r\n        imports.push(match[1])\r\n      }\r\n\r\n    } catch (error) {\r\n      this.logger.debug(`无法分析文件导入: ${filePath}`)\r\n    }\r\n\r\n    return [...new Set(imports)]\r\n  }\r\n\r\n  /**\r\n   * 检测循环依赖\r\n   */\r\n  private async detectCircularDependencies(entry: string | string[]): Promise<string[][]> {\r\n    const visited = new Set<string>()\r\n    const recursionStack = new Set<string>()\r\n    const cycles: string[][] = []\r\n\r\n    const dfs = async (filePath: string, trace: string[] = []): Promise<void> => {\r\n      if (recursionStack.has(filePath)) {\r\n        // 找到环\r\n        const cycleStart = trace.indexOf(filePath)\r\n        if (cycleStart !== -1) {\r\n          cycles.push(trace.slice(cycleStart).concat(filePath))\r\n        }\r\n        return\r\n      }\r\n\r\n      if (visited.has(filePath)) {\r\n        return\r\n      }\r\n\r\n      visited.add(filePath)\r\n      recursionStack.add(filePath)\r\n      trace.push(filePath)\r\n\r\n      const imports = await this.analyzeImports(filePath)\r\n\r\n      for (const imp of imports) {\r\n        if (imp.startsWith('.')) {\r\n          const resolvedPath = path.resolve(path.dirname(filePath), imp)\r\n          const fullPath = await this.resolveFilePath(resolvedPath)\r\n          if (fullPath) {\r\n            await dfs(fullPath, [...trace])\r\n          }\r\n        }\r\n      }\r\n\r\n      recursionStack.delete(filePath)\r\n    }\r\n\r\n    const processEntry = async (e: string): Promise<void> => {\r\n      const entryPath = await this.resolveFilePath(e)\r\n      if (entryPath) {\r\n        await dfs(entryPath)\r\n      }\r\n    }\r\n\r\n    if (Array.isArray(entry)) {\r\n      for (const e of entry) {\r\n        await processEntry(e)\r\n      }\r\n    } else {\r\n      await processEntry(entry)\r\n    }\r\n\r\n    return cycles\r\n  }\r\n\r\n  /**\r\n   * 解析文件路径\r\n   */\r\n  private async resolveFilePath(filePath: string): Promise<string | null> {\r\n    const extensions = ['.ts', '.tsx', '.js', '.jsx', '.mjs', '.cjs', '.json']\r\n\r\n    // 尝试直接路径\r\n    if (await fs.pathExists(filePath)) {\r\n      return filePath\r\n    }\r\n\r\n    // 尝试添加扩展名\r\n    for (const ext of extensions) {\r\n      const withExt = filePath + ext\r\n      if (await fs.pathExists(withExt)) {\r\n        return withExt\r\n      }\r\n    }\r\n\r\n    // 尝试 index 文件\r\n    for (const ext of extensions) {\r\n      const indexPath = path.join(filePath, `index${ext}`)\r\n      if (await fs.pathExists(indexPath)) {\r\n        return indexPath\r\n      }\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * 解析入口集合（支持字符串、数组、对象与 glob）\r\n   */\r\n  private async resolveEntries(input: BuilderConfig['input']): Promise<string[]> {\r\n    const cwd = this.config.cwd || process.cwd()\r\n    const patterns: string[] = []\r\n\r\n    if (!input) return []\r\n\r\n    if (typeof input === 'string') {\r\n      patterns.push(input)\r\n    } else if (Array.isArray(input)) {\r\n      patterns.push(...input)\r\n    } else if (typeof input === 'object') {\r\n      patterns.push(...Object.values(input))\r\n    }\r\n\r\n    const globbed = await fg(patterns, {\r\n      cwd,\r\n      absolute: true,\r\n      onlyFiles: true,\r\n      dot: false,\r\n      ignore: ['**/*.test.*', '**/*.spec.*', '**/__tests__/**']\r\n    })\r\n\r\n    const results = new Set<string>()\r\n\r\n    if (globbed.length > 0) {\r\n      for (const p of globbed) results.add(p)\r\n    } else {\r\n      for (const p of patterns) {\r\n        const abs = path.isAbsolute(p) ? p : path.resolve(cwd, p)\r\n        if (await fs.pathExists(abs)) results.add(abs)\r\n      }\r\n    }\r\n\r\n    return Array.from(results)\r\n  }\r\n\r\n  /**\r\n   * 预处理源代码\r\n   */\r\n  private async preprocessSources(config: any): Promise<void> {\r\n    this.logger.debug('预处理源代码...')\r\n    void config\r\n\r\n    // 可以在这里添加源代码预处理逻辑\r\n    // 例如：代码转换、注入、优化等\r\n  }\r\n\r\n  /**\r\n   * 后处理构建产物\r\n   */\r\n  private async postprocessOutputs(result: any, config: BuilderConfig): Promise<void> {\r\n    this.logger.debug('后处理构建产物...')\r\n\r\n    for (const output of result.outputs) {\r\n      // 添加文件头注释\r\n      if (config.banner?.banner) {\r\n        const header = typeof config.banner.banner === 'function'\r\n          ? await config.banner.banner()\r\n          : config.banner.banner\r\n        if (header) {\r\n          output.source = header + '\\n' + output.source\r\n        }\r\n      }\r\n\r\n      // 添加文件尾注释\r\n      if (config.banner?.footer) {\r\n        const footer = typeof config.banner.footer === 'function'\r\n          ? await config.banner.footer()\r\n          : config.banner.footer\r\n        if (footer) {\r\n          output.source = output.source + '\\n' + footer\r\n        }\r\n      }\r\n\r\n      // 计算哈希值\r\n      output.hash = createHash('md5').update(output.source).digest('hex')\r\n\r\n      // 按需计算 gzip 大小（当启用分析或大小限制时）\r\n      const needGzip = (\r\n        typeof config.performance?.bundleAnalyzer === 'object' && (config.performance.bundleAnalyzer as any).showGzip === true\r\n      ) || !!config.performance?.sizeLimit\r\n\r\n      if (needGzip) {\r\n        const { gzipSize } = await import('gzip-size')\r\n        output.gzipSize = await gzipSize(output.source)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 检查代码质量\r\n   */\r\n  private async checkCodeQuality(outputs: any[], config: BuilderConfig): Promise<CodeQualityResult> {\r\n    // 移除 void config，改为明确的参数使用或忽略注释\r\n    const issues: CodeQualityResult['issues'] = []\r\n    const metrics: CodeQualityResult['metrics'] = {\r\n      complexity: 0,\r\n      maintainability: 100,\r\n      duplications: 0\r\n    }\r\n\r\n    // 定义文件大小阈值（可以从配置中获取）\r\n    const maxFileSize = config.performance?.maxFileSize || 500000 // 500KB\r\n    const warnFileSize = maxFileSize * 0.8 // 80% 作为警告阈值\r\n\r\n    for (const output of outputs) {\r\n      if (!output || typeof output !== 'object') {\r\n        continue\r\n      }\r\n\r\n      // 检查文件大小\r\n      if (typeof output.size === 'number') {\r\n        if (output.size > maxFileSize) {\r\n          issues.push({\r\n            severity: 'error',\r\n            file: output.fileName || 'unknown',\r\n            message: `文件大小超过限制 ${(maxFileSize / 1024).toFixed(0)}KB (当前: ${(output.size / 1024).toFixed(2)}KB)`\r\n          })\r\n        } else if (output.size > warnFileSize) {\r\n          issues.push({\r\n            severity: 'warning',\r\n            file: output.fileName || 'unknown',\r\n            message: `文件大小较大 (${(output.size / 1024).toFixed(2)}KB)，建议优化`\r\n          })\r\n        }\r\n      }\r\n\r\n      // 检查是否包含调试代码 - 优化正则表达式性能\r\n      if (typeof output.source === 'string') {\r\n        const debugPatterns = [\r\n          { pattern: /console\\.(?:log|debug|info|warn|error)/g, message: '包含 console 调试代码' },\r\n          { pattern: /debugger(?:\\s*;)?/g, message: '包含 debugger 语句' },\r\n          { pattern: /(?:alert|confirm)\\s*\\(/g, message: '包含弹窗调用' }\r\n        ]\r\n\r\n        // 使用单次遍历检查所有模式，提高性能\r\n        const sourceLines = output.source.split('\\n')\r\n        for (let lineIndex = 0; lineIndex < sourceLines.length; lineIndex++) {\r\n          const line = sourceLines[lineIndex]\r\n          for (const { pattern, message } of debugPatterns) {\r\n            if (pattern.test(line)) {\r\n              issues.push({\r\n                severity: 'warning',\r\n                file: output.fileName || 'unknown',\r\n                line: lineIndex + 1,\r\n                message\r\n              })\r\n              // 重置正则表达式状态\r\n              pattern.lastIndex = 0\r\n            }\r\n          }\r\n        }\r\n\r\n        // 检查代码复杂度指标 - 优化内存使用，避免重复分割\r\n        const lines = sourceLines.length\r\n        if (lines > 1000) {\r\n          metrics.complexity += 10\r\n          issues.push({\r\n            severity: 'info',\r\n            file: output.fileName || 'unknown',\r\n            message: `文件行数较多 (${lines} 行)，建议拆分`\r\n          })\r\n        }\r\n\r\n        // 检查文件大小\r\n        const sizeInKB = Math.round(output.source.length / 1024)\r\n        if (sizeInKB > 500) {\r\n          issues.push({\r\n            severity: 'warning',\r\n            file: output.fileName || 'unknown',\r\n            message: `文件大小较大 (${sizeInKB}KB)，可能影响加载性能`\r\n          })\r\n        }\r\n      }\r\n    }\r\n\r\n    // 计算整体可维护性分数\r\n    if (issues.length > 0) {\r\n      const errorCount = issues.filter(i => i.severity === 'error').length\r\n      const warningCount = issues.filter(i => i.severity === 'warning').length\r\n      metrics.maintainability = Math.max(0, 100 - (errorCount * 20) - (warningCount * 5))\r\n    }\r\n\r\n    return { issues, metrics }\r\n  }\r\n\r\n  /**\r\n   * 增强的打包后验证\r\n   */\r\n  private async runEnhancedValidation(\r\n    config: BuilderConfig,\r\n    buildResult: any,\r\n    buildId: string\r\n  ): Promise<PostBuildValidationResult> {\r\n    this.logger.info('开始增强的打包后验证...')\r\n\r\n    // 创建临时测试环境\r\n    const testDir = path.join(process.cwd(), '.validation-test', buildId)\r\n    await fs.ensureDir(testDir)\r\n\r\n    try {\r\n      // 复制打包产物到测试目录\r\n      const outputDir = config.output?.dir || 'dist'\r\n      await fs.copy(outputDir, path.join(testDir, 'dist'))\r\n\r\n      // 创建测试项目\r\n      await this.createTestProject(testDir, config)\r\n\r\n      // 运行功能测试\r\n      const testResults = await this.runFunctionalTests(testDir, config)\r\n\r\n      // 运行性能测试\r\n      const perfResults = await this.runPerformanceTests(testDir, config)\r\n\r\n      // 运行兼容性测试\r\n      const compatResults = await this.runCompatibilityTests(testDir, config)\r\n\r\n      // 使用原有的验证器进行额外验证\r\n      const validationContext: ValidationContext = {\r\n        buildContext: {\r\n          buildId,\r\n          startTime: Date.now(),\r\n          config,\r\n          cwd: process.cwd(),\r\n          cacheDir: '.cache',\r\n          tempDir: testDir,\r\n          watch: false,\r\n          env: process.env as Record<string, string>,\r\n          logger: this.logger,\r\n          performanceMonitor: this.performanceMonitor\r\n        },\r\n        buildResult: {\r\n          success: true,\r\n          outputs: buildResult.outputs,\r\n          duration: 0,\r\n          stats: buildResult.stats,\r\n          performance: this.currentMetrics || {} as any,\r\n          warnings: buildResult.warnings || [],\r\n          errors: [],\r\n          buildId,\r\n          timestamp: Date.now(),\r\n          bundler: this.bundlerAdapter.name,\r\n          mode: config.mode || 'production',\r\n          libraryType: config.libraryType\r\n        },\r\n        config: config.postBuildValidation || {},\r\n        tempDir: testDir,\r\n        startTime: Date.now(),\r\n        validationId: `validation-${buildId}`,\r\n        projectRoot: process.cwd(),\r\n        outputDir: config.output?.dir || 'dist'\r\n      }\r\n\r\n      const validationResult = await this.postBuildValidator.validate(validationContext)\r\n\r\n      // 合并所有测试结果\r\n      const success = testResults.success && perfResults.success && compatResults.success && validationResult.success\r\n\r\n      const enhancedResult = {\r\n        ...validationResult,\r\n        success\r\n      } as PostBuildValidationResult\r\n\r\n      return enhancedResult\r\n\r\n    } finally {\r\n      // 清理测试目录\r\n      const keepTemp = config.postBuildValidation?.environment?.keepTempFiles\r\n      if (!keepTemp) {\r\n        await fs.remove(testDir)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 创建测试项目\r\n   */\r\n  private async createTestProject(testDir: string, config: BuilderConfig): Promise<void> {\r\n    // 创建 package.json\r\n    const packageJson = {\r\n      name: 'validation-test',\r\n      version: '1.0.0',\r\n      type: config.output?.format?.includes('esm') ? 'module' : 'commonjs',\r\n      dependencies: {},\r\n      devDependencies: {\r\n        '@types/node': '^20.0.0',\r\n        'vitest': '^1.0.0'\r\n      }\r\n    }\r\n\r\n    await fs.writeJson(path.join(testDir, 'package.json'), packageJson, { spaces: 2 })\r\n\r\n    // 创建测试文件\r\n    const testContent = `\r\nimport { describe, it, expect } from 'vitest'\r\nimport * as lib from './dist/index.js'\r\n\r\ndescribe('Library Validation', () => {\r\n  it('should export expected modules', () => {\r\n    expect(lib).toBeDefined()\r\n  })\r\n\r\n  it('should maintain functionality', () => {\r\n    // Add specific functionality tests here\r\n  })\r\n})\r\n`\r\n\r\n    await fs.writeFile(path.join(testDir, 'test.spec.js'), testContent)\r\n  }\r\n\r\n  /**\r\n   * 运行功能测试\r\n   */\r\n  private async runFunctionalTests(_testDir: string, _config: BuilderConfig): Promise<any> {\r\n    this.logger.debug('运行功能测试...')\r\n\r\n    return {\r\n      success: true,\r\n      tests: [],\r\n      duration: 0\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 运行性能测试\r\n   */\r\n  private async runPerformanceTests(_testDir: string, _config: BuilderConfig): Promise<any> {\r\n    this.logger.debug('运行性能测试...')\r\n\r\n    return {\r\n      success: true,\r\n      metrics: {},\r\n      duration: 0\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 运行兼容性测试\r\n   */\r\n  private async runCompatibilityTests(_testDir: string, _config: BuilderConfig): Promise<any> {\r\n    this.logger.debug('运行兼容性测试...')\r\n\r\n    return {\r\n      success: true,\r\n      environments: [],\r\n      duration: 0\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 对比打包前后功能\r\n   */\r\n  private async compareFunctionality(config: BuilderConfig, result: any): Promise<{\r\n    identical: boolean\r\n    differences: string[]\r\n  }> {\r\n    void config\r\n    void result\r\n    const differences: string[] = []\r\n\r\n    // 检查导出是否一致\r\n    // 检查 API 是否一致\r\n    // 检查行为是否一致\r\n\r\n    return {\r\n      identical: differences.length === 0,\r\n      differences\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 生成构建报告\r\n   */\r\n  private async generateBuildReport(result: any, metrics: any, quality: CodeQualityResult): Promise<any> {\r\n    return {\r\n      summary: {\r\n        success: true,\r\n        duration: metrics.buildTime,\r\n        outputCount: result.outputs.length,\r\n        totalSize: result.outputs.reduce((sum: number, o: any) => sum + o.size, 0),\r\n        quality: quality.metrics\r\n      },\r\n      outputs: result.outputs.map((o: any) => ({\r\n        file: o.fileName,\r\n        size: o.size,\r\n        gzipSize: o.gzipSize,\r\n        format: o.format,\r\n        hash: o.hash\r\n      })),\r\n      issues: quality.issues,\r\n      performance: metrics\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 尝试错误恢复\r\n   */\r\n  private async attemptErrorRecovery(error: Error, buildId: string): Promise<void> {\r\n    this.logger.info('尝试错误恢复...')\r\n    void error\r\n\r\n    try {\r\n      // 清理临时文件\r\n      const tempDirs = [\r\n        path.join(process.cwd(), '.validation-test', buildId),\r\n        path.join(process.cwd(), '.temp', buildId)\r\n      ]\r\n\r\n      for (const dir of tempDirs) {\r\n        if (await fs.pathExists(dir)) {\r\n          await fs.remove(dir)\r\n        }\r\n      }\r\n\r\n      // 重置状态\r\n      this.setStatus(BuilderStatus.IDLE)\r\n\r\n    } catch (recoveryError) {\r\n      this.logger.error('错误恢复失败:', recoveryError)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 生成缓存键\r\n   */\r\n  private generateCacheKey(config: BuilderConfig): string {\r\n    const configStr = JSON.stringify({\r\n      input: config.input,\r\n      output: config.output,\r\n      external: config.external,\r\n      plugins: config.plugins?.map(p => p.name || 'unknown'),\r\n      bundler: config.bundler,\r\n      libraryType: config.libraryType\r\n    })\r\n\r\n    return createHash('md5').update(configStr).digest('hex')\r\n  }\r\n\r\n  /**\r\n   * 获取缓存的构建结果\r\n   */\r\n  private getCachedBuild(_cacheKey: string): BuildResult | null {\r\n    // 临时强制返回 null 以禁用缓存\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * 缓存构建结果\r\n   */\r\n  private cacheBuildResult(cacheKey: string, result: BuildResult, dependencies: string[]): void {\r\n    this.buildCache.set(cacheKey, {\r\n      configHash: cacheKey,\r\n      buildResult: result,\r\n      timestamp: Date.now(),\r\n      dependencies\r\n    })\r\n\r\n    // 限制缓存大小\r\n    if (this.buildCache.size > 100) {\r\n      const firstKey = this.buildCache.keys().next().value\r\n      if (firstKey !== undefined) {\r\n        this.buildCache.delete(firstKey)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 加载构建缓存\r\n   */\r\n  // @ts-ignore - 临时禁用未使用警告\r\n  private async loadBuildCache(): Promise<void> {\r\n    const cacheFile = path.join(process.cwd(), '.ldesign-builder-cache.json')\r\n\r\n    try {\r\n      if (await fs.pathExists(cacheFile)) {\r\n        const cacheData = await fs.readJson(cacheFile)\r\n\r\n        for (const [key, value] of Object.entries(cacheData)) {\r\n          this.buildCache.set(key, value as BuildCache)\r\n        }\r\n      }\r\n    } catch (error) {\r\n      this.logger.debug('无法加载构建缓存:', error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 保存构建缓存\r\n   */\r\n  private async saveBuildCache(): Promise<void> {\r\n    const cacheFile = path.join(process.cwd(), '.ldesign-builder-cache.json')\r\n\r\n    try {\r\n      const cacheData = Object.fromEntries(this.buildCache.entries())\r\n      await fs.writeJson(cacheFile, cacheData, { spaces: 2 })\r\n    } catch (error) {\r\n      this.logger.debug('无法保存构建缓存:', error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 添加到构建历史\r\n   */\r\n  private addToHistory(result: BuildResult): void {\r\n    this.buildHistory.unshift(result)\r\n\r\n    if (this.buildHistory.length > this.maxHistorySize) {\r\n      this.buildHistory.pop()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取构建历史\r\n   */\r\n  getBuildHistory(): BuildResult[] {\r\n    return [...this.buildHistory]\r\n  }\r\n\r\n  /**\r\n   * 清理构建缓存\r\n   */\r\n  async clearCache(): Promise<void> {\r\n    this.buildCache.clear()\r\n    this.dependencyCache.clear()\r\n    await this.saveBuildCache()\r\n    this.logger.info('构建缓存已清理')\r\n  }\r\n\r\n  /**\r\n   * 加载 package.json\r\n   */\r\n  private async loadPackageJson(): Promise<any> {\r\n    const packageJsonPath = path.join(process.cwd(), 'package.json')\r\n    return await fs.readJson(packageJsonPath)\r\n  }\r\n\r\n  /**\r\n   * 提取包名\r\n   */\r\n  private extractPackageName(importPath: string): string {\r\n    const parts = importPath.split('/')\r\n    if (importPath.startsWith('@')) {\r\n      return parts.slice(0, 2).join('/')\r\n    }\r\n    return parts[0]\r\n  }\r\n\r\n  /**\r\n   * 检查是否是外部依赖\r\n   */\r\n  private isExternal(packageName: string, external: any): boolean {\r\n    if (Array.isArray(external)) {\r\n      return external.some(e => {\r\n        if (typeof e === 'string') {\r\n          return e === packageName || packageName.startsWith(e + '/')\r\n        }\r\n        if (e instanceof RegExp) {\r\n          return e.test(packageName)\r\n        }\r\n        if (typeof e === 'function') {\r\n          return e(packageName)\r\n        }\r\n        return false\r\n      })\r\n    }\r\n\r\n    if (typeof external === 'string') {\r\n      return external === packageName\r\n    }\r\n\r\n    if (external instanceof RegExp) {\r\n      return external.test(packageName)\r\n    }\r\n\r\n    if (typeof external === 'function') {\r\n      return external(packageName)\r\n    }\r\n\r\n    return false\r\n  }\r\n\r\n  // ... 继承自原有 LibraryBuilder 的其他方法 ...\r\n\r\n  /**\r\n   * 启动监听构建模式\r\n   */\r\n  async buildWatch(config?: BuilderConfig): Promise<BuildWatcher> {\r\n    try {\r\n      this.setStatus(BuilderStatus.WATCHING)\r\n\r\n      const mergedConfig = config ? this.mergeConfig(this.config, config) : this.config\r\n\r\n      if (mergedConfig.bundler && mergedConfig.bundler !== this.bundlerAdapter.name) {\r\n        this.setBundler(mergedConfig.bundler)\r\n      }\r\n\r\n      // 获取库类型（优先使用项目根目录进行检测，而不是入口文件路径）\r\n      const projectRoot = mergedConfig.cwd || process.cwd()\r\n      let libraryType = mergedConfig.libraryType || await this.detectLibraryType(projectRoot)\r\n\r\n      if (typeof libraryType === 'string') {\r\n        libraryType = libraryType as LibraryType\r\n      }\r\n\r\n      const strategy = this.strategyManager.getStrategy(libraryType)\r\n      const strategyConfig = await strategy.applyStrategy(mergedConfig)\r\n\r\n      const watcher = await this.bundlerAdapter.watch(strategyConfig)\r\n\r\n      this.emit('watch:start', {\r\n        patterns: watcher.patterns,\r\n        timestamp: Date.now()\r\n      })\r\n\r\n      return watcher\r\n\r\n    } catch (error) {\r\n      this.setStatus(BuilderStatus.ERROR)\r\n      throw this.errorHandler.createError(\r\n        ErrorCode.BUILD_FAILED,\r\n        '启动监听模式失败',\r\n        { cause: error as Error }\r\n      )\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 合并配置\r\n   */\r\n  mergeConfig(base: BuilderConfig, override: BuilderConfig): BuilderConfig {\r\n    return this.configManager.mergeConfigs(base, override)\r\n  }\r\n\r\n  /**\r\n   * 验证配置\r\n   */\r\n  validateConfig(config: BuilderConfig): ValidationResult {\r\n    return this.configManager.validateConfig(config)\r\n  }\r\n\r\n  /**\r\n   * 加载配置文件\r\n   */\r\n  async loadConfig(configPath?: string): Promise<BuilderConfig> {\r\n    const config = await this.configManager.loadConfig(configPath ? { configFile: configPath } : {})\r\n    this.config = config\r\n    return config\r\n  }\r\n\r\n  /**\r\n   * 切换打包核心\r\n   */\r\n  setBundler(bundler: 'rollup' | 'rolldown'): void {\r\n    try {\r\n      this.bundlerAdapter = BundlerAdapterFactory.create(bundler, {\r\n        logger: this.logger,\r\n        performanceMonitor: this.performanceMonitor\r\n      })\r\n\r\n      this.logger.info(`已切换到 ${bundler} 打包核心`)\r\n\r\n    } catch (error) {\r\n      throw this.errorHandler.createError(\r\n        ErrorCode.ADAPTER_NOT_AVAILABLE,\r\n        `切换到 ${bundler} 失败`,\r\n        { cause: error as Error }\r\n      )\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取当前打包核心\r\n   */\r\n  getBundler(): 'rollup' | 'rolldown' {\r\n    return this.bundlerAdapter.name\r\n  }\r\n\r\n  /**\r\n   * 设置库类型\r\n   */\r\n  setLibraryType(type: LibraryType): void {\r\n    this.config.libraryType = type\r\n    this.logger.info(`已设置库类型为: ${type}`)\r\n  }\r\n\r\n  /**\r\n   * 检测库类型\r\n   * - 传入的路径可能是文件路径或子目录，这里做归一化：\r\n   *   1) 若为文件路径，取其所在目录\r\n   *   2) 自下而上查找最近的 package.json 作为项目根\r\n   *   3) 若未找到，回退到当前工作目录\r\n   */\r\n  async detectLibraryType(projectPath: string): Promise<LibraryType> {\r\n    let base = projectPath\r\n\r\n    try {\r\n      const stat = await fs.stat(projectPath).catch(() => null as any)\r\n      if (stat && stat.isFile()) {\r\n        base = path.dirname(projectPath)\r\n      }\r\n\r\n      // 自下而上查找最近的 package.json\r\n      let current = base\r\n      let resolvedRoot = ''\r\n      for (let i = 0; i < 10; i++) {\r\n        const pkg = path.join(current, 'package.json')\r\n        if (await fs.pathExists(pkg)) {\r\n          resolvedRoot = current\r\n          break\r\n        }\r\n        const parent = path.dirname(current)\r\n        if (parent === current) break\r\n        current = parent\r\n      }\r\n\r\n      const root = resolvedRoot || (this.config.cwd || process.cwd())\r\n      const result = await this.libraryDetector.detect(root)\r\n      return result.type\r\n\r\n    } catch {\r\n      // 发生错误时，回退到 cwd\r\n      const fallbackRoot = this.config.cwd || process.cwd()\r\n      const result = await this.libraryDetector.detect(fallbackRoot)\r\n      return result.type\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取当前状态\r\n   */\r\n  getStatus(): BuilderStatus {\r\n    return this.status\r\n  }\r\n\r\n  /**\r\n   * 是否正在构建\r\n   */\r\n  isBuilding(): boolean {\r\n    return this.status === 'building'\r\n  }\r\n\r\n  /**\r\n   * 是否正在监听\r\n   */\r\n  isWatching(): boolean {\r\n    return this.status === 'watching'\r\n  }\r\n\r\n  /**\r\n   * 初始化\r\n   */\r\n  async initialize(): Promise<void> {\r\n    this.setStatus(BuilderStatus.INITIALIZING)\r\n\r\n    try {\r\n      await this.loadConfig()\r\n      this.setBundler(this.config.bundler || 'rollup')\r\n      this.setStatus(BuilderStatus.IDLE)\r\n      this.logger.success('EnhancedLibraryBuilder 初始化完成')\r\n    } catch (error) {\r\n      this.setStatus(BuilderStatus.ERROR)\r\n      throw this.errorHandler.createError(\r\n        ErrorCode.BUILD_FAILED,\r\n        '初始化失败',\r\n        { cause: error as Error }\r\n      )\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 销毁资源\r\n   */\r\n  async dispose(): Promise<void> {\r\n    this.setStatus(BuilderStatus.DISPOSED)\r\n\r\n    // 保存缓存\r\n    await this.saveBuildCache()\r\n\r\n    if (this.bundlerAdapter) {\r\n      await this.bundlerAdapter.dispose()\r\n    }\r\n\r\n    if (this.pluginManager) {\r\n      await this.pluginManager.dispose()\r\n    }\r\n\r\n    if (this.postBuildValidator) {\r\n      await this.postBuildValidator.dispose()\r\n    }\r\n\r\n    this.removeAllListeners()\r\n\r\n    this.logger.info('EnhancedLibraryBuilder 已销毁')\r\n  }\r\n\r\n  /**\r\n   * 获取构建统计信息\r\n   */\r\n  getStats(): any {\r\n    return this.currentStats\r\n  }\r\n\r\n  /**\r\n   * 获取性能指标\r\n   */\r\n  getPerformanceMetrics(): any {\r\n    return this.currentMetrics\r\n  }\r\n\r\n  /**\r\n   * 初始化各种服务\r\n   */\r\n  private initializeServices(options: BuilderOptions): void {\r\n    this.logger = options.logger || createLogger({\r\n      level: 'info',\r\n      prefix: '@ldesign/builder'\r\n    })\r\n\r\n    this.errorHandler = createErrorHandler({\r\n      logger: this.logger,\r\n      showSuggestions: true\r\n    })\r\n\r\n    this.performanceMonitor = new PerformanceMonitor({\r\n      logger: this.logger\r\n    })\r\n\r\n    this.configManager = new ConfigManager({\r\n      logger: this.logger\r\n    })\r\n\r\n    this.strategyManager = new StrategyManager({\r\n      autoDetection: true,\r\n      cache: true\r\n    } as any)\r\n\r\n    this.pluginManager = new PluginManager({\r\n      cache: true,\r\n      hotReload: false\r\n    } as any)\r\n\r\n    this.libraryDetector = new LibraryDetector({\r\n      logger: this.logger\r\n    })\r\n\r\n    this.postBuildValidator = new PostBuildValidator({}, {\r\n      logger: this.logger,\r\n      errorHandler: this.errorHandler\r\n    })\r\n\r\n    this.bundlerAdapter = BundlerAdapterFactory.create('rollup', {\r\n      logger: this.logger,\r\n      performanceMonitor: this.performanceMonitor\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 设置事件监听器\r\n   */\r\n  private setupEventListeners(): void {\r\n    this.configManager.on('config:change', (config: BuilderConfig) => {\r\n      const oldConfig = this.config\r\n      this.config = config\r\n      this.emit('config:change', {\r\n        config,\r\n        oldConfig,\r\n        timestamp: Date.now()\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 设置错误处理\r\n   */\r\n  private setupErrorHandling(): void {\r\n    this.on('error', (error) => {\r\n      this.errorHandler.handle(error, 'EnhancedLibraryBuilder')\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 设置状态\r\n   */\r\n  private setStatus(status: BuilderStatus): void {\r\n    const oldStatus = this.status\r\n    this.status = status\r\n\r\n    this.emit('status:change', {\r\n      status,\r\n      oldStatus,\r\n      timestamp: Date.now()\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 生成构建 ID\r\n   */\r\n  private generateBuildId(): string {\r\n    return `build-${Date.now()}-${Math.random().toString(36).substring(2, 11)}`\r\n  }\r\n\r\n  /**\r\n   * 处理构建错误\r\n   */\r\n  private handleBuildError(error: Error, buildId: string): Error {\r\n    this.performanceMonitor.recordError(buildId, error)\r\n\r\n    if (error instanceof Error) {\r\n      return this.errorHandler.createError(\r\n        ErrorCode.BUILD_FAILED,\r\n        `构建失败: ${error.message}`,\r\n        { cause: error }\r\n      )\r\n    }\r\n\r\n    return this.errorHandler.createError(\r\n      ErrorCode.BUILD_FAILED,\r\n      '构建失败: 未知错误'\r\n    )\r\n  }\r\n}\r\n"]}