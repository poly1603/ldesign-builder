{"version":3,"file":"output-quality-validator.js","sourceRoot":"","sources":["../../src/tests/output-quality-validator.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * 输出质量验证器\r\n * \r\n * 验证打包产物的功能完整性、source map 准确性、类型声明文件正确性\r\n * \r\n * @author LDesign Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport fs from 'fs'\r\nimport path from 'path'\r\nimport { Logger } from '../utils/logger'\r\n\r\nexport interface QualityCheckResult {\r\n  /** 检查名称 */\r\n  name: string\r\n  /** 是否通过 */\r\n  passed: boolean\r\n  /** 检查详情 */\r\n  details: string[]\r\n  /** 错误信息 */\r\n  errors: string[]\r\n  /** 警告信息 */\r\n  warnings: string[]\r\n  /** 评分 (0-100) */\r\n  score: number\r\n}\r\n\r\nexport interface QualityReport {\r\n  /** 总体评分 */\r\n  overallScore: number\r\n  /** 检查结果 */\r\n  checks: QualityCheckResult[]\r\n  /** 通过的检查数 */\r\n  passedChecks: number\r\n  /** 失败的检查数 */\r\n  failedChecks: number\r\n  /** 建议 */\r\n  recommendations: string[]\r\n}\r\n\r\nexport class OutputQualityValidator {\r\n  private logger: Logger\r\n\r\n  constructor(logger?: Logger) {\r\n    this.logger = logger || new Logger()\r\n  }\r\n\r\n  /**\r\n   * 验证输出质量\r\n   */\r\n  async validateOutput(outputDir: string): Promise<QualityReport> {\r\n    this.logger.info('开始输出质量验证...')\r\n\r\n    const checks: QualityCheckResult[] = []\r\n\r\n    // 文件完整性检查\r\n    checks.push(await this.checkFileCompleteness(outputDir))\r\n\r\n    // 功能完整性检查\r\n    checks.push(await this.checkFunctionalCompleteness(outputDir))\r\n\r\n    // Source Map 检查\r\n    checks.push(await this.checkSourceMaps(outputDir))\r\n\r\n    // 类型声明文件检查\r\n    checks.push(await this.checkTypeDeclarations(outputDir))\r\n\r\n    // 代码质量检查\r\n    checks.push(await this.checkCodeQuality(outputDir))\r\n\r\n    // 性能检查\r\n    checks.push(await this.checkPerformance(outputDir))\r\n\r\n    // 兼容性检查\r\n    checks.push(await this.checkCompatibility(outputDir))\r\n\r\n    // 安全性检查\r\n    checks.push(await this.checkSecurity(outputDir))\r\n\r\n    // 计算总体评分\r\n    const passedChecks = checks.filter(c => c.passed).length\r\n    const failedChecks = checks.length - passedChecks\r\n    const overallScore = Math.round(checks.reduce((sum, check) => sum + check.score, 0) / checks.length)\r\n\r\n    // 生成建议\r\n    const recommendations = this.generateRecommendations(checks)\r\n\r\n    const report: QualityReport = {\r\n      overallScore,\r\n      checks,\r\n      passedChecks,\r\n      failedChecks,\r\n      recommendations\r\n    }\r\n\r\n    this.logger.info(`输出质量验证完成，总体评分: ${overallScore}/100`)\r\n    return report\r\n  }\r\n\r\n  /**\r\n   * 检查文件完整性\r\n   */\r\n  private async checkFileCompleteness(outputDir: string): Promise<QualityCheckResult> {\r\n    const details: string[] = []\r\n    const errors: string[] = []\r\n    const warnings: string[] = []\r\n    let score = 100\r\n\r\n    try {\r\n      // 检查必需文件\r\n      const requiredFiles = [\r\n        'index.js',\r\n        'index.cjs',\r\n        'index.js.map',\r\n        'index.cjs.map'\r\n      ]\r\n\r\n      const missingFiles: string[] = []\r\n      const existingFiles: string[] = []\r\n\r\n      for (const file of requiredFiles) {\r\n        const filePath = path.join(outputDir, file)\r\n        if (fs.existsSync(filePath)) {\r\n          existingFiles.push(file)\r\n          details.push(`✅ ${file} 存在`)\r\n        } else {\r\n          missingFiles.push(file)\r\n          errors.push(`❌ ${file} 缺失`)\r\n          score -= 20\r\n        }\r\n      }\r\n\r\n      // 检查文件大小\r\n      for (const file of existingFiles) {\r\n        const filePath = path.join(outputDir, file)\r\n        const stats = fs.statSync(filePath)\r\n        \r\n        if (stats.size === 0) {\r\n          errors.push(`❌ ${file} 文件为空`)\r\n          score -= 10\r\n        } else if (stats.size < 100) {\r\n          warnings.push(`⚠️ ${file} 文件过小 (${stats.size} bytes)`)\r\n          score -= 5\r\n        } else {\r\n          details.push(`✅ ${file} 大小正常 (${this.formatBytes(stats.size)})`)\r\n        }\r\n      }\r\n\r\n      return {\r\n        name: '文件完整性检查',\r\n        passed: missingFiles.length === 0 && score >= 80,\r\n        details,\r\n        errors,\r\n        warnings,\r\n        score: Math.max(0, score)\r\n      }\r\n    } catch (error) {\r\n      return {\r\n        name: '文件完整性检查',\r\n        passed: false,\r\n        details,\r\n        errors: [`检查过程中发生错误: ${(error as Error).message}`],\r\n        warnings,\r\n        score: 0\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 检查功能完整性\r\n   */\r\n  private async checkFunctionalCompleteness(outputDir: string): Promise<QualityCheckResult> {\r\n    const details: string[] = []\r\n    const errors: string[] = []\r\n    const warnings: string[] = []\r\n    let score = 100\r\n\r\n    try {\r\n      // 检查 ESM 模块\r\n      const esmPath = path.join(outputDir, 'index.js')\r\n      if (fs.existsSync(esmPath)) {\r\n        const esmContent = fs.readFileSync(esmPath, 'utf-8')\r\n        \r\n        // 检查导出\r\n        if (esmContent.includes('export')) {\r\n          details.push('✅ ESM 包含导出语句')\r\n        } else {\r\n          errors.push('❌ ESM 缺少导出语句')\r\n          score -= 20\r\n        }\r\n\r\n        // 检查导入\r\n        if (esmContent.includes('import')) {\r\n          details.push('✅ ESM 包含导入语句')\r\n        } else {\r\n          warnings.push('⚠️ ESM 没有导入语句')\r\n          score -= 5\r\n        }\r\n\r\n        // 检查语法\r\n        try {\r\n          // 简单的语法检查\r\n          if (esmContent.includes('function') || esmContent.includes('=>') || esmContent.includes('class')) {\r\n            details.push('✅ ESM 包含函数或类定义')\r\n          } else {\r\n            warnings.push('⚠️ ESM 可能缺少主要功能')\r\n            score -= 10\r\n          }\r\n        } catch (error) {\r\n          errors.push(`❌ ESM 语法检查失败: ${(error as Error).message}`)\r\n          score -= 15\r\n        }\r\n      } else {\r\n        errors.push('❌ ESM 文件不存在')\r\n        score -= 30\r\n      }\r\n\r\n      // 检查 CJS 模块\r\n      const cjsPath = path.join(outputDir, 'index.cjs')\r\n      if (fs.existsSync(cjsPath)) {\r\n        const cjsContent = fs.readFileSync(cjsPath, 'utf-8')\r\n        \r\n        // 检查导出\r\n        if (cjsContent.includes('exports') || cjsContent.includes('module.exports')) {\r\n          details.push('✅ CJS 包含导出语句')\r\n        } else {\r\n          errors.push('❌ CJS 缺少导出语句')\r\n          score -= 20\r\n        }\r\n\r\n        // 检查 require\r\n        if (cjsContent.includes('require')) {\r\n          details.push('✅ CJS 包含 require 语句')\r\n        } else {\r\n          warnings.push('⚠️ CJS 没有 require 语句')\r\n          score -= 5\r\n        }\r\n      } else {\r\n        errors.push('❌ CJS 文件不存在')\r\n        score -= 30\r\n      }\r\n\r\n      return {\r\n        name: '功能完整性检查',\r\n        passed: score >= 70,\r\n        details,\r\n        errors,\r\n        warnings,\r\n        score: Math.max(0, score)\r\n      }\r\n    } catch (error) {\r\n      return {\r\n        name: '功能完整性检查',\r\n        passed: false,\r\n        details,\r\n        errors: [`检查过程中发生错误: ${(error as Error).message}`],\r\n        warnings,\r\n        score: 0\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 检查 Source Map\r\n   */\r\n  private async checkSourceMaps(outputDir: string): Promise<QualityCheckResult> {\r\n    const details: string[] = []\r\n    const errors: string[] = []\r\n    const warnings: string[] = []\r\n    let score = 100\r\n\r\n    try {\r\n      const mapFiles = ['index.js.map', 'index.cjs.map']\r\n\r\n      for (const mapFile of mapFiles) {\r\n        const mapPath = path.join(outputDir, mapFile)\r\n        \r\n        if (fs.existsSync(mapPath)) {\r\n          try {\r\n            const mapContent = fs.readFileSync(mapPath, 'utf-8')\r\n            const sourceMap = JSON.parse(mapContent)\r\n\r\n            // 检查 source map 结构\r\n            if (sourceMap.version && sourceMap.sources && sourceMap.mappings) {\r\n              details.push(`✅ ${mapFile} 结构正确`)\r\n            } else {\r\n              errors.push(`❌ ${mapFile} 结构不完整`)\r\n              score -= 15\r\n            }\r\n\r\n            // 检查源文件引用\r\n            if (sourceMap.sources && sourceMap.sources.length > 0) {\r\n              details.push(`✅ ${mapFile} 包含 ${sourceMap.sources.length} 个源文件引用`)\r\n            } else {\r\n              warnings.push(`⚠️ ${mapFile} 没有源文件引用`)\r\n              score -= 10\r\n            }\r\n\r\n            // 检查映射数据\r\n            if (sourceMap.mappings && sourceMap.mappings.length > 0) {\r\n              details.push(`✅ ${mapFile} 包含映射数据`)\r\n            } else {\r\n              errors.push(`❌ ${mapFile} 缺少映射数据`)\r\n              score -= 20\r\n            }\r\n\r\n          } catch (error) {\r\n            errors.push(`❌ ${mapFile} 解析失败: ${(error as Error).message}`)\r\n            score -= 25\r\n          }\r\n        } else {\r\n          errors.push(`❌ ${mapFile} 不存在`)\r\n          score -= 20\r\n        }\r\n      }\r\n\r\n      return {\r\n        name: 'Source Map 检查',\r\n        passed: score >= 70,\r\n        details,\r\n        errors,\r\n        warnings,\r\n        score: Math.max(0, score)\r\n      }\r\n    } catch (error) {\r\n      return {\r\n        name: 'Source Map 检查',\r\n        passed: false,\r\n        details,\r\n        errors: [`检查过程中发生错误: ${(error as Error).message}`],\r\n        warnings,\r\n        score: 0\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 检查类型声明文件\r\n   */\r\n  private async checkTypeDeclarations(outputDir: string): Promise<QualityCheckResult> {\r\n    const details: string[] = []\r\n    const errors: string[] = []\r\n    const warnings: string[] = []\r\n    let score = 100\r\n\r\n    try {\r\n      // 注意：当前配置中类型声明文件生成被禁用了\r\n      const dtsFiles = ['index.d.ts', 'index.d.cts']\r\n\r\n      let hasAnyDts = false\r\n      for (const dtsFile of dtsFiles) {\r\n        const dtsPath = path.join(outputDir, dtsFile)\r\n        \r\n        if (fs.existsSync(dtsPath)) {\r\n          hasAnyDts = true\r\n          const dtsContent = fs.readFileSync(dtsPath, 'utf-8')\r\n\r\n          // 检查导出声明\r\n          if (dtsContent.includes('export')) {\r\n            details.push(`✅ ${dtsFile} 包含导出声明`)\r\n          } else {\r\n            warnings.push(`⚠️ ${dtsFile} 缺少导出声明`)\r\n            score -= 10\r\n          }\r\n\r\n          // 检查类型定义\r\n          if (dtsContent.includes('interface') || dtsContent.includes('type') || dtsContent.includes('class')) {\r\n            details.push(`✅ ${dtsFile} 包含类型定义`)\r\n          } else {\r\n            warnings.push(`⚠️ ${dtsFile} 可能缺少类型定义`)\r\n            score -= 5\r\n          }\r\n\r\n        } else {\r\n          warnings.push(`⚠️ ${dtsFile} 不存在`)\r\n          score -= 15\r\n        }\r\n      }\r\n\r\n      if (!hasAnyDts) {\r\n        warnings.push('⚠️ 没有找到类型声明文件，这可能是配置问题')\r\n        score = 60 // 降低评分但不算失败\r\n      }\r\n\r\n      return {\r\n        name: '类型声明文件检查',\r\n        passed: score >= 50, // 降低通过标准，因为当前配置禁用了类型生成\r\n        details,\r\n        errors,\r\n        warnings,\r\n        score: Math.max(0, score)\r\n      }\r\n    } catch (error) {\r\n      return {\r\n        name: '类型声明文件检查',\r\n        passed: false,\r\n        details,\r\n        errors: [`检查过程中发生错误: ${(error as Error).message}`],\r\n        warnings,\r\n        score: 0\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 检查代码质量\r\n   */\r\n  private async checkCodeQuality(outputDir: string): Promise<QualityCheckResult> {\r\n    const details: string[] = []\r\n    const errors: string[] = []\r\n    const warnings: string[] = []\r\n    let score = 100\r\n\r\n    try {\r\n      const jsFiles = ['index.js', 'index.cjs']\r\n\r\n      for (const jsFile of jsFiles) {\r\n        const jsPath = path.join(outputDir, jsFile)\r\n        \r\n        if (fs.existsSync(jsPath)) {\r\n          const jsContent = fs.readFileSync(jsPath, 'utf-8')\r\n\r\n          // 检查代码压缩\r\n          const isMinified = jsContent.length > 0 && jsContent.split('\\n').length < 10\r\n          if (isMinified) {\r\n            details.push(`✅ ${jsFile} 已压缩`)\r\n          } else {\r\n            details.push(`ℹ️ ${jsFile} 未压缩`)\r\n          }\r\n\r\n          // 检查 Banner\r\n          if (jsContent.startsWith('/*!')) {\r\n            details.push(`✅ ${jsFile} 包含 Banner`)\r\n          } else {\r\n            warnings.push(`⚠️ ${jsFile} 缺少 Banner`)\r\n            score -= 5\r\n          }\r\n\r\n          // 检查语法错误（简单检查）\r\n          const hasBasicSyntaxIssues = jsContent.includes('undefined') && jsContent.includes('null')\r\n          if (!hasBasicSyntaxIssues) {\r\n            details.push(`✅ ${jsFile} 没有明显的语法问题`)\r\n          } else {\r\n            warnings.push(`⚠️ ${jsFile} 可能存在语法问题`)\r\n            score -= 10\r\n          }\r\n        }\r\n      }\r\n\r\n      return {\r\n        name: '代码质量检查',\r\n        passed: score >= 80,\r\n        details,\r\n        errors,\r\n        warnings,\r\n        score: Math.max(0, score)\r\n      }\r\n    } catch (error) {\r\n      return {\r\n        name: '代码质量检查',\r\n        passed: false,\r\n        details,\r\n        errors: [`检查过程中发生错误: ${(error as Error).message}`],\r\n        warnings,\r\n        score: 0\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 检查性能\r\n   */\r\n  private async checkPerformance(outputDir: string): Promise<QualityCheckResult> {\r\n    const details: string[] = []\r\n    const errors: string[] = []\r\n    const warnings: string[] = []\r\n    let score = 100\r\n\r\n    try {\r\n      const jsFiles = ['index.js', 'index.cjs']\r\n      const sizeThresholds = {\r\n        small: 100 * 1024,    // 100KB\r\n        medium: 500 * 1024,   // 500KB\r\n        large: 1024 * 1024    // 1MB\r\n      }\r\n\r\n      for (const jsFile of jsFiles) {\r\n        const jsPath = path.join(outputDir, jsFile)\r\n        \r\n        if (fs.existsSync(jsPath)) {\r\n          const stats = fs.statSync(jsPath)\r\n          const size = stats.size\r\n\r\n          if (size < sizeThresholds.small) {\r\n            details.push(`✅ ${jsFile} 大小优秀 (${this.formatBytes(size)})`)\r\n          } else if (size < sizeThresholds.medium) {\r\n            details.push(`✅ ${jsFile} 大小良好 (${this.formatBytes(size)})`)\r\n            score -= 5\r\n          } else if (size < sizeThresholds.large) {\r\n            warnings.push(`⚠️ ${jsFile} 大小较大 (${this.formatBytes(size)})`)\r\n            score -= 15\r\n          } else {\r\n            errors.push(`❌ ${jsFile} 大小过大 (${this.formatBytes(size)})`)\r\n            score -= 30\r\n          }\r\n        }\r\n      }\r\n\r\n      return {\r\n        name: '性能检查',\r\n        passed: score >= 70,\r\n        details,\r\n        errors,\r\n        warnings,\r\n        score: Math.max(0, score)\r\n      }\r\n    } catch (error) {\r\n      return {\r\n        name: '性能检查',\r\n        passed: false,\r\n        details,\r\n        errors: [`检查过程中发生错误: ${(error as Error).message}`],\r\n        warnings,\r\n        score: 0\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 检查兼容性\r\n   */\r\n  private async checkCompatibility(outputDir: string): Promise<QualityCheckResult> {\r\n    const details: string[] = []\r\n    const errors: string[] = []\r\n    const warnings: string[] = []\r\n    let score = 100\r\n\r\n    try {\r\n      // 检查 Node.js 兼容性\r\n      const cjsPath = path.join(outputDir, 'index.cjs')\r\n      if (fs.existsSync(cjsPath)) {\r\n        try {\r\n          // 尝试在 Node.js 中加载 CJS 模块\r\n          const { createRequire } = await import('module')\r\n          const require = createRequire(import.meta.url)\r\n          \r\n          // 清除缓存\r\n          delete require.cache[path.resolve(cjsPath)]\r\n          \r\n          const cjsModule = require(path.resolve(cjsPath))\r\n          if (cjsModule && typeof cjsModule === 'object') {\r\n            details.push('✅ CJS 模块可以在 Node.js 中正常加载')\r\n          } else {\r\n            warnings.push('⚠️ CJS 模块加载后结构异常')\r\n            score -= 10\r\n          }\r\n        } catch (error) {\r\n          errors.push(`❌ CJS 模块在 Node.js 中加载失败: ${(error as Error).message}`)\r\n          score -= 20\r\n        }\r\n      }\r\n\r\n      // 检查 ES 模块兼容性\r\n      const esmPath = path.join(outputDir, 'index.js')\r\n      if (fs.existsSync(esmPath)) {\r\n        try {\r\n          const esmModule = await import(`file://${path.resolve(esmPath)}`)\r\n          if (esmModule && typeof esmModule === 'object') {\r\n            details.push('✅ ESM 模块可以正常导入')\r\n          } else {\r\n            warnings.push('⚠️ ESM 模块导入后结构异常')\r\n            score -= 10\r\n          }\r\n        } catch (error) {\r\n          errors.push(`❌ ESM 模块导入失败: ${(error as Error).message}`)\r\n          score -= 20\r\n        }\r\n      }\r\n\r\n      return {\r\n        name: '兼容性检查',\r\n        passed: score >= 70,\r\n        details,\r\n        errors,\r\n        warnings,\r\n        score: Math.max(0, score)\r\n      }\r\n    } catch (error) {\r\n      return {\r\n        name: '兼容性检查',\r\n        passed: false,\r\n        details,\r\n        errors: [`检查过程中发生错误: ${(error as Error).message}`],\r\n        warnings,\r\n        score: 0\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 检查安全性\r\n   */\r\n  private async checkSecurity(outputDir: string): Promise<QualityCheckResult> {\r\n    const details: string[] = []\r\n    const errors: string[] = []\r\n    const warnings: string[] = []\r\n    let score = 100\r\n\r\n    try {\r\n      const jsFiles = ['index.js', 'index.cjs']\r\n\r\n      for (const jsFile of jsFiles) {\r\n        const jsPath = path.join(outputDir, jsFile)\r\n        \r\n        if (fs.existsSync(jsPath)) {\r\n          const jsContent = fs.readFileSync(jsPath, 'utf-8')\r\n\r\n          // 检查潜在的安全问题\r\n          const securityPatterns = [\r\n            { pattern: /eval\\s*\\(/g, message: '使用了 eval()' },\r\n            { pattern: /Function\\s*\\(/g, message: '使用了 Function 构造函数' },\r\n            { pattern: /document\\.write/g, message: '使用了 document.write' },\r\n            { pattern: /innerHTML\\s*=/g, message: '使用了 innerHTML' },\r\n            { pattern: /\\.exec\\s*\\(/g, message: '使用了正则表达式 exec' }\r\n          ]\r\n\r\n          let hasSecurityIssues = false\r\n          for (const { pattern, message } of securityPatterns) {\r\n            if (pattern.test(jsContent)) {\r\n              warnings.push(`⚠️ ${jsFile} ${message}`)\r\n              score -= 10\r\n              hasSecurityIssues = true\r\n            }\r\n          }\r\n\r\n          if (!hasSecurityIssues) {\r\n            details.push(`✅ ${jsFile} 没有发现明显的安全问题`)\r\n          }\r\n        }\r\n      }\r\n\r\n      return {\r\n        name: '安全性检查',\r\n        passed: score >= 80,\r\n        details,\r\n        errors,\r\n        warnings,\r\n        score: Math.max(0, score)\r\n      }\r\n    } catch (error) {\r\n      return {\r\n        name: '安全性检查',\r\n        passed: false,\r\n        details,\r\n        errors: [`检查过程中发生错误: ${(error as Error).message}`],\r\n        warnings,\r\n        score: 0\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 生成建议\r\n   */\r\n  private generateRecommendations(checks: QualityCheckResult[]): string[] {\r\n    const recommendations: string[] = []\r\n\r\n    // 基于检查结果生成建议\r\n    const failedChecks = checks.filter(c => !c.passed)\r\n    const lowScoreChecks = checks.filter(c => c.score < 80)\r\n\r\n    if (failedChecks.length > 0) {\r\n      recommendations.push(`有 ${failedChecks.length} 项检查未通过，建议优先解决这些问题`)\r\n    }\r\n\r\n    if (lowScoreChecks.length > 0) {\r\n      recommendations.push(`有 ${lowScoreChecks.length} 项检查得分较低，建议进行优化`)\r\n    }\r\n\r\n    // 具体建议\r\n    const fileCheck = checks.find(c => c.name === '文件完整性检查')\r\n    if (fileCheck && !fileCheck.passed) {\r\n      recommendations.push('建议检查构建配置，确保生成所有必需的文件')\r\n    }\r\n\r\n    const typeCheck = checks.find(c => c.name === '类型声明文件检查')\r\n    if (typeCheck && typeCheck.score < 80) {\r\n      recommendations.push('建议启用 TypeScript 声明文件生成 (declaration: true)')\r\n    }\r\n\r\n    const perfCheck = checks.find(c => c.name === '性能检查')\r\n    if (perfCheck && perfCheck.score < 80) {\r\n      recommendations.push('建议启用代码压缩和 Tree Shaking 来减小包体积')\r\n    }\r\n\r\n    return recommendations\r\n  }\r\n\r\n  /**\r\n   * 格式化字节大小\r\n   */\r\n  private formatBytes(bytes: number): string {\r\n    if (bytes === 0) return '0 B'\r\n    const k = 1024\r\n    const sizes = ['B', 'KB', 'MB', 'GB']\r\n    const i = Math.floor(Math.log(bytes) / Math.log(k))\r\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]\r\n  }\r\n\r\n  /**\r\n   * 生成质量报告\r\n   */\r\n  generateReport(report: QualityReport): string {\r\n    const lines: string[] = []\r\n\r\n    lines.push('# 输出质量验证报告')\r\n    lines.push('')\r\n    lines.push(`**总体评分**: ${report.overallScore}/100`)\r\n    lines.push(`**通过检查**: ${report.passedChecks}/${report.checks.length}`)\r\n    lines.push(`**失败检查**: ${report.failedChecks}/${report.checks.length}`)\r\n    lines.push('')\r\n\r\n    // 检查详情\r\n    lines.push('## 检查详情')\r\n    lines.push('')\r\n\r\n    for (const check of report.checks) {\r\n      const status = check.passed ? '✅' : '❌'\r\n      lines.push(`### ${status} ${check.name} (${check.score}/100)`)\r\n      lines.push('')\r\n\r\n      if (check.details.length > 0) {\r\n        lines.push('**详情**:')\r\n        check.details.forEach(detail => lines.push(`- ${detail}`))\r\n        lines.push('')\r\n      }\r\n\r\n      if (check.warnings.length > 0) {\r\n        lines.push('**警告**:')\r\n        check.warnings.forEach(warning => lines.push(`- ${warning}`))\r\n        lines.push('')\r\n      }\r\n\r\n      if (check.errors.length > 0) {\r\n        lines.push('**错误**:')\r\n        check.errors.forEach(error => lines.push(`- ${error}`))\r\n        lines.push('')\r\n      }\r\n    }\r\n\r\n    // 建议\r\n    if (report.recommendations.length > 0) {\r\n      lines.push('## 优化建议')\r\n      lines.push('')\r\n      report.recommendations.forEach((rec, index) => {\r\n        lines.push(`${index + 1}. ${rec}`)\r\n      })\r\n      lines.push('')\r\n    }\r\n\r\n    lines.push('---')\r\n    lines.push(`*报告生成时间: ${new Date().toISOString()}*`)\r\n\r\n    return lines.join('\\n')\r\n  }\r\n}\r\n\r\n/**\r\n * 创建输出质量验证器\r\n */\r\nexport function createOutputQualityValidator(logger?: Logger): OutputQualityValidator {\r\n  return new OutputQualityValidator(logger)\r\n}\r\n\r\n/**\r\n * 快速验证输出质量\r\n */\r\nexport async function validateOutputQuality(outputDir: string, logger?: Logger): Promise<QualityReport> {\r\n  const validator = createOutputQualityValidator(logger)\r\n  return await validator.validateOutput(outputDir)\r\n}\r\n"]}