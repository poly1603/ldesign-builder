{"version":3,"file":"builder.js","sourceRoot":"","sources":["../../src/types/builder.ts"],"names":[],"mappings":"AAAA;;GAEG;AASH;;GAEG;AACH,MAAM,CAAN,IAAY,aAaX;AAbD,WAAY,aAAa;IACvB,WAAW;IACX,8BAAa,CAAA;IACb,WAAW;IACX,8CAA6B,CAAA;IAC7B,UAAU;IACV,sCAAqB,CAAA;IACrB,UAAU;IACV,sCAAqB,CAAA;IACrB,WAAW;IACX,gCAAe,CAAA;IACf,UAAU;IACV,sCAAqB,CAAA;AACvB,CAAC,EAbW,aAAa,KAAb,aAAa,QAaxB;AAED;;GAEG;AACH,MAAM,CAAN,IAAY,YAmBX;AAnBD,WAAY,YAAY;IACtB,WAAW;IACX,2CAA2B,CAAA;IAC3B,WAAW;IACX,iDAAiC,CAAA;IACjC,WAAW;IACX,uCAAuB,CAAA;IACvB,WAAW;IACX,2CAA2B,CAAA;IAC3B,WAAW;IACX,2CAA2B,CAAA;IAC3B,WAAW;IACX,6CAA6B,CAAA;IAC7B,WAAW;IACX,uCAAuB,CAAA;IACvB,WAAW;IACX,+CAA+B,CAAA;IAC/B,WAAW;IACX,+CAA+B,CAAA;AACjC,CAAC,EAnBW,YAAY,KAAZ,YAAY,QAmBvB","sourcesContent":["/**\n * 构建器相关类型定义\n */\n\nimport type { EventEmitter } from 'events'\nimport type { BuilderConfig } from './config'\nimport type { OutputFile, BuildStats } from './output'\nimport type { PerformanceMetrics } from './performance'\nimport type { ValidationResult } from './common'\nimport type { ValidationResult as PostBuildValidationResult } from '../types/validation'\n\n/**\n * 构建器状态枚举\n */\nexport enum BuilderStatus {\n  /** 空闲状态 */\n  IDLE = 'idle',\n  /** 初始化中 */\n  INITIALIZING = 'initializing',\n  /** 构建中 */\n  BUILDING = 'building',\n  /** 监听中 */\n  WATCHING = 'watching',\n  /** 错误状态 */\n  ERROR = 'error',\n  /** 已销毁 */\n  DISPOSED = 'disposed'\n}\n\n/**\n * 构建器事件枚举\n */\nexport enum BuilderEvent {\n  /** 构建开始 */\n  BUILD_START = 'build:start',\n  /** 构建进度 */\n  BUILD_PROGRESS = 'build:progress',\n  /** 构建结束 */\n  BUILD_END = 'build:end',\n  /** 构建错误 */\n  BUILD_ERROR = 'build:error',\n  /** 监听开始 */\n  WATCH_START = 'watch:start',\n  /** 监听变化 */\n  WATCH_CHANGE = 'watch:change',\n  /** 监听结束 */\n  WATCH_END = 'watch:end',\n  /** 配置变化 */\n  CONFIG_CHANGE = 'config:change',\n  /** 状态变化 */\n  STATUS_CHANGE = 'status:change'\n}\n\n/**\n * 构建器选项\n */\nexport interface BuilderOptions {\n  /** 工作目录 */\n  cwd?: string\n\n  /** 初始配置 */\n  config?: BuilderConfig\n\n  /** 事件监听器 */\n  listeners?: Partial<BuilderEventListeners>\n\n  /** 日志记录器 */\n  logger?: any\n\n  /** 是否自动检测库类型 */\n  autoDetect?: boolean\n\n  /** 是否启用缓存 */\n  cache?: boolean\n\n  /** 缓存目录 */\n  cacheDir?: string\n\n  /** 是否启用性能监控 */\n  performance?: boolean\n}\n\n/**\n * 构建器事件监听器\n */\nexport interface BuilderEventListeners {\n  [BuilderEvent.BUILD_START]: (data: BuildStartEventData) => void\n  [BuilderEvent.BUILD_PROGRESS]: (data: BuildProgressEventData) => void\n  [BuilderEvent.BUILD_END]: (data: BuildEndEventData) => void\n  [BuilderEvent.BUILD_ERROR]: (data: BuildErrorEventData) => void\n  [BuilderEvent.WATCH_START]: (data: WatchStartEventData) => void\n  [BuilderEvent.WATCH_CHANGE]: (data: WatchChangeEventData) => void\n  [BuilderEvent.WATCH_END]: (data: WatchEndEventData) => void\n  [BuilderEvent.CONFIG_CHANGE]: (data: ConfigChangeEventData) => void\n  [BuilderEvent.STATUS_CHANGE]: (data: StatusChangeEventData) => void\n}\n\n/**\n * 构建开始事件数据\n */\nexport interface BuildStartEventData {\n  /** 配置 */\n  config: BuilderConfig\n  /** 时间戳 */\n  timestamp: number\n  /** 构建 ID */\n  buildId: string\n}\n\n/**\n * 构建进度事件数据\n */\nexport interface BuildProgressEventData {\n  /** 进度百分比 */\n  progress: number\n  /** 当前阶段 */\n  phase: string\n  /** 当前文件 */\n  currentFile?: string\n  /** 已处理文件数 */\n  processedFiles: number\n  /** 总文件数 */\n  totalFiles: number\n  /** 时间戳 */\n  timestamp: number\n}\n\n/**\n * 构建结束事件数据\n */\nexport interface BuildEndEventData {\n  /** 构建结果 */\n  result: BuildResult\n  /** 持续时间 */\n  duration: number\n  /** 时间戳 */\n  timestamp: number\n}\n\n/**\n * 构建错误事件数据\n */\nexport interface BuildErrorEventData {\n  /** 错误信息 */\n  error: Error\n  /** 错误阶段 */\n  phase: string\n  /** 相关文件 */\n  file?: string\n  /** 时间戳 */\n  timestamp: number\n}\n\n/**\n * 监听开始事件数据\n */\nexport interface WatchStartEventData {\n  /** 监听的文件模式 */\n  patterns: string[]\n  /** 时间戳 */\n  timestamp: number\n}\n\n/**\n * 监听变化事件数据\n */\nexport interface WatchChangeEventData {\n  /** 变化类型 */\n  type: 'add' | 'change' | 'unlink'\n  /** 文件路径 */\n  path: string\n  /** 时间戳 */\n  timestamp: number\n}\n\n/**\n * 监听结束事件数据\n */\nexport interface WatchEndEventData {\n  /** 时间戳 */\n  timestamp: number\n}\n\n/**\n * 配置变化事件数据\n */\nexport interface ConfigChangeEventData {\n  /** 新配置 */\n  config: BuilderConfig\n  /** 旧配置 */\n  oldConfig: BuilderConfig\n  /** 配置文件路径 */\n  configFile?: string\n  /** 时间戳 */\n  timestamp: number\n}\n\n/**\n * 状态变化事件数据\n */\nexport interface StatusChangeEventData {\n  /** 新状态 */\n  status: BuilderStatus\n  /** 旧状态 */\n  oldStatus: BuilderStatus\n  /** 时间戳 */\n  timestamp: number\n}\n\n/**\n * 构建结果\n */\nexport interface BuildResult {\n  /** 构建是否成功 */\n  success: boolean\n\n  /** 输出文件列表 */\n  outputs: OutputFile[]\n\n  /** 构建时间（毫秒） */\n  duration: number\n\n  /** 构建统计 */\n  stats: BuildStats\n\n  /** 性能指标 */\n  performance: PerformanceMetrics\n\n  /** 警告信息 */\n  warnings: Warning[]\n\n  /** 错误信息 */\n  errors: Error[]\n\n  /** 构建 ID */\n  buildId: string\n\n  /** 时间戳 */\n  timestamp: number\n\n  /** 构建器名称 */\n  bundler: string\n\n  /** 构建模式 */\n  mode: string\n\n  /** 库类型 */\n  libraryType?: string\n\n  /** 缓存信息（若启用缓存） */\n  cache?: {\n    enabled: boolean\n    hit: boolean\n    lookupMs?: number\n    savedMs?: number\n    dir?: string\n    ttl?: number\n    maxSize?: number\n  }\n\n  /** 打包后验证结果 */\n  validation?: PostBuildValidationResult\n}\n\n/**\n * 警告信息\n */\nexport interface Warning {\n  /** 警告代码 */\n  code: string\n\n  /** 警告消息 */\n  message: string\n\n  /** 相关文件 */\n  file?: string\n\n  /** 行号 */\n  line?: number\n\n  /** 列号 */\n  column?: number\n\n  /** 建议 */\n  suggestion?: string\n}\n\n/**\n * 构建监听器\n */\nexport interface BuildWatcher extends EventEmitter {\n  /** 关闭监听器 */\n  close(): Promise<void>\n\n  /** 是否正在监听 */\n  readonly watching: boolean\n\n  /** 监听的文件模式 */\n  readonly patterns: string[]\n}\n\n/**\n * 库构建器接口\n */\nexport interface ILibraryBuilder extends EventEmitter {\n  // 构建管理\n  build(config?: BuilderConfig): Promise<BuildResult>\n  buildWatch(config?: BuilderConfig): Promise<BuildWatcher>\n\n  // 配置管理\n  mergeConfig(base: BuilderConfig, override: BuilderConfig): BuilderConfig\n  validateConfig(config: BuilderConfig): ValidationResult\n  loadConfig(configPath?: string): Promise<BuilderConfig>\n\n  // 核心切换\n  setBundler(bundler: 'rollup' | 'rolldown'): void\n  getBundler(): 'rollup' | 'rolldown'\n\n  // 库类型管理\n  setLibraryType(type: string): void\n  detectLibraryType(projectPath: string): Promise<string>\n\n  // 状态管理\n  getStatus(): BuilderStatus\n  isBuilding(): boolean\n  isWatching(): boolean\n\n  // 生命周期\n  initialize(): Promise<void>\n  dispose(): Promise<void>\n\n  // 统计信息\n  getStats(): BuildStats | null\n  getPerformanceMetrics(): PerformanceMetrics | null\n}\n\n/**\n * 构建上下文\n */\nexport interface BuildContext {\n  /** 构建 ID */\n  buildId: string\n\n  /** 开始时间 */\n  startTime: number\n\n  /** 配置 */\n  config: BuilderConfig\n\n  /** 工作目录 */\n  cwd: string\n\n  /** 缓存目录 */\n  cacheDir: string\n\n  /** 临时目录 */\n  tempDir: string\n\n  /** 是否为监听模式 */\n  watch: boolean\n\n  /** 环境变量 */\n  env: Record<string, string>\n\n  /** 日志记录器 */\n  logger: any\n\n  /** 性能监控器 */\n  performanceMonitor: any\n}\n\n/**\n * 构建钩子\n */\nexport interface BuildHooks {\n  /** 构建前钩子 */\n  beforeBuild?: (context: BuildContext) => Promise<void> | void\n\n  /** 构建后钩子 */\n  afterBuild?: (context: BuildContext, result: BuildResult) => Promise<void> | void\n\n  /** 错误钩子 */\n  onError?: (context: BuildContext, error: Error) => Promise<void> | void\n\n  /** 监听开始钩子 */\n  onWatchStart?: (context: BuildContext) => Promise<void> | void\n\n  /** 文件变化钩子 */\n  onFileChange?: (context: BuildContext, file: string, type: string) => Promise<void> | void\n\n  /** 监听结束钩子 */\n  onWatchEnd?: (context: BuildContext) => Promise<void> | void\n}\n\n/**\n * 构建器工厂选项\n */\nexport interface BuilderFactoryOptions {\n  /** 默认打包器 */\n  defaultBundler?: 'rollup' | 'rolldown'\n\n  /** 插件预设 */\n  pluginPresets?: Record<string, any[]>\n\n  /** 配置预设 */\n  configPresets?: Record<string, Partial<BuilderConfig>>\n\n  /** 是否启用自动检测 */\n  autoDetection?: boolean\n\n  /** 缓存配置 */\n  cache?: {\n    enabled: boolean\n    dir: string\n    ttl: number\n  }\n}\n\n/**\n * 构建器实例信息\n */\nexport interface BuilderInstanceInfo {\n  /** 实例 ID */\n  id: string\n\n  /** 创建时间 */\n  createdAt: number\n\n  /** 最后使用时间 */\n  lastUsedAt: number\n\n  /** 构建次数 */\n  buildCount: number\n\n  /** 当前状态 */\n  status: BuilderStatus\n\n  /** 配置摘要 */\n  configSummary: {\n    bundler: string\n    libraryType?: string\n    mode: string\n  }\n}\n"]}