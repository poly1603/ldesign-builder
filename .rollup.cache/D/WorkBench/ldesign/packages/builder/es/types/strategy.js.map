{"version":3,"file":"strategy.js","sourceRoot":"","sources":["../../src/types/strategy.ts"],"names":[],"mappings":"AAAA;;GAEG","sourcesContent":["/**\n * 策略相关类型定义\n */\n\nimport type { BuilderConfig } from './config'\nimport type { UnifiedConfig, UnifiedPlugin } from './adapter'\nimport type { LibraryType, DetectionEvidence } from './library'\nimport type { ProjectInfo, DependencyInfo } from './common'\n\n/**\n * 库构建策略接口\n */\nexport interface ILibraryStrategy {\n  /** 策略名称 */\n  readonly name: string\n\n  /** 支持的库类型 */\n  readonly supportedTypes: LibraryType[]\n\n  /** 策略优先级 */\n  readonly priority: number\n\n  /** 应用策略 */\n  applyStrategy(config: BuilderConfig): Promise<UnifiedConfig>\n\n  /** 检测是否适用 */\n  isApplicable(config: BuilderConfig): boolean | Promise<boolean>\n\n  /** 获取默认配置 */\n  getDefaultConfig(): Partial<BuilderConfig>\n\n  /** 获取推荐插件 */\n  getRecommendedPlugins(config: BuilderConfig): UnifiedPlugin[]\n\n  /** 验证配置 */\n  validateConfig(config: BuilderConfig): StrategyValidationResult\n\n  /** 优化配置 */\n  optimizeConfig?(config: BuilderConfig): Promise<BuilderConfig>\n}\n\n/**\n * 策略验证结果\n */\nexport interface StrategyValidationResult {\n  /** 是否有效 */\n  valid: boolean\n\n  /** 错误信息 */\n  errors: string[]\n\n  /** 警告信息 */\n  warnings: string[]\n\n  /** 建议 */\n  suggestions: string[]\n}\n\n/**\n * 策略上下文\n */\nexport interface StrategyContext {\n  /** 项目根目录 */\n  projectRoot: string\n\n  /** 构建模式 */\n  mode: 'development' | 'production'\n\n  /** 目标平台 */\n  platform: 'browser' | 'node' | 'neutral'\n\n  /** 环境变量 */\n  env: Record<string, string>\n\n  /** 项目信息 */\n  projectInfo: ProjectInfo\n\n  /** 依赖信息 */\n  dependencies: DependencyInfo[]\n}\n\n// ProjectInfo 已在 common.ts 中定义，这里导入\nexport type { ProjectInfo } from './common'\n\n/**\n * 框架信息\n */\nexport interface FrameworkInfo {\n  /** 框架名称 */\n  name: string\n\n  /** 框架版本 */\n  version: string\n\n  /** 框架类型 */\n  type: 'ui' | 'backend' | 'fullstack' | 'utility'\n\n  /** 相关插件 */\n  plugins: string[]\n}\n\n// DependencyInfo 已在 common.ts 中定义，这里导入\nexport type { DependencyInfo } from './common'\n\n/**\n * 策略选项\n */\nexport interface StrategyOptions {\n  /** 是否启用优化 */\n  optimize?: boolean\n\n  /** 是否启用缓存 */\n  cache?: boolean\n\n  /** 自定义插件 */\n  customPlugins?: UnifiedPlugin[]\n\n  /** 排除的插件 */\n  excludePlugins?: string[]\n\n  /** 插件选项覆盖 */\n  pluginOptions?: Record<string, any>\n\n  /** 是否启用实验性功能 */\n  experimental?: boolean\n}\n\n/**\n * TypeScript 策略选项\n */\nexport interface TypeScriptStrategyOptions extends StrategyOptions {\n  /** TypeScript 配置文件路径 */\n  tsconfig?: string\n\n  /** 是否生成声明文件 */\n  declaration?: boolean\n\n  /** 声明文件输出目录 */\n  declarationDir?: string\n\n  /** 是否启用 isolatedDeclarations */\n  isolatedDeclarations?: boolean\n\n  /** 是否启用增量编译 */\n  incremental?: boolean\n\n  /** 是否启用复合项目 */\n  composite?: boolean\n\n  /** 引用的项目 */\n  references?: string[]\n}\n\n/**\n * Vue 策略选项\n */\nexport interface VueStrategyOptions extends StrategyOptions {\n  /** Vue 版本 */\n  version?: 2 | 3\n\n  /** 是否启用 JSX */\n  jsx?: boolean\n\n  /** 是否支持按需加载 */\n  onDemand?: boolean\n\n  /** 编译器选项 */\n  compilerOptions?: VueCompilerOptions\n\n  /** 模板选项 */\n  templateOptions?: VueTemplateOptions\n\n  /** 样式选项 */\n  styleOptions?: VueStyleOptions\n}\n\n/**\n * Vue 编译器选项\n */\nexport interface VueCompilerOptions {\n  /** 是否为生产环境 */\n  isProduction?: boolean\n\n  /** 自定义元素判断 */\n  isCustomElement?: (tag: string) => boolean\n\n  /** 空白字符处理 */\n  whitespace?: 'preserve' | 'condense'\n\n  /** 是否保留注释 */\n  comments?: boolean\n\n  /** 指令转换 */\n  directiveTransforms?: Record<string, any>\n}\n\n/**\n * Vue 模板选项\n */\nexport interface VueTemplateOptions {\n  /** 是否预编译模板 */\n  precompile?: boolean\n\n  /** 模板编译器 */\n  compiler?: 'vue' | 'vue-tsc'\n\n  /** 模板语言 */\n  lang?: 'html' | 'pug'\n\n  /** 模板选项 */\n  compilerOptions?: Record<string, any>\n}\n\n/**\n * Vue 样式选项\n */\nexport interface VueStyleOptions {\n  /** 预处理器 */\n  preprocessor?: 'less' | 'scss' | 'sass' | 'stylus'\n\n  /** 是否启用 CSS 模块 */\n  modules?: boolean\n\n  /** 是否启用 scoped 样式 */\n  scoped?: boolean\n\n  /** 样式变量文件 */\n  variablesFile?: string\n}\n\n/**\n * 样式策略选项\n */\nexport interface StyleStrategyOptions extends StrategyOptions {\n  /** 预处理器类型 */\n  preprocessor?: 'less' | 'scss' | 'sass' | 'stylus' | 'postcss'\n\n  /** 是否提取 CSS */\n  extract?: boolean\n\n  /** 是否压缩 CSS */\n  minify?: boolean\n\n  /** 是否启用 autoprefixer */\n  autoprefixer?: boolean\n\n  /** 是否启用 CSS 模块 */\n  modules?: boolean\n\n  /** PostCSS 插件 */\n  postcssPlugins?: any[]\n\n  /** 浏览器兼容性 */\n  browserslist?: string | string[]\n}\n\n/**\n * 混合策略选项\n */\nexport interface MixedStrategyOptions extends StrategyOptions {\n  /** 主要策略 */\n  primaryStrategy: LibraryType\n\n  /** 次要策略 */\n  secondaryStrategies: LibraryType[]\n\n  /** 策略权重 */\n  strategyWeights?: Record<LibraryType, number>\n\n  /** 策略特定选项 */\n  strategyOptions?: {\n    typescript?: TypeScriptStrategyOptions\n    vue?: VueStrategyOptions\n    style?: StyleStrategyOptions\n  }\n}\n\n/**\n * 策略应用结果\n */\nexport interface StrategyApplicationResult {\n  /** 应用的策略 */\n  strategy: ILibraryStrategy\n\n  /** 生成的配置 */\n  config: UnifiedConfig\n\n  /** 应用的插件 */\n  plugins: UnifiedPlugin[]\n\n  /** 应用时间 */\n  duration: number\n\n  /** 警告信息 */\n  warnings: string[]\n\n  /** 优化建议 */\n  optimizations: string[]\n}\n\n/**\n * 策略管理器选项\n */\nexport interface StrategyManagerOptions {\n  /** 默认策略 */\n  defaultStrategy?: LibraryType\n\n  /** 策略优先级 */\n  strategyPriority?: Record<LibraryType, number>\n\n  /** 是否启用自动检测 */\n  autoDetection?: boolean\n\n  /** 自定义策略 */\n  customStrategies?: ILibraryStrategy[]\n\n  /** 策略缓存 */\n  cache?: boolean\n\n  /** 缓存目录 */\n  cacheDir?: string\n}\n\n/**\n * 策略检测结果\n */\nexport interface StrategyDetectionResult {\n  /** 检测到的策略 */\n  strategy: LibraryType\n\n  /** 置信度 */\n  confidence: number\n\n  /** 检测依据 */\n  evidence: DetectionEvidence[]\n\n  /** 备选策略 */\n  alternatives: Array<{\n    strategy: LibraryType\n    confidence: number\n  }>\n}\n\n// DetectionEvidence 已在 library.ts 中定义，这里导入\nexport type { DetectionEvidence } from './library'\n\n/**\n * 策略性能指标\n */\nexport interface StrategyPerformanceMetrics {\n  /** 策略名称 */\n  strategy: string\n\n  /** 应用时间 */\n  applicationTime: number\n\n  /** 配置生成时间 */\n  configGenerationTime: number\n\n  /** 插件解析时间 */\n  pluginResolutionTime: number\n\n  /** 验证时间 */\n  validationTime: number\n\n  /** 内存使用 */\n  memoryUsage: number\n\n  /** 缓存命中率 */\n  cacheHitRate: number\n}\n\n/**\n * 策略对比结果\n */\nexport interface StrategyComparisonResult {\n  /** 对比的策略 */\n  strategies: LibraryType[]\n\n  /** 性能对比 */\n  performance: Record<LibraryType, StrategyPerformanceMetrics>\n\n  /** 功能对比 */\n  features: Record<LibraryType, string[]>\n\n  /** 推荐策略 */\n  recommended: LibraryType\n\n  /** 推荐理由 */\n  reason: string\n}\n"]}