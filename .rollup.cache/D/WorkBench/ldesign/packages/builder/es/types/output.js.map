{"version":3,"file":"output.js","sourceRoot":"","sources":["../../src/types/output.ts"],"names":[],"mappings":"AAAA;;GAEG;;AAsYH,4CAA4C","sourcesContent":["/**\n * 输出相关类型定义\n */\n\n// 导入已在其他文件中定义的类型\nimport type { OutputFormat, ChunkInfo } from './adapter'\nimport type { OptimizationSuggestion } from './library'\nimport type { MinifyConfig } from './performance'\n\n// 重新导出以供其他模块使用\nexport type { OutputFormat, ChunkInfo, OptimizationSuggestion, MinifyConfig }\n\n/**\n * 构建输出文件信息 - 用于替代 any 类型\n */\nexport interface BuildOutput {\n  /** 文件名 */\n  fileName: string\n  /** 文件大小（字节） */\n  size: number\n  /** 文件源码内容 */\n  source?: string\n  /** 输出类型 */\n  type: 'chunk' | 'asset'\n  /** 模块格式 */\n  format?: OutputFormat\n  /** 是否为入口文件 */\n  isEntry?: boolean\n  /** 依赖的模块 */\n  imports?: string[]\n  /** 导出的内容 */\n  exports?: string[]\n}\n\n/**\n * Sourcemap 类型\n */\nexport type SourcemapType = boolean | 'inline' | 'hidden'\n\n/**\n * 格式特定的输出配置\n */\nexport interface FormatOutputConfig {\n  /** 输出目录 */\n  dir?: string\n\n  /** 输入文件（支持字符串、数组、通配符） */\n  input?: string | string[] | Record<string, string>\n\n  /** 输出格式 */\n  format?: OutputFormat\n\n  /** 是否保留目录结构 */\n  preserveStructure?: boolean\n\n  /** 是否生成类型声明文件 */\n  dts?: boolean\n\n  /** 是否生成 sourcemap */\n  sourcemap?: SourcemapType\n\n  /** 导出模式 */\n  exports?: 'auto' | 'default' | 'named' | 'none'\n\n  /** 压缩配置 */\n  minify?: boolean | MinifyConfig\n\n  /** 文件名模式 */\n  fileName?: string | ((chunkInfo: ChunkInfo) => string)\n\n  /** 资源文件名模式 */\n  assetFileNames?: string | ((assetInfo: any) => string)\n\n  /** 代码块文件名模式 */\n  chunkFileNames?: string | ((chunkInfo: ChunkInfo) => string)\n\n  /** 入口文件名模式 */\n  entryFileNames?: string | ((chunkInfo: ChunkInfo) => string)\n\n  /** 全局变量映射 */\n  globals?: Record<string, string>\n\n  /** 库名称（UMD/IIFE 格式需要） */\n  name?: string\n}\n\n/**\n * 输出配置\n */\nexport interface OutputConfig {\n  /** 输出目录 */\n  dir?: string\n\n  /** 输出文件（单文件输出时使用） */\n  file?: string\n\n  /** 输出格式 */\n  format?: OutputFormat | OutputFormat[]\n\n  /** ESM 格式特定配置（true 使用默认配置，false 禁用） */\n  esm?: boolean | FormatOutputConfig\n\n  /** CommonJS 格式特定配置（true 使用默认配置，false 禁用） */\n  cjs?: boolean | FormatOutputConfig\n\n  /** UMD 格式特定配置（true 使用默认配置，false 禁用） */\n  umd?: boolean | (FormatOutputConfig & {\n    /** 全局变量名 */\n    name?: string\n    /** 全局变量映射 */\n    globals?: Record<string, string>\n  })\n\n  /** 库名称（UMD/IIFE 格式需要） */\n  name?: string\n\n  /** 文件名模式 */\n  fileName?: string | ((chunkInfo: ChunkInfo) => string)\n\n  /** 是否生成 sourcemap */\n  sourcemap?: SourcemapType\n\n  /** 代码分割配置 */\n  manualChunks?: Record<string, string[]> | ((id: string) => string | void)\n\n  /** chunk 文件名模式 */\n  chunkFileNames?: string\n\n  /** 资源文件名模式 */\n  assetFileNames?: string\n\n  /** 全局变量映射（UMD 格式使用） */\n  globals?: Record<string, string>\n\n  /** 代码前缀 */\n  banner?: string | (() => string | Promise<string>)\n\n  /** 代码后缀 */\n  footer?: string | (() => string | Promise<string>)\n\n  /** 模块前缀 */\n  intro?: string | (() => string | Promise<string>)\n\n  /** 模块后缀 */\n  outro?: string | (() => string | Promise<string>)\n\n  /** 是否保留模块结构 */\n  preserveModules?: boolean\n\n  /** 保留模块根目录 */\n  preserveModulesRoot?: string\n\n  /** 是否启用严格模式 */\n  strict?: boolean\n\n  /** 导出模式 */\n  exports?: 'auto' | 'default' | 'named' | 'none'\n\n  /** 外部导入的处理方式 */\n  externalLiveBindings?: boolean\n\n  /** 是否冻结命名空间 */\n  freeze?: boolean\n\n  /** 缩进字符 */\n  indent?: string | boolean\n\n  /** 命名空间分隔符 */\n  namespaceToStringTag?: boolean\n\n  /** 是否优先使用 const */\n  preferConst?: boolean\n\n  /** 是否启用 interop */\n  interop?: 'auto' | 'esModule' | 'default' | 'defaultOnly' | false\n\n  /** 系统 JS 配置 */\n  systemNullSetters?: boolean\n\n  /** 是否验证 */\n  validate?: boolean\n\n  /** 压缩配置 */\n  minify?: boolean | MinifyConfig\n\n  /** 压缩后的文件后缀 */\n  minifySuffix?: string\n}\n\n// ChunkInfo 已在文件开头导入，这里不需要重复导入\n\n/**\n * 输出文件信息\n */\nexport interface OutputFile {\n  /** 文件名 */\n  fileName: string\n\n  /** 文件类型 */\n  type: 'chunk' | 'asset'\n\n  /** 文件内容 */\n  source: string | Uint8Array\n\n  /** 文件大小（字节） */\n  size: number\n\n  /** 压缩后大小 */\n  gzipSize?: number\n\n  /** Brotli 压缩后大小 */\n  brotliSize?: number\n\n  /** 是否为入口文件 */\n  isEntry?: boolean\n\n  /** 是否为动态导入 */\n  isDynamicEntry?: boolean\n\n  /** 导入的文件 */\n  imports?: string[]\n\n  /** 动态导入的文件 */\n  dynamicImports?: string[]\n\n  /** 导出的变量 */\n  exports?: string[]\n\n  /** 模块列表 */\n  modules?: ModuleInfo[]\n\n  /** sourcemap */\n  map?: SourceMap\n}\n\n/**\n * 模块信息\n */\nexport interface ModuleInfo {\n  /** 模块 ID */\n  id: string\n\n  /** 模块大小 */\n  size: number\n\n  /** 渲染后大小 */\n  renderedLength: number\n\n  /** 原始大小 */\n  originalLength: number\n\n  /** 是否为入口模块 */\n  isEntry: boolean\n\n  /** 是否为外部模块 */\n  isExternal: boolean\n\n  /** 导入的模块 */\n  importedIds: string[]\n\n  /** 动态导入的模块 */\n  dynamicallyImportedIds: string[]\n\n  /** 导入该模块的模块 */\n  importers: string[]\n\n  /** 动态导入该模块的模块 */\n  dynamicImporters: string[]\n}\n\n/**\n * SourceMap 信息\n */\nexport interface SourceMap {\n  /** 版本 */\n  version: number\n\n  /** 源文件列表 */\n  sources: string[]\n\n  /** 源文件内容 */\n  sourcesContent?: (string | null)[]\n\n  /** 名称列表 */\n  names: string[]\n\n  /** 映射信息 */\n  mappings: string\n\n  /** 文件名 */\n  file?: string\n\n  /** 源根目录 */\n  sourceRoot?: string\n}\n\n\n\n/**\n * 大小信息\n */\nexport interface SizeInfo {\n  /** 原始大小 */\n  raw: number\n\n  /** Gzip 压缩后大小 */\n  gzip: number\n\n  /** Brotli 压缩后大小 */\n  brotli: number\n\n  /** 按文件类型分组的大小 */\n  byType: Record<string, number>\n\n  /** 按格式分组的大小 */\n  byFormat: Record<OutputFormat, number>\n\n  /** 最大文件 */\n  largest: {\n    file: string\n    size: number\n  }\n\n  /** 总文件数 */\n  fileCount: number\n}\n\n/**\n * 构建统计信息\n */\nexport interface BuildStats {\n  /** 构建时间 */\n  buildTime: number\n\n  /** 文件数量 */\n  fileCount: number\n\n  /** 总大小 */\n  totalSize: SizeInfo\n\n  /** 按格式分组的统计 */\n  byFormat: Record<OutputFormat, {\n    fileCount: number\n    size: SizeInfo\n  }>\n\n  /** 模块统计 */\n  modules: {\n    total: number\n    external: number\n    internal: number\n    largest: ModuleInfo\n  }\n\n  /** 依赖统计 */\n  dependencies: {\n    total: number\n    external: string[]\n    bundled: string[]\n    circular: string[][]\n  }\n}\n\n/**\n * 输出分析结果\n */\nexport interface OutputAnalysis {\n  /** 构建统计 */\n  stats: BuildStats\n\n  /** 性能指标 */\n  performance: {\n    /** 构建速度 */\n    buildSpeed: number\n\n    /** 内存使用 */\n    memoryUsage: number\n\n    /** 缓存命中率 */\n    cacheHitRate: number\n  }\n\n  /** 优化建议 */\n  optimizations: OptimizationSuggestion[]\n\n  /** 警告信息 */\n  warnings: string[]\n\n  /** 错误信息 */\n  errors: string[]\n}\n\n// OptimizationSuggestion 已在文件开头导入，这里不需要重复导入\n"]}