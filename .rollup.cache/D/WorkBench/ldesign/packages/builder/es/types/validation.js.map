{"version":3,"file":"validation.js","sourceRoot":"","sources":["../../src/types/validation.ts"],"names":[],"mappings":"AAAA;;;;;;;GAOG","sourcesContent":["/**\n * 打包后验证相关类型定义\n * \n * 提供打包后验证功能的完整类型支持\n * \n * @author LDesign Team\n * @version 1.0.0\n */\n\nimport type { BuildContext, BuildResult } from './builder'\nimport type { LogLevel } from './common'\n\n/**\n * 验证配置接口\n */\nexport interface PostBuildValidationConfig {\n  /** 是否启用验证 */\n  enabled?: boolean\n\n  /** 测试框架类型 */\n  testFramework?: 'vitest' | 'jest' | 'mocha' | 'auto'\n\n  /** 测试文件匹配模式 */\n  testPattern?: string | string[]\n\n  /** 测试超时时间（毫秒） */\n  timeout?: number\n\n  /** 是否在验证失败时停止构建 */\n  failOnError?: boolean\n\n  /** 验证环境配置 */\n  environment?: ValidationEnvironmentConfig\n\n  /** 验证报告配置 */\n  reporting?: ValidationReportingConfig\n\n  /** 自定义验证钩子 */\n  hooks?: ValidationHooks\n\n  /** 验证范围配置 */\n  scope?: ValidationScopeConfig\n}\n\n/**\n * 验证环境配置\n */\nexport interface ValidationEnvironmentConfig {\n  /** 临时目录路径 */\n  tempDir?: string\n\n  /** 是否保留临时文件（用于调试） */\n  keepTempFiles?: boolean\n\n  /** 环境变量 */\n  env?: Record<string, string>\n\n  /** Node.js 版本要求 */\n  nodeVersion?: string\n\n  /** 包管理器类型 */\n  packageManager?: 'npm' | 'yarn' | 'pnpm' | 'auto'\n\n  /** 是否安装依赖 */\n  installDependencies?: boolean\n\n  /** 依赖安装超时时间 */\n  installTimeout?: number\n}\n\n/**\n * 验证报告配置\n */\nexport interface ValidationReportingConfig {\n  /** 报告格式 */\n  format?: 'json' | 'html' | 'markdown' | 'console'\n\n  /** 报告输出路径 */\n  outputPath?: string\n\n  /** 是否显示详细信息 */\n  verbose?: boolean\n\n  /** 日志级别 */\n  logLevel?: LogLevel\n\n  /** 是否包含性能指标 */\n  includePerformance?: boolean\n\n  /** 是否包含覆盖率信息 */\n  includeCoverage?: boolean\n}\n\n/**\n * 验证钩子\n */\nexport interface ValidationHooks {\n  /** 验证开始前 */\n  beforeValidation?: (context: ValidationContext) => Promise<void> | void\n\n  /** 环境准备后 */\n  afterEnvironmentSetup?: (context: ValidationContext) => Promise<void> | void\n\n  /** 测试运行前 */\n  beforeTestRun?: (context: ValidationContext) => Promise<void> | void\n\n  /** 测试运行后 */\n  afterTestRun?: (context: ValidationContext, result: TestRunResult) => Promise<void> | void\n\n  /** 验证完成后 */\n  afterValidation?: (context: ValidationContext, result: ValidationResult) => Promise<void> | void\n\n  /** 验证失败时 */\n  onValidationError?: (context: ValidationContext, error: Error) => Promise<void> | void\n}\n\n/**\n * 验证范围配置\n */\nexport interface ValidationScopeConfig {\n  /** 要验证的输出格式 */\n  formats?: ('esm' | 'cjs' | 'umd' | 'iife')[]\n\n  /** 要验证的文件类型 */\n  fileTypes?: ('js' | 'ts' | 'dts' | 'css' | 'less' | 'scss')[]\n\n  /** 排除的文件模式 */\n  exclude?: string[]\n\n  /** 包含的文件模式 */\n  include?: string[]\n\n  /** 是否验证类型定义 */\n  validateTypes?: boolean\n\n  /** 是否验证样式文件 */\n  validateStyles?: boolean\n\n  /** 是否验证源码映射 */\n  validateSourceMaps?: boolean\n}\n\n/**\n * 验证上下文\n */\nexport interface ValidationContext {\n  /** 构建上下文 */\n  buildContext: BuildContext\n\n  /** 构建结果 */\n  buildResult: BuildResult\n\n  /** 验证配置 */\n  config: PostBuildValidationConfig\n\n  /** 临时目录路径 */\n  tempDir: string\n\n  /** 验证开始时间 */\n  startTime: number\n\n  /** 验证ID */\n  validationId: string\n\n  /** 项目根目录 */\n  projectRoot: string\n\n  /** 输出目录 */\n  outputDir: string\n}\n\n/**\n * 测试运行结果\n */\nexport interface TestRunResult {\n  /** 是否成功 */\n  success: boolean\n\n  /** 测试总数 */\n  totalTests: number\n\n  /** 通过的测试数 */\n  passedTests: number\n\n  /** 失败的测试数 */\n  failedTests: number\n\n  /** 跳过的测试数 */\n  skippedTests: number\n\n  /** 运行时间（毫秒） */\n  duration: number\n\n  /** 测试输出 */\n  output: string\n\n  /** 错误信息 */\n  errors: TestError[]\n\n  /** 覆盖率信息 */\n  coverage?: CoverageInfo\n\n  /** 性能指标 */\n  performance?: TestPerformanceMetrics\n}\n\n/**\n * 测试错误信息\n */\nexport interface TestError {\n  /** 错误消息 */\n  message: string\n\n  /** 错误堆栈 */\n  stack?: string\n\n  /** 测试文件路径 */\n  file?: string\n\n  /** 行号 */\n  line?: number\n\n  /** 列号 */\n  column?: number\n\n  /** 错误类型 */\n  type: 'assertion' | 'timeout' | 'runtime' | 'syntax'\n}\n\n/**\n * 覆盖率信息\n */\nexport interface CoverageInfo {\n  /** 行覆盖率 */\n  lines: CoverageMetric\n\n  /** 函数覆盖率 */\n  functions: CoverageMetric\n\n  /** 分支覆盖率 */\n  branches: CoverageMetric\n\n  /** 语句覆盖率 */\n  statements: CoverageMetric\n\n  /** 详细文件覆盖率 */\n  files?: Record<string, FileCoverageInfo>\n}\n\n/**\n * 覆盖率指标\n */\nexport interface CoverageMetric {\n  /** 总数 */\n  total: number\n\n  /** 覆盖数 */\n  covered: number\n\n  /** 覆盖率百分比 */\n  percentage: number\n}\n\n/**\n * 文件覆盖率信息\n */\nexport interface FileCoverageInfo {\n  /** 文件路径 */\n  path: string\n\n  /** 行覆盖率 */\n  lines: CoverageMetric\n\n  /** 函数覆盖率 */\n  functions: CoverageMetric\n\n  /** 分支覆盖率 */\n  branches: CoverageMetric\n\n  /** 语句覆盖率 */\n  statements: CoverageMetric\n\n  /** 未覆盖的行号 */\n  uncoveredLines: number[]\n}\n\n/**\n * 测试性能指标\n */\nexport interface TestPerformanceMetrics {\n  /** 测试启动时间 */\n  setupTime: number\n\n  /** 测试执行时间 */\n  executionTime: number\n\n  /** 测试清理时间 */\n  teardownTime: number\n\n  /** 内存使用峰值（MB） */\n  peakMemoryUsage: number\n\n  /** CPU 使用率 */\n  cpuUsage: number\n}\n\n/**\n * 验证结果\n */\nexport interface ValidationResult {\n  /** 验证是否成功 */\n  success: boolean\n\n  /** 验证持续时间（毫秒） */\n  duration: number\n\n  /** 测试运行结果 */\n  testResult: TestRunResult\n\n  /** 验证报告 */\n  report: ValidationReport\n\n  /** 错误信息 */\n  errors: ValidationError[]\n\n  /** 警告信息 */\n  warnings: ValidationWarning[]\n\n  /** 验证统计 */\n  stats: ValidationStats\n\n  /** 验证时间戳 */\n  timestamp: number\n\n  /** 验证ID */\n  validationId: string\n}\n\n/**\n * 验证报告\n */\nexport interface ValidationReport {\n  /** 报告标题 */\n  title: string\n\n  /** 报告摘要 */\n  summary: ValidationSummary\n\n  /** 详细结果 */\n  details: ValidationDetails\n\n  /** 建议和修复方案 */\n  recommendations: ValidationRecommendation[]\n\n  /** 报告生成时间 */\n  generatedAt: number\n\n  /** 报告格式版本 */\n  version: string\n}\n\n/**\n * 验证摘要\n */\nexport interface ValidationSummary {\n  /** 总体状态 */\n  status: 'passed' | 'failed' | 'warning'\n\n  /** 验证的文件数量 */\n  totalFiles: number\n\n  /** 成功验证的文件数量 */\n  passedFiles: number\n\n  /** 失败验证的文件数量 */\n  failedFiles: number\n\n  /** 总测试数 */\n  totalTests: number\n\n  /** 通过的测试数 */\n  passedTests: number\n\n  /** 失败的测试数 */\n  failedTests: number\n\n  /** 验证耗时 */\n  duration: number\n}\n\n/**\n * 验证详细信息\n */\nexport interface ValidationDetails {\n  /** 文件验证结果 */\n  fileResults: FileValidationResult[]\n\n  /** 格式验证结果 */\n  formatResults: FormatValidationResult[]\n\n  /** 类型验证结果 */\n  typeResults?: TypeValidationResult[]\n\n  /** 样式验证结果 */\n  styleResults?: StyleValidationResult[]\n}\n\n/**\n * 文件验证结果\n */\nexport interface FileValidationResult {\n  /** 文件路径 */\n  filePath: string\n\n  /** 验证状态 */\n  status: 'passed' | 'failed' | 'skipped'\n\n  /** 文件大小 */\n  size: number\n\n  /** 验证耗时 */\n  duration: number\n\n  /** 错误信息 */\n  errors: ValidationError[]\n\n  /** 警告信息 */\n  warnings: ValidationWarning[]\n}\n\n/**\n * 格式验证结果\n */\nexport interface FormatValidationResult {\n  /** 输出格式 */\n  format: 'esm' | 'cjs' | 'umd' | 'iife'\n\n  /** 验证状态 */\n  status: 'passed' | 'failed' | 'skipped'\n\n  /** 输出文件路径 */\n  outputPath: string\n\n  /** 文件大小 */\n  size: number\n\n  /** 压缩后大小 */\n  gzipSize?: number\n\n  /** 验证耗时 */\n  duration: number\n\n  /** 错误信息 */\n  errors: ValidationError[]\n\n  /** 警告信息 */\n  warnings: ValidationWarning[]\n}\n\n/**\n * 类型验证结果\n */\nexport interface TypeValidationResult {\n  /** 类型定义文件路径 */\n  dtsPath: string\n\n  /** 验证状态 */\n  status: 'passed' | 'failed' | 'skipped'\n\n  /** TypeScript 版本 */\n  tsVersion: string\n\n  /** 类型检查结果 */\n  typeCheckResult: TypeCheckResult\n\n  /** 验证耗时 */\n  duration: number\n\n  /** 错误信息 */\n  errors: ValidationError[]\n\n  /** 警告信息 */\n  warnings: ValidationWarning[]\n}\n\n/**\n * 样式验证结果\n */\nexport interface StyleValidationResult {\n  /** 样式文件路径 */\n  stylePath: string\n\n  /** 验证状态 */\n  status: 'passed' | 'failed' | 'skipped'\n\n  /** 样式文件大小 */\n  size: number\n\n  /** 压缩后大小 */\n  minifiedSize?: number\n\n  /** 验证耗时 */\n  duration: number\n\n  /** 错误信息 */\n  errors: ValidationError[]\n\n  /** 警告信息 */\n  warnings: ValidationWarning[]\n}\n\n/**\n * TypeScript 类型检查结果\n */\nexport interface TypeCheckResult {\n  /** 是否通过类型检查 */\n  success: boolean\n\n  /** 诊断信息 */\n  diagnostics: TypeDiagnostic[]\n\n  /** 检查耗时 */\n  duration: number\n}\n\n/**\n * TypeScript 诊断信息\n */\nexport interface TypeDiagnostic {\n  /** 错误代码 */\n  code: number\n\n  /** 错误消息 */\n  message: string\n\n  /** 文件路径 */\n  file?: string\n\n  /** 行号 */\n  line?: number\n\n  /** 列号 */\n  column?: number\n\n  /** 严重程度 */\n  severity: 'error' | 'warning' | 'info'\n}\n\n/**\n * 验证错误\n */\nexport interface ValidationError {\n  /** 错误代码 */\n  code: string\n\n  /** 错误消息 */\n  message: string\n\n  /** 错误详情 */\n  details?: string\n\n  /** 相关文件 */\n  file?: string\n\n  /** 行号 */\n  line?: number\n\n  /** 列号 */\n  column?: number\n\n  /** 错误堆栈 */\n  stack?: string\n\n  /** 错误类型 */\n  type: 'build' | 'test' | 'type' | 'style' | 'runtime'\n}\n\n/**\n * 验证警告\n */\nexport interface ValidationWarning {\n  /** 警告代码 */\n  code: string\n\n  /** 警告消息 */\n  message: string\n\n  /** 警告详情 */\n  details?: string\n\n  /** 相关文件 */\n  file?: string\n\n  /** 行号 */\n  line?: number\n\n  /** 列号 */\n  column?: number\n\n  /** 警告类型 */\n  type: 'performance' | 'compatibility' | 'best-practice' | 'deprecation'\n}\n\n/**\n * 验证统计\n */\nexport interface ValidationStats {\n  /** 验证开始时间 */\n  startTime: number\n\n  /** 验证结束时间 */\n  endTime: number\n\n  /** 验证总耗时 */\n  totalDuration: number\n\n  /** 环境准备耗时 */\n  setupDuration: number\n\n  /** 测试运行耗时 */\n  testDuration: number\n\n  /** 报告生成耗时 */\n  reportDuration: number\n\n  /** 清理耗时 */\n  cleanupDuration: number\n\n  /** 验证的文件总数 */\n  totalFiles: number\n\n  /** 验证的测试总数 */\n  totalTests: number\n\n  /** 内存使用峰值（MB） */\n  peakMemoryUsage: number\n}\n\n/**\n * 验证建议\n */\nexport interface ValidationRecommendation {\n  /** 建议类型 */\n  type: 'error' | 'warning' | 'info' | 'optimization'\n\n  /** 建议标题 */\n  title: string\n\n  /** 建议描述 */\n  description: string\n\n  /** 修复方案 */\n  solution?: string\n\n  /** 相关文件 */\n  files?: string[]\n\n  /** 优先级 */\n  priority: 'high' | 'medium' | 'low'\n}\n\n/**\n * 验证器接口\n */\nexport interface IPostBuildValidator {\n  /** 执行验证 */\n  validate(context: ValidationContext): Promise<ValidationResult>\n\n  /** 设置配置 */\n  setConfig(config: PostBuildValidationConfig): void\n\n  /** 获取配置 */\n  getConfig(): PostBuildValidationConfig\n\n  /** 清理资源 */\n  dispose(): Promise<void>\n}\n\n/**\n * 测试运行器接口\n */\nexport interface ITestRunner {\n  /** 运行测试 */\n  runTests(context: ValidationContext): Promise<TestRunResult>\n\n  /** 检测测试框架 */\n  detectFramework(projectRoot: string): Promise<string>\n\n  /** 安装依赖 */\n  installDependencies(context: ValidationContext): Promise<void>\n}\n\n/**\n * 验证报告生成器接口\n */\nexport interface IValidationReporter {\n  /** 生成报告 */\n  generateReport(result: ValidationResult, config: ValidationReportingConfig): Promise<ValidationReport>\n\n  /** 输出报告 */\n  outputReport(report: ValidationReport, config: ValidationReportingConfig): Promise<void>\n}\n"]}