{"version":3,"file":"common.js","sourceRoot":"","sources":["../../src/types/common.ts"],"names":[],"mappings":"AAAA;;GAEG","sourcesContent":["/**\n * 通用类型定义\n */\n\n/**\n * 日志级别\n */\nexport type LogLevel = 'silent' | 'error' | 'warn' | 'info' | 'debug' | 'verbose'\n\n/**\n * 构建模式\n */\nexport type BuildMode = 'development' | 'production'\n\n/**\n * 文件路径类型\n */\nexport type FilePath = string\n\n/**\n * 可选文件路径类型\n */\nexport type OptionalFilePath = string | undefined\n\n/**\n * 验证结果\n */\nexport interface ValidationResult {\n  /** 是否验证通过 */\n  valid: boolean\n  /** 错误信息列表 */\n  errors: string[]\n  /** 警告信息列表 */\n  warnings: string[]\n}\n\n/**\n * 配置模式定义\n */\nexport interface ConfigSchema {\n  type: string\n  properties?: Record<string, any>\n  required?: string[]\n  [key: string]: any\n}\n\n/**\n * 事件监听器类型\n */\nexport type EventListener<T = any> = (data: T) => void | Promise<void>\n\n/**\n * 错误信息\n */\nexport interface ErrorInfo {\n  code: string\n  message: string\n  stack?: string\n  suggestion?: string\n}\n\n/**\n * 警告信息\n */\nexport interface WarningInfo {\n  code: string\n  message: string\n  suggestion?: string\n}\n\n/**\n * 文件信息\n */\nexport interface FileInfo {\n  path: string\n  size: number\n  type: string\n  content?: string\n}\n\n/**\n * 依赖信息\n */\nexport interface DependencyInfo {\n  name: string\n  version: string\n  type: 'dependency' | 'devDependency' | 'peerDependency'\n  optional?: boolean\n}\n\n/**\n * 项目信息\n */\nexport interface ProjectInfo {\n  name: string\n  version: string\n  description?: string\n  dependencies: DependencyInfo[]\n  framework?: string\n  typescript?: boolean\n  packageManager?: 'npm' | 'yarn' | 'pnpm' | 'bun'\n}\n\n/**\n * 缓存选项\n */\nexport interface CacheOptions {\n  enabled?: boolean\n  dir?: string\n  maxAge?: number\n  maxSize?: number\n}\n\n/**\n * 监听选项\n */\nexport interface WatchOptions {\n  include?: string | string[]\n  exclude?: string | string[]\n  ignored?: string | string[]\n  persistent?: boolean\n  ignoreInitial?: boolean\n  followSymlinks?: boolean\n  cwd?: string\n  disableGlobbing?: boolean\n  usePolling?: boolean\n  interval?: number\n  binaryInterval?: number\n  alwaysStat?: boolean\n  depth?: number\n  awaitWriteFinish?: boolean | {\n    stabilityThreshold?: number\n    pollInterval?: number\n  }\n}\n\n/**\n * 环境变量映射\n */\nexport type EnvironmentVariables = Record<string, string>\n\n/**\n * 键值对映射\n */\nexport type KeyValueMap<T = any> = Record<string, T>\n\n/**\n * 可选的键值对映射\n */\nexport type PartialKeyValueMap<T = any> = Partial<Record<string, T>>\n\n/**\n * 深度部分类型\n */\nexport type DeepPartial<T> = {\n  [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P]\n}\n\n/**\n * 深度必需类型\n */\nexport type DeepRequired<T> = {\n  [P in keyof T]-?: T[P] extends object ? DeepRequired<T[P]> : T[P]\n}\n\n/**\n * 函数类型 - 使用更具体的类型参数\n */\nexport type AnyFunction<TArgs extends readonly unknown[] = readonly unknown[], TReturn = unknown> = (...args: TArgs) => TReturn\n\n/**\n * 异步函数类型\n */\nexport type AsyncFunction<T = unknown, TArgs extends readonly unknown[] = readonly unknown[]> = (...args: TArgs) => Promise<T>\n\n/**\n * 构造函数类型\n */\nexport type Constructor<T = {}, TArgs extends readonly unknown[] = readonly unknown[]> = new (...args: TArgs) => T\n\n/**\n * 抽象构造函数类型\n */\nexport type AbstractConstructor<T = {}, TArgs extends readonly unknown[] = readonly unknown[]> = abstract new (...args: TArgs) => T\n\n/**\n * 类型守卫函数\n */\nexport type TypeGuard<T> = (value: unknown) => value is T\n\n/**\n * 谓词函数\n */\nexport type Predicate<T> = (value: T) => boolean\n\n/**\n * 映射函数\n */\nexport type Mapper<T, U> = (value: T) => U\n\n/**\n * 异步映射函数\n */\nexport type AsyncMapper<T, U> = (value: T) => Promise<U>\n\n/**\n * 过滤函数\n */\nexport type Filter<T> = (value: T) => boolean\n\n/**\n * 异步过滤函数\n */\nexport type AsyncFilter<T> = (value: T) => Promise<boolean>\n\n/**\n * 归约函数\n */\nexport type Reducer<T, U> = (accumulator: U, current: T) => U\n\n/**\n * 异步归约函数\n */\nexport type AsyncReducer<T, U> = (accumulator: U, current: T) => Promise<U>\n\n/**\n * 比较函数\n */\nexport type Comparator<T> = (a: T, b: T) => number\n\n/**\n * 相等比较函数\n */\nexport type EqualityComparator<T> = (a: T, b: T) => boolean\n"]}