{"version":3,"file":"performance.js","sourceRoot":"","sources":["../../src/types/performance.ts"],"names":[],"mappings":"AAAA;;GAEG","sourcesContent":["/**\n * 性能相关类型定义\n */\n\n/**\n * 性能配置\n */\nexport interface PerformanceConfig {\n  /** 是否启用打包分析器 */\n  bundleAnalyzer?: boolean | BundleAnalyzerConfig\n\n  /** 大小限制 */\n  sizeLimit?: string | number | SizeLimitConfig\n\n  /** 是否启用 Tree Shaking */\n  treeshaking?: boolean | TreeShakingConfig\n\n  /** 是否启用代码压缩 */\n  minify?: boolean | MinifyConfig\n\n  /** 缓存配置 */\n  cache?: boolean | CacheConfig\n\n  /** 并行处理配置 */\n  parallel?: boolean | ParallelConfig\n\n  /** 内存限制 */\n  memoryLimit?: string | number\n\n  /** 构建超时时间 */\n  timeout?: number\n\n  /** 最大文件大小限制（字节） */\n  maxFileSize?: number\n\n  /** 是否启用性能监控 */\n  monitoring?: boolean | MonitoringConfig\n}\n\n/**\n * 打包分析器配置\n */\nexport interface BundleAnalyzerConfig {\n  /** 是否启用 */\n  enabled?: boolean\n\n  /** 输出格式 */\n  format?: 'html' | 'json' | 'static'\n\n  /** 输出文件路径 */\n  outputFile?: string\n\n  /** 是否自动打开浏览器 */\n  openBrowser?: boolean\n\n  /** 服务器端口 */\n  port?: number\n\n  /** 分析模式 */\n  mode?: 'server' | 'static' | 'json'\n\n  /** 是否显示 gzip 大小 */\n  showGzip?: boolean\n\n  /** 是否显示 brotli 大小 */\n  showBrotli?: boolean\n}\n\n/**\n * 大小限制配置\n */\nexport interface SizeLimitConfig {\n  /** 总大小限制 */\n  total?: string | number\n\n  /** 单文件大小限制 */\n  perFile?: string | number\n\n  /** 按格式的大小限制 */\n  byFormat?: Record<string, string | number>\n\n  /** 是否在超出限制时失败 */\n  failOnExceed?: boolean\n\n  /** 警告阈值 */\n  warningThreshold?: number\n}\n\n/**\n * Tree Shaking 配置\n */\nexport interface TreeShakingConfig {\n  /** 是否启用 */\n  enabled?: boolean\n\n  /** 预设配置 */\n  preset?: 'recommended' | 'aggressive' | 'safe'\n\n  /** 模块副作用配置 */\n  moduleSideEffects?: boolean | string[] | ((id: string) => boolean)\n\n  /** 属性读取副作用 */\n  propertyReadSideEffects?: boolean\n\n  /** 未知全局副作用 */\n  unknownGlobalSideEffects?: boolean\n\n  /** 注解配置 */\n  annotations?: boolean\n\n  /** 手动标记纯函数 */\n  pureFunctions?: string[]\n}\n\n/**\n * 代码压缩配置\n */\nexport interface MinifyConfig {\n  /** 是否启用 */\n  enabled?: boolean\n\n  /** 压缩器类型 */\n  minifier?: 'terser' | 'esbuild' | 'swc'\n\n  /** 是否压缩 HTML */\n  html?: boolean\n\n  /** 是否压缩 CSS */\n  css?: boolean\n\n  /** 是否压缩 JavaScript */\n  js?: boolean\n\n  /** 是否移除注释 */\n  removeComments?: boolean\n\n  /** 是否移除控制台输出 */\n  dropConsole?: boolean\n\n  /** 是否移除调试器语句 */\n  dropDebugger?: boolean\n\n  /** 自定义压缩选项 */\n  options?: Record<string, any>\n}\n\n/**\n * 缓存配置\n */\nexport interface CacheConfig {\n  /** 是否启用 */\n  enabled?: boolean\n\n  /** 缓存目录 */\n  dir?: string\n\n  /** 缓存策略 */\n  strategy?: 'filesystem' | 'memory' | 'hybrid'\n\n  /** 缓存键生成函数 */\n  keyGenerator?: (input: any) => string\n\n  /** 缓存过期时间 */\n  ttl?: number\n\n  /** 最大缓存大小 */\n  maxSize?: string | number\n\n  /** 是否压缩缓存 */\n  compress?: boolean\n\n  /** 缓存版本 */\n  version?: string\n}\n\n/**\n * 并行处理配置\n */\nexport interface ParallelConfig {\n  /** 是否启用 */\n  enabled?: boolean\n\n  /** 工作线程数量 */\n  workers?: number | 'auto'\n\n  /** 最小并行文件数 */\n  minFileSize?: number\n\n  /** 并行处理的任务类型 */\n  tasks?: ('transform' | 'minify' | 'compress')[]\n}\n\n/**\n * 监控配置\n */\nexport interface MonitoringConfig {\n  /** 是否启用 */\n  enabled?: boolean\n\n  /** 监控指标 */\n  metrics?: ('buildTime' | 'memoryUsage' | 'bundleSize' | 'cacheHitRate')[]\n\n  /** 报告格式 */\n  reportFormat?: 'console' | 'json' | 'html'\n\n  /** 报告输出路径 */\n  reportPath?: string\n\n  /** 是否实时监控 */\n  realtime?: boolean\n\n  /** 监控间隔 */\n  interval?: number\n}\n\n/**\n * 性能指标\n */\nexport interface PerformanceMetrics {\n  /** 构建时间（毫秒） */\n  buildTime: number\n\n  /** 内存使用情况 */\n  memoryUsage: MemoryUsage\n\n  /** 缓存统计 */\n  cacheStats: CacheStats\n\n  /** 文件处理统计 */\n  fileStats: FileProcessingStats\n\n  /** 插件性能 */\n  pluginPerformance: PluginPerformanceStats[]\n\n  /** 系统资源使用 */\n  systemResources: SystemResourceUsage\n\n  /** 打包大小（字节） */\n  bundleSize?: number\n}\n\n/**\n * 内存使用情况\n */\nexport interface MemoryUsage {\n  /** 堆内存使用 */\n  heapUsed: number\n\n  /** 堆内存总量 */\n  heapTotal: number\n\n  /** 外部内存使用 */\n  external: number\n\n  /** RSS 内存 */\n  rss: number\n\n  /** 峰值内存使用 */\n  peak: number\n\n  /** 内存使用趋势 */\n  trend: MemoryTrend[]\n}\n\n/**\n * 内存趋势\n */\nexport interface MemoryTrend {\n  /** 时间戳 */\n  timestamp: number\n\n  /** 内存使用量 */\n  usage: number\n\n  /** 阶段名称 */\n  phase: string\n}\n\n/**\n * 缓存统计\n */\nexport interface CacheStats {\n  /** 缓存命中次数 */\n  hits: number\n\n  /** 缓存未命中次数 */\n  misses: number\n\n  /** 缓存命中率 */\n  hitRate: number\n\n  /** 缓存大小 */\n  size: number\n\n  /** 缓存条目数 */\n  entries: number\n\n  /** 缓存节省的时间 */\n  timeSaved: number\n}\n\n/**\n * 文件处理统计\n */\nexport interface FileProcessingStats {\n  /** 处理的文件总数 */\n  totalFiles: number\n\n  /** 按类型分组的文件数 */\n  filesByType: Record<string, number>\n\n  /** 平均处理时间 */\n  averageProcessingTime: number\n\n  /** 最慢的文件 */\n  slowestFiles: FileProcessingInfo[]\n\n  /** 处理速度（文件/秒） */\n  processingRate: number\n}\n\n/**\n * 文件处理信息\n */\nexport interface FileProcessingInfo {\n  /** 文件路径 */\n  path: string\n\n  /** 处理时间 */\n  processingTime: number\n\n  /** 文件大小 */\n  size: number\n\n  /** 处理阶段 */\n  phases: ProcessingPhase[]\n}\n\n/**\n * 处理阶段\n */\nexport interface ProcessingPhase {\n  /** 阶段名称 */\n  name: string\n\n  /** 开始时间 */\n  startTime: number\n\n  /** 结束时间 */\n  endTime: number\n\n  /** 持续时间 */\n  duration: number\n}\n\n/**\n * 插件性能统计\n */\nexport interface PluginPerformanceStats {\n  /** 插件名称 */\n  name: string\n\n  /** 总执行时间 */\n  totalTime: number\n\n  /** 调用次数 */\n  callCount: number\n\n  /** 平均执行时间 */\n  averageTime: number\n\n  /** 最长执行时间 */\n  maxTime: number\n\n  /** 钩子性能 */\n  hookPerformance: Record<string, HookPerformance>\n}\n\n/**\n * 钩子性能\n */\nexport interface HookPerformance {\n  /** 钩子名称 */\n  name: string\n\n  /** 执行次数 */\n  callCount: number\n\n  /** 总执行时间 */\n  totalTime: number\n\n  /** 平均执行时间 */\n  averageTime: number\n\n  /** 最长执行时间 */\n  maxTime: number\n}\n\n/**\n * 系统资源使用\n */\nexport interface SystemResourceUsage {\n  /** CPU 使用率 */\n  cpuUsage: number\n\n  /** 可用内存 */\n  availableMemory: number\n\n  /** 磁盘使用情况 */\n  diskUsage: DiskUsage\n\n  /** 网络使用情况 */\n  networkUsage?: NetworkUsage\n}\n\n/**\n * 磁盘使用情况\n */\nexport interface DiskUsage {\n  /** 总空间 */\n  total: number\n\n  /** 已使用空间 */\n  used: number\n\n  /** 可用空间 */\n  available: number\n\n  /** 使用率 */\n  usagePercent: number\n}\n\n/**\n * 网络使用情况\n */\nexport interface NetworkUsage {\n  /** 下载字节数 */\n  bytesReceived: number\n\n  /** 上传字节数 */\n  bytesSent: number\n\n  /** 网络延迟 */\n  latency: number\n}\n\n/**\n * 性能报告\n */\nexport interface PerformanceReport {\n  /** 报告生成时间 */\n  timestamp: number\n\n  /** 构建配置摘要 */\n  buildSummary: BuildSummary\n\n  /** 性能指标 */\n  metrics: PerformanceMetrics\n\n  /** 性能对比 */\n  comparison?: PerformanceComparison\n\n  /** 优化建议 */\n  recommendations: PerformanceRecommendation[]\n\n  /** 详细分析 */\n  analysis: PerformanceAnalysis\n}\n\n/**\n * 构建摘要\n */\nexport interface BuildSummary {\n  /** 打包器类型 */\n  bundler: string\n\n  /** 构建模式 */\n  mode: string\n\n  /** 入口文件数 */\n  entryCount: number\n\n  /** 输出文件数 */\n  outputCount: number\n\n  /** 总大小 */\n  totalSize: number\n\n  /** 构建时间 */\n  buildTime: number\n}\n\n/**\n * 性能对比\n */\nexport interface PerformanceComparison {\n  /** 对比基准 */\n  baseline: PerformanceMetrics\n\n  /** 当前指标 */\n  current: PerformanceMetrics\n\n  /** 改进百分比 */\n  improvement: Record<string, number>\n\n  /** 回归项目 */\n  regressions: string[]\n}\n\n/**\n * 性能建议\n */\nexport interface PerformanceRecommendation {\n  /** 建议类型 */\n  type: 'speed' | 'memory' | 'size' | 'cache'\n\n  /** 建议标题 */\n  title: string\n\n  /** 建议描述 */\n  description: string\n\n  /** 预期改进 */\n  expectedImprovement: string\n\n  /** 实施难度 */\n  difficulty: 'easy' | 'medium' | 'hard'\n\n  /** 相关配置 */\n  configChanges?: Record<string, any>\n}\n\n/**\n * 性能分析\n */\nexport interface PerformanceAnalysis {\n  /** 瓶颈分析 */\n  bottlenecks: BottleneckAnalysis[]\n\n  /** 资源使用分析 */\n  resourceAnalysis: ResourceAnalysis\n\n  /** 缓存效率分析 */\n  cacheAnalysis: CacheEfficiencyAnalysis\n\n  /** 并行化机会 */\n  parallelizationOpportunities: ParallelizationOpportunity[]\n}\n\n/**\n * 瓶颈分析\n */\nexport interface BottleneckAnalysis {\n  /** 瓶颈类型 */\n  type: 'cpu' | 'memory' | 'io' | 'network'\n\n  /** 瓶颈描述 */\n  description: string\n\n  /** 影响程度 */\n  impact: 'low' | 'medium' | 'high'\n\n  /** 相关组件 */\n  components: string[]\n\n  /** 解决方案 */\n  solutions: string[]\n}\n\n/**\n * 资源分析\n */\nexport interface ResourceAnalysis {\n  /** CPU 使用效率 */\n  cpuEfficiency: number\n\n  /** 内存使用效率 */\n  memoryEfficiency: number\n\n  /** 磁盘 I/O 效率 */\n  ioEfficiency: number\n\n  /** 资源浪费点 */\n  wastePoints: string[]\n}\n\n/**\n * 缓存效率分析\n */\nexport interface CacheEfficiencyAnalysis {\n  /** 整体缓存效率 */\n  overallEfficiency: number\n\n  /** 缓存策略建议 */\n  strategyRecommendations: string[]\n\n  /** 缓存配置优化 */\n  configOptimizations: Record<string, any>\n}\n\n/**\n * 并行化机会\n */\nexport interface ParallelizationOpportunity {\n  /** 任务名称 */\n  task: string\n\n  /** 当前并行度 */\n  currentParallelism: number\n\n  /** 建议并行度 */\n  recommendedParallelism: number\n\n  /** 预期加速比 */\n  expectedSpeedup: number\n}\n"]}