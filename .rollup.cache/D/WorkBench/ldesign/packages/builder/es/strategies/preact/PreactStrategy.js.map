{"version":3,"file":"PreactStrategy.js","sourceRoot":"","sources":["../../../src/strategies/preact/PreactStrategy.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Preact 策略\r\n * 使用 rollup-plugin-esbuild 处理 TS/JSX（jsxImportSource: preact），postcss 可选\r\n */\r\n\r\nimport type { ILibraryStrategy } from '../../types/strategy'\r\nimport { LibraryType } from '../../types/library'\r\nimport type { BuilderConfig } from '../../types/config'\r\nimport type { UnifiedConfig } from '../../types/adapter'\r\nimport { shouldMinify } from '../../utils/minify-processor'\r\n\r\nexport class PreactStrategy implements ILibraryStrategy {\r\n  readonly name = 'preact'\r\n  readonly supportedTypes = [LibraryType.PREACT]\r\n  readonly priority = 9\r\n\r\n  async applyStrategy(config: BuilderConfig): Promise<UnifiedConfig> {\r\n    const input = config.input || 'src/index.tsx'\r\n\r\n    return {\r\n      input,\r\n      output: this.buildOutputConfig(config),\r\n      plugins: await this.buildPlugins(config),\r\n      external: this.mergeExternal(config.external),\r\n      treeshake: config.performance?.treeshaking !== false,\r\n      onwarn: this.createWarningHandler()\r\n    }\r\n  }\r\n\r\n  isApplicable(config: BuilderConfig): boolean {\r\n    return config.libraryType === LibraryType.PREACT\r\n  }\r\n\r\n  getDefaultConfig(): Partial<BuilderConfig> {\r\n    return {\r\n      libraryType: LibraryType.PREACT,\r\n      output: { format: ['esm', 'cjs'], sourcemap: true },\r\n      performance: { treeshaking: true, minify: true }\r\n    }\r\n  }\r\n\r\n  getRecommendedPlugins(_config: BuilderConfig): any[] { return [] }\r\n  validateConfig(_config: BuilderConfig): any { return { valid: true, errors: [], warnings: [], suggestions: [] } }\r\n\r\n  private async buildPlugins(config: BuilderConfig): Promise<any[]> {\r\n    const plugins: any[] = []\r\n\r\n    // Node resolve\r\n    const nodeResolve = await import('@rollup/plugin-node-resolve')\r\n    plugins.push(nodeResolve.default({ browser: true, extensions: ['.mjs', '.js', '.json', '.ts', '.tsx', '.jsx'] }))\r\n\r\n    // CommonJS\r\n    const commonjs = await import('@rollup/plugin-commonjs')\r\n    plugins.push(commonjs.default())\r\n\r\n    // 注：为避免示例额外安装类型依赖，此处不启用 @rollup/plugin-typescript 生成 d.ts\r\n\r\n    // PostCSS (optional)\r\n    if (config.style?.extract !== false) {\r\n      const postcss = await import('rollup-plugin-postcss')\r\nplugins.push(postcss.default({ extract: true, minimize: config.style?.minimize !== false }))\r\n    }\r\n\r\n    // esbuild for TS/JSX with Preact automatic JSX\r\n    const esbuild = await import('rollup-plugin-esbuild')\r\n    plugins.push(esbuild.default({\r\n      include: /\\.(tsx?|jsx?)$/, exclude: [/node_modules/], target: 'es2020',\r\n      jsx: 'automatic', jsxImportSource: 'preact', tsconfig: 'tsconfig.json',\r\nsourceMap: config.output?.sourcemap !== false, minify: shouldMinify(config)\r\n    }))\r\n\r\n    return plugins\r\n  }\r\n\r\n  private buildOutputConfig(config: BuilderConfig): any {\r\n    const out = config.output || {}\r\n    const formats = Array.isArray(out.format) ? out.format : ['esm', 'cjs']\r\n    return { dir: out.dir || 'dist', format: formats, sourcemap: out.sourcemap !== false, exports: 'auto' }\r\n  }\r\n\r\n  private createWarningHandler() {\r\n    return (warning: any) => { void warning; /* 可按需过滤 */ }\r\n  }\r\n\r\n  /**\r\n   * 合并 external 配置，确保 Preact 相关依赖被标记为外部\r\n   */\r\n  private mergeExternal(external: any): any {\r\n    const pkgs = ['preact']\r\n\r\n    if (!external) return pkgs\r\n\r\n    if (Array.isArray(external)) {\r\n      return [...external, ...pkgs]\r\n    }\r\n\r\n    if (typeof external === 'function') {\r\n      return (id: string, ...args: any[]) => pkgs.includes(id) || external(id, ...args)\r\n    }\r\n\r\n    if (external instanceof RegExp) {\r\n      return (id: string) => pkgs.includes(id) || (external as RegExp).test(id)\r\n    }\r\n\r\n    if (typeof external === 'string') {\r\n      return [external, ...pkgs]\r\n    }\r\n\r\n    if (typeof external === 'object') {\r\n      return [...Object.keys(external), ...pkgs]\r\n    }\r\n\r\n    return pkgs\r\n  }\r\n}\r\n\r\n"]}