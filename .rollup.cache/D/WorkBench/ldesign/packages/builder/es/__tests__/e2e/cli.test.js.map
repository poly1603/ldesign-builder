{"version":3,"file":"cli.test.js","sourceRoot":"","sources":["../../../src/__tests__/e2e/cli.test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * CLI 端到端测试\n */\n\nimport { describe, it, expect, beforeEach, afterEach } from 'vitest'\nimport { spawn } from 'child_process'\nimport { promises as fs } from 'fs'\nimport { join } from 'path'\nimport { tmpdir } from 'os'\n\ndescribe('CLI End-to-End Tests', () => {\n  let tempDir: string\n  let cliPath: string\n\n  beforeEach(async () => {\n    // Create temporary directory for test projects\n    tempDir = await fs.mkdtemp(join(tmpdir(), 'builder-e2e-'))\n    \n    // Path to CLI executable\n    cliPath = join(__dirname, '../../../dist/cli/index.cjs')\n  })\n\n  afterEach(async () => {\n    // Clean up temporary directory\n    try {\n      await fs.rm(tempDir, { recursive: true, force: true })\n    } catch (error) {\n      // Ignore cleanup errors\n    }\n  })\n\n  describe('Build Command', () => {\n    it('should build TypeScript library successfully', async () => {\n      // Create test project structure\n      await fs.mkdir(join(tempDir, 'src'), { recursive: true })\n      await fs.writeFile(\n        join(tempDir, 'src/index.ts'),\n        'export const hello = (name: string) => `Hello, ${name}!`'\n      )\n      await fs.writeFile(\n        join(tempDir, 'package.json'),\n        JSON.stringify({\n          name: 'test-library',\n          version: '1.0.0',\n          main: 'dist/index.js',\n          types: 'dist/index.d.ts'\n        }, null, 2)\n      )\n      await fs.writeFile(\n        join(tempDir, 'tsconfig.json'),\n        JSON.stringify({\n          compilerOptions: {\n            target: 'ES2020',\n            module: 'ESNext',\n            declaration: true,\n            outDir: 'dist'\n          },\n          include: ['src/**/*']\n        }, null, 2)\n      )\n\n      // Run CLI build command\n      const result = await runCLI(['build'], tempDir)\n      \n      // Note: This test would need actual CLI implementation to work\n      // For now, we're testing the structure\n      expect(result).toBeDefined()\n    }, 30000)\n\n    it('should handle build errors gracefully', async () => {\n      // Create project with syntax errors\n      await fs.mkdir(join(tempDir, 'src'), { recursive: true })\n      await fs.writeFile(\n        join(tempDir, 'src/index.ts'),\n        'export const hello = (name: string => `Hello, ${name}!` // Syntax error'\n      )\n\n      // Run CLI build command\n      const result = await runCLI(['build'], tempDir)\n      \n      // Should handle error gracefully\n      expect(result).toBeDefined()\n    }, 30000)\n  })\n\n  describe('Watch Command', () => {\n    it('should start watch mode', async () => {\n      // Create test project\n      await fs.mkdir(join(tempDir, 'src'), { recursive: true })\n      await fs.writeFile(\n        join(tempDir, 'src/index.ts'),\n        'export const hello = () => \"Hello, World!\"'\n      )\n\n      // Start watch mode (would need to be killed after a short time)\n      const result = await runCLI(['watch'], tempDir, { timeout: 5000 })\n      \n      expect(result).toBeDefined()\n    }, 10000)\n  })\n\n  describe('Init Command', () => {\n    it('should initialize new project', async () => {\n      // Run init command\n      const result = await runCLI(['init', '--name', 'test-project'], tempDir)\n      \n      expect(result).toBeDefined()\n    }, 15000)\n  })\n\n  describe('Help and Version', () => {\n    it('should display help information', async () => {\n      const result = await runCLI(['--help'], tempDir)\n      \n      expect(result).toBeDefined()\n    })\n\n    it('should display version information', async () => {\n      const result = await runCLI(['--version'], tempDir)\n      \n      expect(result).toBeDefined()\n    })\n  })\n})\n\n/**\n * Helper function to run CLI commands\n */\nasync function runCLI(\n  args: string[], \n  cwd: string, \n  options: { timeout?: number } = {}\n): Promise<{ stdout: string; stderr: string; exitCode: number }> {\n  return new Promise((resolve, reject) => {\n    const { timeout = 10000 } = options\n    \n    // For now, return mock result since we don't have actual CLI\n    // In real implementation, this would spawn the actual CLI process\n    setTimeout(() => {\n      resolve({\n        stdout: 'Mock CLI output',\n        stderr: '',\n        exitCode: 0\n      })\n    }, 100)\n    \n    /* Real implementation would be:\n    const child = spawn('node', [cliPath, ...args], {\n      cwd,\n      stdio: 'pipe'\n    })\n\n    let stdout = ''\n    let stderr = ''\n\n    child.stdout?.on('data', (data) => {\n      stdout += data.toString()\n    })\n\n    child.stderr?.on('data', (data) => {\n      stderr += data.toString()\n    })\n\n    const timeoutId = setTimeout(() => {\n      child.kill()\n      reject(new Error(`CLI command timed out after ${timeout}ms`))\n    }, timeout)\n\n    child.on('close', (code) => {\n      clearTimeout(timeoutId)\n      resolve({\n        stdout,\n        stderr,\n        exitCode: code || 0\n      })\n    })\n\n    child.on('error', (error) => {\n      clearTimeout(timeoutId)\n      reject(error)\n    })\n    */\n  })\n}\n"]}