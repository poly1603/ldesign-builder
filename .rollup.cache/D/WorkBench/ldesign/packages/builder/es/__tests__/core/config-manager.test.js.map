{"version":3,"file":"config-manager.test.js","sourceRoot":"","sources":["../../../src/__tests__/core/config-manager.test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * ConfigManager 测试\n */\n\nimport { describe, it, expect, beforeEach, vi } from 'vitest'\nimport { ConfigManager } from '../../core/ConfigManager'\nimport { Logger } from '../../utils/logger'\nimport { LibraryType } from '../../types/library'\n\ndescribe('ConfigManager', () => {\n  let configManager: ConfigManager\n  let mockLogger: Logger\n\n  beforeEach(() => {\n    mockLogger = new Logger({ level: 'silent' })\n    configManager = new ConfigManager({ logger: mockLogger })\n  })\n\n  describe('Constructor', () => {\n    it('should create instance with default options', () => {\n      const manager = new ConfigManager()\n      expect(manager).toBeInstanceOf(ConfigManager)\n    })\n\n    it('should accept custom logger', () => {\n      const customLogger = new Logger({ level: 'debug' })\n      const manager = new ConfigManager({ logger: customLogger })\n      expect(manager).toBeInstanceOf(ConfigManager)\n    })\n  })\n\n  describe('Configuration Loading', () => {\n    it('should load default configuration', async () => {\n      const config = await configManager.loadConfig()\n      expect(config).toHaveProperty('input')\n      expect(config).toHaveProperty('output')\n      expect(config).toHaveProperty('libraryType')\n    })\n\n    it('should merge user configuration with defaults', async () => {\n      const userConfig = {\n        input: 'custom/index.ts',\n        libraryType: LibraryType.VUE3\n      }\n\n      const config = await configManager.loadConfig(undefined, userConfig)\n      expect(config.input).toBe('custom/index.ts')\n      expect(config.libraryType).toBe(LibraryType.VUE3)\n    })\n\n    it('should validate configuration', async () => {\n      const invalidConfig = {\n        input: '', // Invalid empty input\n        output: null\n      }\n\n      await expect(\n        configManager.loadConfig(undefined, invalidConfig)\n      ).rejects.toThrow()\n    })\n  })\n\n  describe('Configuration Validation', () => {\n    it('should validate required fields', () => {\n      const config = {\n        input: 'src/index.ts',\n        libraryType: LibraryType.TYPESCRIPT\n      }\n\n      const result = configManager.validateConfig(config)\n      expect(result.valid).toBe(true)\n      expect(result.errors).toHaveLength(0)\n    })\n\n    it('should detect missing required fields', () => {\n      const config = {\n        // Missing input\n        libraryType: LibraryType.TYPESCRIPT\n      }\n\n      const result = configManager.validateConfig(config)\n      expect(result.valid).toBe(false)\n      expect(result.errors.length).toBeGreaterThan(0)\n    })\n\n    it('should provide helpful error messages', () => {\n      const config = {\n        input: '',\n        libraryType: 'invalid-type' as any\n      }\n\n      const result = configManager.validateConfig(config)\n      expect(result.valid).toBe(false)\n\n      // 检查是否有包含 input 的错误消息\n      const hasInputError = result.errors.some(error => error.includes('input'))\n      expect(hasInputError).toBe(true)\n\n      // 检查是否有包含 libraryType 的错误消息\n      const hasLibraryTypeError = result.errors.some(error => error.includes('libraryType'))\n      expect(hasLibraryTypeError).toBe(true)\n    })\n  })\n\n  describe('Configuration Normalization', () => {\n    it('should normalize output configuration', () => {\n      const config = {\n        input: 'src/index.ts',\n        output: 'dist/index.js' // String format\n      }\n\n      const normalized = configManager.normalizeConfig(config)\n      expect(normalized.output).toBeTypeOf('object')\n      expect(normalized.output).toHaveProperty('file')\n    })\n\n    it('should normalize plugin configuration', () => {\n      const config = {\n        input: 'src/index.ts',\n        plugins: ['typescript', 'vue'] // String array format\n      }\n\n      const normalized = configManager.normalizeConfig(config)\n      expect(Array.isArray(normalized.plugins)).toBe(true)\n      expect(normalized.plugins?.length).toBeGreaterThan(0)\n    })\n  })\n\n  describe('Environment Variables', () => {\n    it('should support environment variable substitution', async () => {\n      // Mock environment variable\n      vi.stubEnv('BUILD_OUTPUT_DIR', 'custom-dist')\n\n      const config = {\n        input: 'src/index.ts',\n        output: {\n          dir: '${BUILD_OUTPUT_DIR}'\n        }\n      }\n\n      const resolved = await configManager.loadConfig(undefined, config)\n      expect(resolved.output?.dir).toBe('custom-dist')\n\n      vi.unstubAllEnvs()\n    })\n  })\n})\n"]}