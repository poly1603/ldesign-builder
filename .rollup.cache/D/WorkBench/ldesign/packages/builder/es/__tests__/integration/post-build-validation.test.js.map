{"version":3,"file":"post-build-validation.test.js","sourceRoot":"","sources":["../../../src/__tests__/integration/post-build-validation.test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * 打包后验证集成测试\n */\n\nimport { describe, it, expect, beforeEach, afterEach, vi } from 'vitest'\nimport * as fs from 'fs-extra'\nimport * as path from 'path'\nimport * as os from 'os'\nimport { LibraryBuilder } from '../../core/LibraryBuilder'\nimport type { BuilderConfig } from '../../types/config'\nimport type { PostBuildValidationConfig } from '../../types/validation'\n\ndescribe('Post-Build Validation Integration', () => {\n  let tempDir: string\n  let projectDir: string\n  let builder: LibraryBuilder\n\n  beforeEach(async () => {\n    // 创建临时测试项目\n    tempDir = await fs.mkdtemp(path.join(os.tmpdir(), 'ldesign-builder-test-'))\n    projectDir = path.join(tempDir, 'test-project')\n    await fs.ensureDir(projectDir)\n\n    // 创建测试项目结构\n    await createTestProject(projectDir)\n\n    // 创建 builder 实例\n    builder = new LibraryBuilder({\n      config: {\n        input: path.join(projectDir, 'src/index.ts'),\n        output: {\n          dir: path.join(projectDir, 'dist'),\n          format: ['esm', 'cjs']\n        },\n        bundler: 'rollup',\n        mode: 'production'\n      }\n    })\n\n    // 初始化 builder\n    await builder.initialize()\n  })\n\n  afterEach(async () => {\n    // 清理资源\n    if (builder) {\n      await builder.dispose()\n    }\n\n    // 删除临时目录\n    if (tempDir) {\n      await fs.remove(tempDir)\n    }\n  })\n\n  describe('基本验证功能', () => {\n    it('应该在启用验证时执行验证', async () => {\n      const config: BuilderConfig = {\n        input: path.join(projectDir, 'src/index.ts'),\n        output: {\n          dir: path.join(projectDir, 'dist'),\n          format: ['esm', 'cjs']\n        },\n        postBuildValidation: {\n          enabled: true,\n          testFramework: 'vitest',\n          testPattern: ['**/*.test.ts'],\n          timeout: 30000,\n          failOnError: false, // 不因验证失败而停止构建\n          environment: {\n            keepTempFiles: false,\n            installDependencies: false // 跳过依赖安装以加快测试\n          },\n          reporting: {\n            format: 'console',\n            verbose: false\n          }\n        }\n      }\n\n      const result = await builder.build(config)\n\n      expect(result.success).toBe(true)\n      expect(result.validation).toBeDefined()\n      expect(result.validation?.validationId).toBeDefined()\n      expect(result.validation?.duration).toBeGreaterThan(0)\n    })\n\n    it('应该在禁用验证时跳过验证', async () => {\n      const config: BuilderConfig = {\n        input: path.join(projectDir, 'src/index.ts'),\n        output: {\n          dir: path.join(projectDir, 'dist'),\n          format: ['esm', 'cjs']\n        },\n        postBuildValidation: {\n          enabled: false\n        }\n      }\n\n      const result = await builder.build(config)\n\n      expect(result.success).toBe(true)\n      expect(result.validation).toBeUndefined()\n    })\n\n    it('应该在验证失败且 failOnError=true 时抛出错误', async () => {\n      // 创建一个会失败的测试\n      await createFailingTest(projectDir)\n\n      const config: BuilderConfig = {\n        input: path.join(projectDir, 'src/index.ts'),\n        output: {\n          dir: path.join(projectDir, 'dist'),\n          format: ['esm', 'cjs']\n        },\n        postBuildValidation: {\n          enabled: true,\n          testFramework: 'vitest',\n          testPattern: ['**/*.test.ts'],\n          timeout: 30000,\n          failOnError: true,\n          environment: {\n            installDependencies: false\n          }\n        }\n      }\n\n      await expect(builder.build(config)).rejects.toThrow('打包后验证失败')\n    })\n  })\n\n  describe('验证配置', () => {\n    it('应该使用自定义测试模式', async () => {\n      const config: BuilderConfig = {\n        input: path.join(projectDir, 'src/index.ts'),\n        output: {\n          dir: path.join(projectDir, 'dist'),\n          format: ['esm', 'cjs']\n        },\n        postBuildValidation: {\n          enabled: true,\n          testFramework: 'jest',\n          testPattern: ['**/*.spec.ts'],\n          timeout: 45000,\n          environment: {\n            tempDir: path.join(projectDir, '.custom-validation'),\n            keepTempFiles: true,\n            installDependencies: false\n          },\n          reporting: {\n            format: 'json',\n            outputPath: path.join(projectDir, 'validation-report.json'),\n            verbose: true\n          }\n        }\n      }\n\n      const result = await builder.build(config)\n\n      expect(result.success).toBe(true)\n      expect(result.validation).toBeDefined()\n\n      // 检查自定义临时目录是否被创建（由于 keepTempFiles=true）\n      const customTempDir = path.join(projectDir, '.custom-validation')\n      // 注意：由于我们设置了 keepTempFiles=true，临时目录应该存在\n      // 但在实际实现中，这取决于验证器的具体行为\n    })\n\n    it('应该支持验证钩子', async () => {\n      const hooks = {\n        beforeValidation: vi.fn(),\n        afterEnvironmentSetup: vi.fn(),\n        beforeTestRun: vi.fn(),\n        afterTestRun: vi.fn(),\n        afterValidation: vi.fn()\n      }\n\n      const config: BuilderConfig = {\n        input: path.join(projectDir, 'src/index.ts'),\n        output: {\n          dir: path.join(projectDir, 'dist'),\n          format: ['esm', 'cjs']\n        },\n        postBuildValidation: {\n          enabled: true,\n          testFramework: 'vitest',\n          environment: {\n            installDependencies: false\n          },\n          hooks\n        }\n      }\n\n      const result = await builder.build(config)\n\n      expect(result.success).toBe(true)\n      expect(hooks.beforeValidation).toHaveBeenCalled()\n      expect(hooks.afterEnvironmentSetup).toHaveBeenCalled()\n      expect(hooks.beforeTestRun).toHaveBeenCalled()\n      expect(hooks.afterTestRun).toHaveBeenCalled()\n      expect(hooks.afterValidation).toHaveBeenCalled()\n    })\n  })\n\n  describe('错误处理', () => {\n    it('应该处理无效的测试框架', async () => {\n      const config: BuilderConfig = {\n        input: path.join(projectDir, 'src/index.ts'),\n        output: {\n          dir: path.join(projectDir, 'dist'),\n          format: ['esm', 'cjs']\n        },\n        postBuildValidation: {\n          enabled: true,\n          testFramework: 'invalid-framework' as any,\n          environment: {\n            installDependencies: false\n          }\n        }\n      }\n\n      // 应该回退到默认框架或处理错误\n      const result = await builder.build(config)\n      \n      // 根据实现，这可能成功（使用默认框架）或失败\n      // 这里我们假设它会优雅地处理并使用默认框架\n      expect(result.success).toBe(true)\n    })\n\n    it('应该处理测试文件不存在的情况', async () => {\n      // 删除测试文件\n      await fs.remove(path.join(projectDir, 'src/index.test.ts'))\n\n      const config: BuilderConfig = {\n        input: path.join(projectDir, 'src/index.ts'),\n        output: {\n          dir: path.join(projectDir, 'dist'),\n          format: ['esm', 'cjs']\n        },\n        postBuildValidation: {\n          enabled: true,\n          testFramework: 'vitest',\n          testPattern: ['**/*.test.ts'],\n          failOnError: false,\n          environment: {\n            installDependencies: false\n          }\n        }\n      }\n\n      const result = await builder.build(config)\n\n      expect(result.success).toBe(true)\n      expect(result.validation).toBeDefined()\n      // 验证应该报告没有找到测试或测试数量为0\n      expect(result.validation?.testResult.totalTests).toBe(0)\n    })\n  })\n})\n\n/**\n * 创建测试项目结构\n */\nasync function createTestProject(projectDir: string): Promise<void> {\n  // 创建 package.json\n  const packageJson = {\n    name: 'test-project',\n    version: '1.0.0',\n    type: 'module',\n    main: 'dist/index.cjs',\n    module: 'dist/index.js',\n    types: 'dist/index.d.ts',\n    scripts: {\n      test: 'vitest run'\n    },\n    devDependencies: {\n      vitest: '^0.34.0',\n      typescript: '^5.0.0'\n    }\n  }\n\n  await fs.writeJson(path.join(projectDir, 'package.json'), packageJson, { spaces: 2 })\n\n  // 创建 tsconfig.json\n  const tsConfig = {\n    compilerOptions: {\n      target: 'ES2020',\n      module: 'ESNext',\n      moduleResolution: 'node',\n      strict: true,\n      esModuleInterop: true,\n      skipLibCheck: true,\n      forceConsistentCasingInFileNames: true,\n      declaration: true,\n      outDir: 'dist'\n    },\n    include: ['src/**/*'],\n    exclude: ['node_modules', 'dist']\n  }\n\n  await fs.writeJson(path.join(projectDir, 'tsconfig.json'), tsConfig, { spaces: 2 })\n\n  // 创建 vitest.config.ts\n  const vitestConfig = `\nimport { defineConfig } from 'vitest/config'\n\nexport default defineConfig({\n  test: {\n    environment: 'node'\n  }\n})\n`\n\n  await fs.writeFile(path.join(projectDir, 'vitest.config.ts'), vitestConfig)\n\n  // 创建源码目录和文件\n  await fs.ensureDir(path.join(projectDir, 'src'))\n\n  // 创建主文件\n  const indexTs = `\nexport function add(a: number, b: number): number {\n  return a + b\n}\n\nexport function multiply(a: number, b: number): number {\n  return a * b\n}\n\nexport default {\n  add,\n  multiply\n}\n`\n\n  await fs.writeFile(path.join(projectDir, 'src/index.ts'), indexTs)\n\n  // 创建测试文件\n  const testFile = `\nimport { describe, it, expect } from 'vitest'\nimport { add, multiply } from './index'\n\ndescribe('Math functions', () => {\n  it('should add two numbers correctly', () => {\n    expect(add(2, 3)).toBe(5)\n    expect(add(-1, 1)).toBe(0)\n    expect(add(0, 0)).toBe(0)\n  })\n\n  it('should multiply two numbers correctly', () => {\n    expect(multiply(2, 3)).toBe(6)\n    expect(multiply(-1, 1)).toBe(-1)\n    expect(multiply(0, 5)).toBe(0)\n  })\n})\n`\n\n  await fs.writeFile(path.join(projectDir, 'src/index.test.ts'), testFile)\n}\n\n/**\n * 创建会失败的测试\n */\nasync function createFailingTest(projectDir: string): Promise<void> {\n  const failingTest = `\nimport { describe, it, expect } from 'vitest'\nimport { add } from './index'\n\ndescribe('Failing tests', () => {\n  it('should fail intentionally', () => {\n    expect(add(2, 2)).toBe(5) // 这会失败\n  })\n\n  it('should also fail', () => {\n    expect(true).toBe(false) // 这也会失败\n  })\n})\n`\n\n  await fs.writeFile(path.join(projectDir, 'src/failing.test.ts'), failingTest)\n}\n"]}