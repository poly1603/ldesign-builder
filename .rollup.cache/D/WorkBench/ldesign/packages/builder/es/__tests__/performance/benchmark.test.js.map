{"version":3,"file":"benchmark.test.js","sourceRoot":"","sources":["../../../src/__tests__/performance/benchmark.test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * 性能基准测试\n */\n\nimport { describe, it, expect, beforeEach } from 'vitest'\nimport { PerformanceMonitor } from '../../core/PerformanceMonitor'\nimport { Logger } from '../../utils/logger'\n\ndescribe('Performance Benchmarks', () => {\n  let monitor: PerformanceMonitor\n  let mockLogger: Logger\n\n  beforeEach(() => {\n    mockLogger = new Logger({ level: 'silent' })\n    monitor = new PerformanceMonitor({ logger: mockLogger })\n  })\n\n  describe('Memory Usage', () => {\n    it('should track memory usage during operations', async () => {\n      const sessionId = monitor.startSession('memory-test')\n      \n      // Simulate some memory-intensive operation\n      const largeArray = new Array(10000).fill('test')\n      \n      await new Promise(resolve => setTimeout(resolve, 100))\n      \n      const metrics = monitor.endSession(sessionId)\n      \n      expect(metrics).toHaveProperty('memoryUsage')\n      expect(metrics.memoryUsage.heapUsed).toBeGreaterThan(0)\n      expect(metrics.memoryUsage.heapTotal).toBeGreaterThan(0)\n      \n      // Clean up\n      largeArray.length = 0\n    })\n\n    it('should detect memory leaks', async () => {\n      const initialMemory = process.memoryUsage()\n      \n      // Simulate potential memory leak\n      const sessions = []\n      for (let i = 0; i < 100; i++) {\n        const sessionId = monitor.startSession(`leak-test-${i}`)\n        sessions.push(sessionId)\n      }\n      \n      // End all sessions\n      sessions.forEach(sessionId => {\n        monitor.endSession(sessionId)\n      })\n      \n      const finalMemory = process.memoryUsage()\n      const memoryIncrease = finalMemory.heapUsed - initialMemory.heapUsed\n      \n      // Memory increase should be reasonable (less than 10MB for this test)\n      expect(memoryIncrease).toBeLessThan(10 * 1024 * 1024)\n    })\n  })\n\n  describe('Timing Accuracy', () => {\n    it('should measure execution time accurately', async () => {\n      const sessionId = monitor.startSession('timing-test')\n      \n      // Wait for a known duration\n      const expectedDuration = 100\n      await new Promise(resolve => setTimeout(resolve, expectedDuration))\n      \n      const metrics = monitor.endSession(sessionId)\n      \n      // Allow for some variance in timing (±20ms)\n      expect(metrics.duration).toBeGreaterThan(expectedDuration - 20)\n      expect(metrics.duration).toBeLessThan(expectedDuration + 50)\n    })\n\n    it('should handle concurrent sessions', async () => {\n      const session1 = monitor.startSession('concurrent-1')\n      const session2 = monitor.startSession('concurrent-2')\n      \n      await Promise.all([\n        new Promise(resolve => setTimeout(resolve, 50)),\n        new Promise(resolve => setTimeout(resolve, 100))\n      ])\n      \n      const metrics1 = monitor.endSession(session1)\n      const metrics2 = monitor.endSession(session2)\n      \n      expect(metrics1.duration).toBeGreaterThan(40)\n      expect(metrics1.duration).toBeLessThan(150) // 放宽时间限制\n      expect(metrics2.duration).toBeGreaterThan(90)\n      expect(metrics2.duration).toBeLessThan(200) // 放宽时间限制\n    })\n  })\n\n  describe('Performance Thresholds', () => {\n    it('should detect slow operations', async () => {\n      const sessionId = monitor.startSession('slow-operation')\n      \n      // Simulate slow operation\n      await new Promise(resolve => setTimeout(resolve, 200))\n      \n      const metrics = monitor.endSession(sessionId)\n      \n      // Check if operation is flagged as slow (threshold might be 100ms)\n      expect(metrics.duration).toBeGreaterThan(100)\n    })\n\n    it('should track operation frequency', () => {\n      // Start multiple sessions of the same type\n      for (let i = 0; i < 5; i++) {\n        const sessionId = monitor.startSession('frequent-operation')\n        monitor.endSession(sessionId)\n      }\n      \n      const stats = monitor.getGlobalStats()\n      expect(stats.totalBuilds).toBeGreaterThanOrEqual(5)\n    })\n  })\n\n  describe('Resource Monitoring', () => {\n    it('should monitor CPU usage patterns', async () => {\n      const sessionId = monitor.startSession('cpu-test')\n      \n      // Simulate CPU-intensive operation\n      let result = 0\n      for (let i = 0; i < 100000; i++) {\n        result += Math.random()\n      }\n      \n      const metrics = monitor.endSession(sessionId)\n      \n      expect(metrics).toHaveProperty('cpuUsage')\n      expect(typeof metrics.cpuUsage).toBe('number')\n      expect(result).toBeGreaterThan(0) // Ensure operation actually ran\n    })\n\n    it('should track file system operations', async () => {\n      const sessionId = monitor.startSession('fs-test')\n\n      // 添加一些实际的操作来确保有时间消耗\n      await new Promise(resolve => setTimeout(resolve, 10))\n\n      const metrics = monitor.endSession(sessionId)\n\n      expect(metrics).toHaveProperty('duration')\n      expect(metrics.duration).toBeGreaterThanOrEqual(0) // 允许为0，因为可能很快\n    })\n  })\n\n  describe('Performance Regression Detection', () => {\n    it('should compare performance across runs', () => {\n      const baseline = {\n        duration: 100,\n        memoryUsage: { heapUsed: 1000000 },\n        cpuUsage: 50\n      }\n      \n      const current = {\n        duration: 150,\n        memoryUsage: { heapUsed: 1500000 },\n        cpuUsage: 75\n      }\n      \n      // Simple regression detection logic\n      const durationRegression = (current.duration - baseline.duration) / baseline.duration\n      const memoryRegression = (current.memoryUsage.heapUsed - baseline.memoryUsage.heapUsed) / baseline.memoryUsage.heapUsed\n      \n      expect(durationRegression).toBeGreaterThan(0) // 50% slower\n      expect(memoryRegression).toBeGreaterThan(0) // 50% more memory\n      \n      // Flag as regression if more than 20% slower\n      const isRegression = durationRegression > 0.2 || memoryRegression > 0.2\n      expect(isRegression).toBe(true)\n    })\n  })\n})\n"]}