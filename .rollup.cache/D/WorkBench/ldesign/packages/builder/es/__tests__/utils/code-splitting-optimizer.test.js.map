{"version":3,"file":"code-splitting-optimizer.test.js","sourceRoot":"","sources":["../../../src/__tests__/utils/code-splitting-optimizer.test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * 代码分割优化器测试\n */\n\nimport { describe, it, expect, vi, beforeEach, afterEach } from 'vitest'\nimport { CodeSplittingOptimizer } from '../../utils/code-splitting-optimizer'\nimport type { OptimizationOptions, OptimizationResult } from '../../utils/code-splitting-optimizer'\nimport * as fs from 'fs-extra'\nimport * as path from 'node:path'\nimport { tmpdir } from 'node:os'\n\n// Mock fs-extra\nvi.mock('fs-extra', () => ({\n  pathExists: vi.fn(),\n  readdir: vi.fn(),\n  stat: vi.fn(),\n  readFile: vi.fn()\n}))\nconst mockFs = vi.mocked(fs)\n\ndescribe('CodeSplittingOptimizer', () => {\n  let optimizer: CodeSplittingOptimizer\n  let tempDir: string\n\n  beforeEach(() => {\n    optimizer = new CodeSplittingOptimizer()\n    tempDir = path.join(tmpdir(), `ldesign-builder-test-${Date.now()}`)\n    \n    vi.clearAllMocks()\n  })\n\n  afterEach(() => {\n    vi.clearAllMocks()\n  })\n\n  describe('Constructor', () => {\n    it('should create instance successfully', () => {\n      expect(optimizer).toBeInstanceOf(CodeSplittingOptimizer)\n    })\n  })\n\n  describe('optimize', () => {\n    it('should optimize code splitting successfully', async () => {\n      // Mock file system\n      mockFs.pathExists.mockResolvedValue(true)\n      mockFs.readdir.mockResolvedValue(['index.ts', 'utils.ts', 'components'] as any)\n      mockFs.stat.mockImplementation((filePath: string) => {\n        if (filePath.includes('components')) {\n          return Promise.resolve({ isDirectory: () => true } as any)\n        }\n        return Promise.resolve({ isDirectory: () => false, size: 1024 } as any)\n      })\n      \n      mockFs.readFile.mockImplementation((filePath: string) => {\n        if (filePath.includes('index.ts')) {\n          return Promise.resolve(`\n            import { Button } from './components/Button'\n            import { Modal } from './components/Modal'\n            import { utils } from './utils'\n          `)\n        }\n        return Promise.resolve('export const test = \"test\"')\n      })\n\n      const options: OptimizationOptions = {\n        rootDir: tempDir,\n        entries: ['src/index.ts', 'src/main.ts'],\n        strategy: 'frequency-based',\n        minChunkSize: 1000,\n        maxChunks: 10\n      }\n\n      const result = await optimizer.optimize(options)\n\n      expect(result).toBeDefined()\n      expect(result.strategy).toBe('frequency-based')\n      expect(result.chunks).toBeDefined()\n      expect(Array.isArray(result.chunks)).toBe(true)\n      expect(result.recommendations).toBeDefined()\n    })\n\n    it('should handle different optimization strategies', async () => {\n      mockFs.pathExists.mockResolvedValue(true)\n      mockFs.readdir.mockResolvedValue(['index.ts'] as any)\n      mockFs.stat.mockResolvedValue({ isDirectory: () => false, size: 1024 } as any)\n      mockFs.readFile.mockResolvedValue('export const test = \"test\"')\n\n      const strategies = ['frequency-based', 'feature-based', 'hybrid'] as const\n\n      for (const strategy of strategies) {\n        const options: OptimizationOptions = {\n          rootDir: tempDir,\n          entries: ['src/index.ts'],\n          strategy\n        }\n\n        const result = await optimizer.optimize(options)\n\n        expect(result.strategy).toBe(strategy)\n        expect(result.chunks).toBeDefined()\n      }\n    })\n\n    it('should respect chunk size constraints', async () => {\n      mockFs.pathExists.mockResolvedValue(true)\n      mockFs.readdir.mockResolvedValue(['large.ts', 'small.ts'] as any)\n      mockFs.stat.mockImplementation((filePath: string) => {\n        if (filePath.includes('large.ts')) {\n          return Promise.resolve({ isDirectory: () => false, size: 5000 } as any)\n        }\n        return Promise.resolve({ isDirectory: () => false, size: 500 } as any)\n      })\n      mockFs.readFile.mockResolvedValue('export const test = \"test\"')\n\n      const options: OptimizationOptions = {\n        rootDir: tempDir,\n        entries: ['src/index.ts'],\n        strategy: 'frequency-based',\n        minChunkSize: 1000,\n        maxChunkSize: 4000\n      }\n\n      const result = await optimizer.optimize(options)\n\n      // Should respect size constraints\n      result.chunks.forEach(chunk => {\n        if (chunk.estimatedSize) {\n          expect(chunk.estimatedSize).toBeGreaterThanOrEqual(options.minChunkSize!)\n          expect(chunk.estimatedSize).toBeLessThanOrEqual(options.maxChunkSize!)\n        }\n      })\n    })\n\n    it('should limit number of chunks', async () => {\n      mockFs.pathExists.mockResolvedValue(true)\n      mockFs.readdir.mockResolvedValue([\n        'file1.ts', 'file2.ts', 'file3.ts', 'file4.ts', 'file5.ts'\n      ] as any)\n      mockFs.stat.mockResolvedValue({ isDirectory: () => false, size: 1024 } as any)\n      mockFs.readFile.mockResolvedValue('export const test = \"test\"')\n\n      const options: OptimizationOptions = {\n        rootDir: tempDir,\n        entries: ['src/index.ts'],\n        strategy: 'frequency-based',\n        maxChunks: 3\n      }\n\n      const result = await optimizer.optimize(options)\n\n      expect(result.chunks.length).toBeLessThanOrEqual(3)\n    })\n\n    it('should analyze import dependencies', async () => {\n      mockFs.pathExists.mockResolvedValue(true)\n      mockFs.readdir.mockResolvedValue(['main.ts', 'utils.ts', 'components.ts'] as any)\n      mockFs.stat.mockResolvedValue({ isDirectory: () => false, size: 1024 } as any)\n      \n      mockFs.readFile.mockImplementation((filePath: string) => {\n        if (filePath.includes('main.ts')) {\n          return Promise.resolve(`\n            import { helper } from './utils'\n            import { Button } from './components'\n          `)\n        } else if (filePath.includes('utils.ts')) {\n          return Promise.resolve('export const helper = () => {}')\n        } else if (filePath.includes('components.ts')) {\n          return Promise.resolve(`\n            import { helper } from './utils'\n            export const Button = () => {}\n          `)\n        }\n        return Promise.resolve('')\n      })\n\n      const options: OptimizationOptions = {\n        rootDir: tempDir,\n        entries: ['src/index.ts'],\n        strategy: 'feature-based',\n        analyzeDependencies: true\n      }\n\n      const result = await optimizer.optimize(options)\n\n      expect(result.dependencyGraph).toBeDefined()\n      expect(result.dependencyGraph?.nodes).toBeDefined()\n      expect(result.dependencyGraph?.edges).toBeDefined()\n    })\n  })\n\n  describe('Optimization Strategies', () => {\n    beforeEach(() => {\n      mockFs.pathExists.mockResolvedValue(true)\n      mockFs.stat.mockResolvedValue({ isDirectory: () => false, size: 1024 } as any)\n    })\n\n    it('should implement frequency-based strategy', async () => {\n      mockFs.readdir.mockResolvedValue(['common.ts', 'rare.ts'] as any)\n      mockFs.readFile.mockImplementation((filePath: string) => {\n        if (filePath.includes('common.ts')) {\n          return Promise.resolve('// Frequently used utility')\n        }\n        return Promise.resolve('// Rarely used feature')\n      })\n\n      const options: OptimizationOptions = {\n        rootDir: tempDir,\n        entries: ['src/index.ts'],\n        strategy: 'frequency-based'\n      }\n\n      const result = await optimizer.optimize(options)\n\n      expect(result.strategy).toBe('frequency-based')\n      expect(result.chunks.some(chunk => chunk.name.includes('common'))).toBe(true)\n    })\n\n    it('should implement feature-based strategy', async () => {\n      mockFs.readdir.mockResolvedValue(['auth.ts', 'dashboard.ts', 'settings.ts'] as any)\n      mockFs.readFile.mockResolvedValue('export const feature = \"test\"')\n\n      const options: OptimizationOptions = {\n        rootDir: tempDir,\n        entries: ['src/index.ts'],\n        strategy: 'feature-based'\n      }\n\n      const result = await optimizer.optimize(options)\n\n      expect(result.strategy).toBe('feature-based')\n      // Should group by feature\n      expect(result.chunks.length).toBeGreaterThan(0)\n    })\n\n    it('should implement hybrid strategy', async () => {\n      mockFs.readdir.mockResolvedValue(['core.ts', 'feature1.ts', 'feature2.ts'] as any)\n      mockFs.readFile.mockResolvedValue('export const module = \"test\"')\n\n      const options: OptimizationOptions = {\n        rootDir: tempDir,\n        entries: ['src/index.ts'],\n        strategy: 'hybrid'\n      }\n\n      const result = await optimizer.optimize(options)\n\n      expect(result.strategy).toBe('hybrid')\n      // Should combine frequency and feature-based approaches\n      expect(result.chunks.length).toBeGreaterThan(0)\n    })\n  })\n\n  describe('Recommendations', () => {\n    it('should provide optimization recommendations', async () => {\n      mockFs.pathExists.mockResolvedValue(true)\n      mockFs.readdir.mockResolvedValue(['large-file.ts', 'small-file.ts'] as any)\n      mockFs.stat.mockImplementation((filePath: string) => {\n        if (filePath.includes('large-file.ts')) {\n          return Promise.resolve({ isDirectory: () => false, size: 10000 } as any)\n        }\n        return Promise.resolve({ isDirectory: () => false, size: 100 } as any)\n      })\n      mockFs.readFile.mockResolvedValue('export const test = \"test\"')\n\n      const options: OptimizationOptions = {\n        rootDir: tempDir,\n        entries: ['src/index.ts'],\n        strategy: 'frequency-based'\n      }\n\n      const result = await optimizer.optimize(options)\n\n      expect(result.recommendations).toBeDefined()\n      expect(Array.isArray(result.recommendations)).toBe(true)\n      expect(result.recommendations.length).toBeGreaterThan(0)\n    })\n\n    it('should suggest lazy loading for large chunks', async () => {\n      mockFs.pathExists.mockResolvedValue(true)\n      mockFs.readdir.mockResolvedValue(['huge-component.ts'] as any)\n      mockFs.stat.mockResolvedValue({ isDirectory: () => false, size: 50000 } as any)\n      mockFs.readFile.mockResolvedValue('export const HugeComponent = () => {}')\n\n      const options: OptimizationOptions = {\n        rootDir: tempDir,\n        entries: ['src/index.ts'],\n        strategy: 'frequency-based'\n      }\n\n      const result = await optimizer.optimize(options)\n\n      const hasLazyLoadingRecommendation = result.recommendations.some(\n        rec => rec.toLowerCase().includes('lazy')\n      )\n      expect(hasLazyLoadingRecommendation).toBe(true)\n    })\n  })\n\n  describe('Error Handling', () => {\n    it('should handle missing directory', async () => {\n      mockFs.pathExists.mockResolvedValue(false)\n\n      const options: OptimizationOptions = {\n        rootDir: '/non-existent-path',\n        entries: ['src/index.ts'],\n        strategy: 'frequency-based'\n      }\n\n      await expect(optimizer.optimize(options)).rejects.toThrow()\n    })\n\n    it('should handle file read errors', async () => {\n      mockFs.pathExists.mockResolvedValue(true)\n      mockFs.readdir.mockResolvedValue(['test.ts'] as any)\n      mockFs.stat.mockResolvedValue({ isDirectory: () => false, size: 1024 } as any)\n      mockFs.readFile.mockRejectedValue(new Error('Permission denied'))\n\n      const options: OptimizationOptions = {\n        rootDir: tempDir,\n        entries: ['src/index.ts'],\n        strategy: 'frequency-based'\n      }\n\n      // Should handle gracefully and continue with available files\n      const result = await optimizer.optimize(options)\n      expect(result).toBeDefined()\n    })\n  })\n\n  describe('Performance', () => {\n    it('should complete optimization within reasonable time', async () => {\n      // Mock a moderate-sized project\n      const files = Array.from({ length: 50 }, (_, i) => `file${i}.ts`)\n      \n      mockFs.pathExists.mockResolvedValue(true)\n      mockFs.readdir.mockResolvedValue(files as any)\n      mockFs.stat.mockResolvedValue({ isDirectory: () => false, size: 1024 } as any)\n      mockFs.readFile.mockResolvedValue('export const test = \"test\"')\n\n      const options: OptimizationOptions = {\n        rootDir: tempDir,\n        entries: ['src/index.ts'],\n        strategy: 'hybrid'\n      }\n\n      const startTime = Date.now()\n      const result = await optimizer.optimize(options)\n      const endTime = Date.now()\n\n      expect(result).toBeDefined()\n      expect(endTime - startTime).toBeLessThan(3000) // Should complete within 3 seconds\n    })\n  })\n})\n"]}