{"version":3,"file":"typescript.test.js","sourceRoot":"","sources":["../../../src/__tests__/strategies/typescript.test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * TypeScript 策略测试\n */\n\nimport { describe, it, expect, beforeEach } from 'vitest'\nimport { TypeScriptStrategy } from '../../strategies/typescript/TypeScriptStrategy'\nimport { LibraryType } from '../../types/library'\n\ndescribe('TypeScriptStrategy', () => {\n  let strategy: TypeScriptStrategy\n\n  beforeEach(() => {\n    strategy = new TypeScriptStrategy()\n  })\n\n  describe('Basic Properties', () => {\n    it('should have correct name', () => {\n      expect(strategy.name).toBe('typescript')\n    })\n\n    it('should support TypeScript library type', () => {\n      expect(strategy.supportedTypes).toContain(LibraryType.TYPESCRIPT)\n    })\n\n    it('should have appropriate priority', () => {\n      expect(strategy.priority).toBe(10)\n    })\n  })\n\n  describe('Applicability', () => {\n    it('should be applicable for TypeScript projects', () => {\n      const config = {\n        input: 'src/index.ts',\n        libraryType: LibraryType.TYPESCRIPT\n      }\n\n      expect(strategy.isApplicable(config)).toBe(true)\n    })\n\n    it('should not be applicable for non-TypeScript projects', () => {\n      const config = {\n        input: 'src/index.js',\n        libraryType: LibraryType.STYLE\n      }\n\n      expect(strategy.isApplicable(config)).toBe(false)\n    })\n  })\n\n  describe('Configuration Application', () => {\n    it('should apply TypeScript-specific configuration', async () => {\n      const baseConfig = {\n        input: 'src/index.ts',\n        libraryType: LibraryType.TYPESCRIPT\n      }\n\n      const result = await strategy.applyStrategy(baseConfig)\n      expect(result).toBeDefined()\n      // Should maintain the original config structure\n      expect(result.input).toBe(baseConfig.input)\n      expect(result.libraryType).toBe(baseConfig.libraryType)\n    })\n  })\n\n  describe('Default Configuration', () => {\n    it('should provide sensible defaults', () => {\n      const defaults = strategy.getDefaultConfig()\n      expect(defaults).toBeTypeOf('object')\n    })\n  })\n\n  describe('Plugin Recommendations', () => {\n    it('should recommend appropriate plugins', () => {\n      const config = {\n        input: 'src/index.ts',\n        libraryType: LibraryType.TYPESCRIPT\n      }\n\n      const plugins = strategy.getRecommendedPlugins(config)\n      expect(Array.isArray(plugins)).toBe(true)\n    })\n  })\n\n  describe('Configuration Validation', () => {\n    it('should validate TypeScript configuration', () => {\n      const config = {\n        input: 'src/index.ts',\n        libraryType: LibraryType.TYPESCRIPT,\n        output: {\n          format: ['esm', 'cjs']\n        }\n      }\n\n      const result = strategy.validateConfig(config)\n      expect(result.valid).toBe(true)\n      expect(result.errors).toHaveLength(0)\n      expect(result.warnings).toHaveLength(0)\n      expect(result.suggestions).toHaveLength(0)\n    })\n\n    it('should provide validation results structure', () => {\n      const config = {\n        input: 'src/index.ts',\n        libraryType: LibraryType.TYPESCRIPT\n      }\n\n      const result = strategy.validateConfig(config)\n      expect(result).toHaveProperty('valid')\n      expect(result).toHaveProperty('errors')\n      expect(result).toHaveProperty('warnings')\n      expect(result).toHaveProperty('suggestions')\n    })\n  })\n})\n"]}