{"version":3,"file":"error-handler.test.js","sourceRoot":"","sources":["../../../src/__tests__/utils/error-handler.test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * 错误处理工具测试\n */\n\nimport { describe, it, expect, vi, beforeEach } from 'vitest'\nimport { BuilderError, ErrorHandler, createErrorHandler } from '../../utils/error-handler'\nimport { ErrorCode } from '../../constants/errors'\nimport { Logger } from '../../utils/logger'\n\ndescribe('BuilderError', () => {\n  it('should create error with code and message', () => {\n    const error = new BuilderError(ErrorCode.CONFIG_INVALID, 'Test error')\n    \n    expect(error).toBeInstanceOf(Error)\n    expect(error).toBeInstanceOf(BuilderError)\n    expect(error.name).toBe('BuilderError')\n    expect(error.code).toBe(ErrorCode.CONFIG_INVALID)\n    expect(error.message).toBe('Test error')\n  })\n\n  it('should include suggestion when provided', () => {\n    const error = new BuilderError(ErrorCode.CONFIG_INVALID, 'Test error', {\n      suggestion: 'Check your configuration file'\n    })\n    \n    expect(error.suggestion).toBe('Check your configuration file')\n  })\n\n  it('should include additional details', () => {\n    const details = { field: 'input', value: null }\n    const error = new BuilderError(ErrorCode.CONFIG_INVALID, 'Test error', {\n      details,\n      phase: 'validation',\n      file: 'config.ts'\n    })\n    \n    expect(error.details).toEqual(details)\n    expect(error.phase).toBe('validation')\n    expect(error.file).toBe('config.ts')\n  })\n\n  it('should chain errors with cause', () => {\n    const originalError = new Error('Original error')\n    const builderError = new BuilderError(ErrorCode.BUILD_FAILED, 'Build failed', {\n      cause: originalError\n    })\n    \n    expect(builderError.cause).toBe(originalError)\n  })\n})\n\ndescribe('ErrorHandler', () => {\n  let errorHandler: ErrorHandler\n  let mockLogger: Logger\n\n  beforeEach(() => {\n    mockLogger = new Logger({ level: 'silent' })\n    errorHandler = new ErrorHandler({ logger: mockLogger })\n  })\n\n  describe('Constructor', () => {\n    it('should create instance with default options', () => {\n      const handler = new ErrorHandler()\n      expect(handler).toBeInstanceOf(ErrorHandler)\n    })\n\n    it('should accept custom logger', () => {\n      const customLogger = new Logger({ level: 'debug' })\n      const handler = new ErrorHandler({ logger: customLogger })\n      expect(handler).toBeInstanceOf(ErrorHandler)\n    })\n  })\n\n  describe('Error Handling', () => {\n    it('should handle BuilderError', () => {\n      const error = new BuilderError(ErrorCode.CONFIG_INVALID, 'Test error')\n      \n      expect(() => {\n        errorHandler.handle(error)\n      }).not.toThrow()\n    })\n\n    it('should handle generic Error', () => {\n      const error = new Error('Generic error')\n      \n      expect(() => {\n        errorHandler.handle(error)\n      }).not.toThrow()\n    })\n\n    it('should format error messages', () => {\n      const error = new BuilderError(ErrorCode.CONFIG_INVALID, 'Test error', {\n        suggestion: 'Check configuration',\n        phase: 'validation'\n      })\n      \n      const formatted = errorHandler.formatError(error)\n      expect(formatted).toContain('Test error')\n      expect(typeof formatted).toBe('string')\n    })\n  })\n\n  describe('Error Recovery', () => {\n    it('should suggest recovery actions', () => {\n      const error = new BuilderError(ErrorCode.DEPENDENCY_MISSING, 'Missing dependency')\n      \n      const suggestions = errorHandler.getSuggestions(error)\n      expect(Array.isArray(suggestions)).toBe(true)\n    })\n  })\n})\n\ndescribe('createErrorHandler', () => {\n  it('should create ErrorHandler instance', () => {\n    const handler = createErrorHandler()\n    expect(handler).toBeInstanceOf(ErrorHandler)\n  })\n\n  it('should accept configuration options', () => {\n    const logger = new Logger({ level: 'debug' })\n    const handler = createErrorHandler({\n      logger,\n      showSuggestions: true\n    })\n    expect(handler).toBeInstanceOf(ErrorHandler)\n  })\n})\n"]}