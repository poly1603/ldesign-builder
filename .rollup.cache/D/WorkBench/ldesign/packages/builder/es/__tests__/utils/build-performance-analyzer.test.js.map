{"version":3,"file":"build-performance-analyzer.test.js","sourceRoot":"","sources":["../../../src/__tests__/utils/build-performance-analyzer.test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * 构建性能分析器测试\n */\n\nimport { describe, it, expect, vi, beforeEach, afterEach } from 'vitest'\nimport { BuildPerformanceAnalyzer } from '../../utils/build-performance-analyzer'\nimport type { BuildPhase, AnalysisOptions } from '../../utils/build-performance-analyzer'\n\ndescribe('BuildPerformanceAnalyzer', () => {\n  let analyzer: BuildPerformanceAnalyzer\n\n  beforeEach(() => {\n    analyzer = new BuildPerformanceAnalyzer()\n    vi.clearAllMocks()\n  })\n\n  afterEach(() => {\n    vi.clearAllMocks()\n  })\n\n  describe('Constructor', () => {\n    it('should create instance successfully', () => {\n      expect(analyzer).toBeInstanceOf(BuildPerformanceAnalyzer)\n    })\n  })\n\n  describe('Phase Management', () => {\n    it('should start and end phases correctly', () => {\n      const phase: BuildPhase = 'initialization'\n      \n      analyzer.startPhase(phase)\n      \n      // Wait a bit to ensure time difference\n      setTimeout(() => {\n        const result = analyzer.endPhase(phase)\n        \n        expect(result).toBeDefined()\n        expect(result?.phase).toBe(phase)\n        expect(result?.duration).toBeGreaterThan(0)\n        expect(result?.memoryUsage).toBeDefined()\n      }, 10)\n    })\n\n    it('should handle multiple phases', () => {\n      const phases: BuildPhase[] = ['initialization', 'compilation', 'bundling']\n      \n      phases.forEach(phase => {\n        analyzer.startPhase(phase)\n      })\n      \n      phases.forEach(phase => {\n        const result = analyzer.endPhase(phase)\n        expect(result).toBeDefined()\n        expect(result?.phase).toBe(phase)\n      })\n    })\n\n    it('should return null for non-existent phase', () => {\n      const result = analyzer.endPhase('compilation')\n      expect(result).toBeNull()\n    })\n\n    it('should handle overlapping phases', async () => {\n      analyzer.startPhase('initialization')\n      await new Promise(resolve => setTimeout(resolve, 10)) // 10ms delay\n      analyzer.startPhase('compilation')\n      await new Promise(resolve => setTimeout(resolve, 10)) // 10ms delay\n\n      // 先结束 compilation\n      const compilationResult = analyzer.endPhase('compilation')\n\n      // 再结束 initialization\n      const initResult = analyzer.endPhase('initialization')\n\n      expect(compilationResult).toBeDefined()\n      expect(initResult).toBeDefined()\n\n      if (compilationResult && initResult) {\n        expect(compilationResult.duration).toBeGreaterThan(0)\n        expect(initResult.duration).toBeGreaterThan(0)\n      }\n    })\n  })\n\n  describe('Memory Tracking', () => {\n    it('should track memory usage during phases', () => {\n      analyzer.startPhase('compilation')\n      \n      // Simulate some memory usage\n      const largeArray = new Array(1000).fill('test')\n      \n      const result = analyzer.endPhase('compilation')\n      \n      expect(result?.memoryUsage).toBeDefined()\n      expect(result?.memoryUsage.heapUsed).toBeGreaterThan(0)\n      expect(result?.memoryUsage.heapTotal).toBeGreaterThan(0)\n      \n      // Clean up\n      largeArray.length = 0\n    })\n\n    it('should detect memory leaks', () => {\n      const initialMemory = process.memoryUsage().heapUsed\n      \n      analyzer.startPhase('memory-test')\n      \n      // Simulate memory allocation\n      const data = new Array(10000).fill('memory-test-data')\n      \n      const result = analyzer.endPhase('memory-test')\n      \n      expect(result?.memoryUsage.heapUsed).toBeGreaterThan(initialMemory)\n      \n      // Clean up\n      data.length = 0\n    })\n  })\n\n  describe('Performance Analysis', () => {\n    it('should generate comprehensive analysis', async () => {\n      // Simulate a complete build process\n      analyzer.startPhase('initialization')\n      await new Promise(resolve => setTimeout(resolve, 5))\n      analyzer.endPhase('initialization')\n\n      analyzer.startPhase('compilation')\n      await new Promise(resolve => setTimeout(resolve, 5))\n      analyzer.endPhase('compilation')\n\n      analyzer.startPhase('bundling')\n      await new Promise(resolve => setTimeout(resolve, 5))\n      analyzer.endPhase('bundling')\n\n      analyzer.startPhase('optimization')\n      await new Promise(resolve => setTimeout(resolve, 5))\n      analyzer.endPhase('optimization')\n\n      const analysis = analyzer.finishAnalysis()\n\n      expect(analysis).toBeDefined()\n      expect(analysis.totalDuration).toBeGreaterThan(0)\n      expect(analysis.phases).toHaveLength(4)\n      expect(analysis.bottlenecks).toBeDefined()\n      expect(analysis.recommendations).toBeDefined()\n      expect(Array.isArray(analysis.recommendations)).toBe(true)\n    })\n\n    it('should identify bottlenecks', () => {\n      // Create a slow phase\n      analyzer.startPhase('slow-phase')\n      \n      // Simulate slow operation\n      const start = Date.now()\n      while (Date.now() - start < 100) {\n        // Busy wait\n      }\n      \n      analyzer.endPhase('slow-phase')\n      \n      // Create a fast phase\n      analyzer.startPhase('fast-phase')\n      analyzer.endPhase('fast-phase')\n      \n      const analysis = analyzer.finishAnalysis()\n      \n      expect(analysis.bottlenecks).toBeDefined()\n      expect(analysis.bottlenecks.slowestPhase).toBe('slow-phase')\n      expect(analysis.bottlenecks.slowestDuration).toBeGreaterThan(90)\n    })\n\n    it('should provide optimization recommendations', async () => {\n      analyzer.startPhase('compilation')\n\n      // Simulate high memory usage\n      const largeData = new Array(50000).fill('test-data')\n      await new Promise(resolve => setTimeout(resolve, 10))\n\n      analyzer.endPhase('compilation')\n\n      const analysis = analyzer.finishAnalysis({\n        includeRecommendations: true\n      })\n\n\n\n      expect(analysis.recommendations).toBeDefined()\n      expect(analysis.recommendations.length).toBeGreaterThan(0)\n\n      // Should include memory-related recommendations (支持中英文)\n      const hasMemoryRecommendation = analysis.recommendations.some(\n        rec => rec.toLowerCase().includes('memory') || rec.includes('内存')\n      )\n      expect(hasMemoryRecommendation).toBe(true)\n\n      // Clean up\n      largeData.length = 0\n    })\n  })\n\n  describe('Analysis Options', () => {\n    it('should respect analysis options', () => {\n      analyzer.startPhase('test-phase')\n      analyzer.endPhase('test-phase')\n      \n      const options: AnalysisOptions = {\n        includeRecommendations: false,\n        includeDetailedMetrics: false\n      }\n      \n      const analysis = analyzer.finishAnalysis(options)\n      \n      expect(analysis.recommendations).toHaveLength(0)\n      expect(analysis.detailedMetrics).toBeUndefined()\n    })\n\n    it('should include detailed metrics when requested', () => {\n      analyzer.startPhase('detailed-test')\n      analyzer.endPhase('detailed-test')\n      \n      const options: AnalysisOptions = {\n        includeDetailedMetrics: true\n      }\n      \n      const analysis = analyzer.finishAnalysis(options)\n      \n      expect(analysis.detailedMetrics).toBeDefined()\n      expect(analysis.detailedMetrics?.cpuUsage).toBeDefined()\n      expect(analysis.detailedMetrics?.memoryPeak).toBeDefined()\n    })\n  })\n\n  describe('Error Handling', () => {\n    it('should handle invalid phase names gracefully', () => {\n      expect(() => {\n        analyzer.startPhase('' as BuildPhase)\n      }).not.toThrow()\n      \n      expect(() => {\n        analyzer.endPhase('' as BuildPhase)\n      }).not.toThrow()\n    })\n\n    it('should handle analysis without phases', () => {\n      const analysis = analyzer.finishAnalysis()\n      \n      expect(analysis).toBeDefined()\n      expect(analysis.totalDuration).toBe(0)\n      expect(analysis.phases).toHaveLength(0)\n      expect(analysis.bottlenecks.slowestPhase).toBeNull()\n    })\n  })\n\n  describe('Performance', () => {\n    it('should have minimal overhead', () => {\n      const iterations = 1000\n      const startTime = Date.now()\n      \n      for (let i = 0; i < iterations; i++) {\n        analyzer.startPhase('performance-test')\n        analyzer.endPhase('performance-test')\n      }\n      \n      const endTime = Date.now()\n      const totalTime = endTime - startTime\n      const averageTime = totalTime / iterations\n      \n      // Should be very fast (less than 1ms per operation on average)\n      expect(averageTime).toBeLessThan(1)\n    })\n  })\n})\n"]}