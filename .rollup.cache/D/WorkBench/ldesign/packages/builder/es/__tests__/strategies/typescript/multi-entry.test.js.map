{"version":3,"file":"multi-entry.test.js","sourceRoot":"","sources":["../../../../src/__tests__/strategies/typescript/multi-entry.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest'\nimport { TypeScriptStrategy } from '../../../strategies/typescript/TypeScriptStrategy'\nimport { BuilderConfig, LibraryType } from '../../../types'\n\n// Mock file-system utils\nvi.mock('../../../utils/file-system', () => ({\n  findFiles: vi.fn(),\n}))\n\n// Mock path\nvi.mock('path', () => ({\n  relative: vi.fn(),\n  extname: vi.fn(),\n}))\n\ndescribe('TypeScriptStrategy.resolveInputEntries', () => {\n  let strategy: TypeScriptStrategy\n  let mockFindFiles: any\n  let mockRelative: any\n  let mockExtname: any\n\n  beforeEach(async () => {\n    strategy = new TypeScriptStrategy()\n    \n    const fileSystem = await import('../../../utils/file-system')\n    const path = await import('path')\n    \n    mockFindFiles = vi.mocked(fileSystem.findFiles)\n    mockRelative = vi.mocked(path.relative)\n    mockExtname = vi.mocked(path.extname)\n  })\n\n  afterEach(() => {\n    vi.clearAllMocks()\n  })\n\n  it('should return user-provided input when specified', async () => {\n    const config: BuilderConfig = {\n      input: 'custom/entry.ts',\n      libraryType: LibraryType.TYPESCRIPT,\n    }\n\n    const result = await (strategy as any).resolveInputEntries(config)\n    expect(result).toBe('custom/entry.ts')\n    expect(mockFindFiles).not.toHaveBeenCalled()\n  })\n\n  it('should fallback to src/index.ts when no files found', async () => {\n    const config: BuilderConfig = {\n      libraryType: LibraryType.TYPESCRIPT,\n    }\n\n    mockFindFiles.mockResolvedValue([])\n\n    const result = await (strategy as any).resolveInputEntries(config)\n    expect(result).toBe('src/index.ts')\n    expect(mockFindFiles).toHaveBeenCalledWith(\n      ['src/**/*.{ts,tsx,js,jsx}'],\n      expect.objectContaining({\n        cwd: process.cwd(),\n        ignore: ['**/*.d.ts', '**/*.test.*', '**/*.spec.*', '**/__tests__/**']\n      })\n    )\n  })\n\n  it('should generate multi-entry map from src files', async () => {\n    const config: BuilderConfig = {\n      libraryType: LibraryType.TYPESCRIPT,\n    }\n\n    const mockFiles = [\n      'D:\\\\project\\\\src\\\\index.ts',\n      'D:\\\\project\\\\src\\\\utils\\\\helper.ts',\n      'D:\\\\project\\\\src\\\\components\\\\Button.tsx'\n    ]\n\n    mockFindFiles.mockResolvedValue(mockFiles)\n    \n    // Mock path operations\n    mockRelative\n      .mockReturnValueOnce('src\\\\index.ts')\n      .mockReturnValueOnce('src\\\\utils\\\\helper.ts')\n      .mockReturnValueOnce('src\\\\components\\\\Button.tsx')\n    \n    mockExtname\n      .mockReturnValueOnce('.ts')\n      .mockReturnValueOnce('.ts')\n      .mockReturnValueOnce('.tsx')\n\n    const result = await (strategy as any).resolveInputEntries(config)\n\n    expect(result).toEqual({\n      'index': 'D:\\\\project\\\\src\\\\index.ts',\n      'utils/helper': 'D:\\\\project\\\\src\\\\utils\\\\helper.ts',\n      'components/Button': 'D:\\\\project\\\\src\\\\components\\\\Button.tsx'\n    })\n  })\n\n  it('should handle Windows path separators correctly', async () => {\n    const config: BuilderConfig = {\n      libraryType: LibraryType.TYPESCRIPT,\n    }\n\n    mockFindFiles.mockResolvedValue(['D:\\\\project\\\\src\\\\nested\\\\deep\\\\module.ts'])\n    mockRelative.mockReturnValue('src\\\\nested\\\\deep\\\\module.ts')\n    mockExtname.mockReturnValue('.ts')\n\n    const result = await (strategy as any).resolveInputEntries(config)\n\n    expect(result).toEqual({\n      'nested/deep/module': 'D:\\\\project\\\\src\\\\nested\\\\deep\\\\module.ts'\n    })\n  })\n\n  it('should use correct glob patterns and ignore rules', async () => {\n    const config: BuilderConfig = {\n      libraryType: LibraryType.TYPESCRIPT,\n    }\n\n    mockFindFiles.mockResolvedValue([])\n\n    await (strategy as any).resolveInputEntries(config)\n\n    expect(mockFindFiles).toHaveBeenCalledWith(\n      ['src/**/*.{ts,tsx,js,jsx}'],\n      {\n        cwd: process.cwd(),\n        ignore: [\n          '**/*.d.ts',\n          '**/*.test.*',\n          '**/*.spec.*',\n          '**/__tests__/**'\n        ]\n      }\n    )\n  })\n})\n"]}