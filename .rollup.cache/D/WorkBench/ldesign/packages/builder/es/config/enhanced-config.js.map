{"version":3,"file":"enhanced-config.js","sourceRoot":"","sources":["../../src/config/enhanced-config.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * 增强的配置定义\r\n * \r\n * 提供更强大的配置定义和验证功能\r\n * \r\n * @author LDesign Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport type { BuilderConfig } from '../types/config'\r\nimport type { MinifyLevel } from '../types/minify'\r\nimport type { OutputFormat } from '../types/adapter'\r\nimport { ConfigValidator, type ValidationResult } from '../core/ConfigValidator'\r\nimport { Logger } from '../utils/logger'\r\n\r\n/**\r\n * 增强的配置选项\r\n */\r\nexport interface EnhancedConfigOptions extends Partial<BuilderConfig> {\r\n  /** 配置验证选项 */\r\n  validation?: {\r\n    /** 是否启用验证 */\r\n    enabled?: boolean\r\n    /** 是否严格模式 */\r\n    strict?: boolean\r\n    /** 是否检查文件存在性 */\r\n    checkFiles?: boolean\r\n    /** 验证失败时是否抛出错误 */\r\n    throwOnError?: boolean\r\n  }\r\n\r\n  /** 构建清单选项 */\r\n  manifest?: {\r\n    /** 是否生成构建清单 */\r\n    enabled?: boolean\r\n    /** 清单格式 */\r\n    formats?: ('json' | 'markdown' | 'html')[]\r\n    /** 清单输出路径 */\r\n    outputPath?: string\r\n  }\r\n\r\n  /** Banner 閫夐」 */\r\n  bannerOptions?: {\r\n    /** 鏄惁鍚敤 banner */\r\n    enabled?: boolean\r\n    /** Banner 鏍峰紡 */\r\n    style?: 'default' | 'compact' | 'detailed'\r\n    /** 鑷畾涔変俊鎭?*/\r\n    customInfo?: Record<string, string>\r\n  }\r\n\r\n  /** 文件命名规则 */\r\n  naming?: {\r\n    /** 输出文件名模板 */\r\n    template?: string\r\n    /** 是否包含哈希 */\r\n    hash?: boolean\r\n    /** 哈希长度 */\r\n    hashLength?: number\r\n  }\r\n\r\n  /** 高级输出选项 */\r\n  advancedOutput?: {\r\n    /** 是否分离 vendor */\r\n    splitVendor?: boolean\r\n    /** vendor 包含的模块 */\r\n    vendorModules?: string[]\r\n    /** 是否生成 polyfill */\r\n    polyfill?: boolean\r\n    /** 目标浏览器 */\r\n    targets?: string | string[]\r\n  }\r\n\r\n  /** 开发服务器选项 */\r\n  devServer?: {\r\n    /** 端口号 */\r\n    port?: number\r\n    /** 主机名 */\r\n    host?: string\r\n    /** 是否自动打开浏览器 */\r\n    open?: boolean\r\n    /** 热重载 */\r\n    hmr?: boolean\r\n  }\r\n\r\n  /** 构建钩子 */\r\n  hooks?: {\r\n    /** 构建前钩子 */\r\n    beforeBuild?: (config: BuilderConfig) => void | Promise<void>\r\n    /** 构建后钩子 */\r\n    afterBuild?: (result: any) => void | Promise<void>\r\n    /** 错误处理钩子 */\r\n    onError?: (error: Error) => void | Promise<void>\r\n  }\r\n}\r\n\r\n/**\r\n * 预设配置\r\n */\r\nexport const CONFIG_PRESETS = {\r\n  /** 库开发预设 */\r\n  library: {\r\n    output: {\r\n      format: ['esm', 'cjs'] as OutputFormat[],\r\n      sourcemap: true\r\n    },\r\n    minify: false,\r\n    performance: {\r\n      treeshaking: true,\r\n      bundleAnalyzer: false\r\n    },\r\n    clean: true\r\n  },\r\n\r\n  /** 应用开发预设 */\r\n  application: {\r\n    output: {\r\n      format: 'esm' as OutputFormat,\r\n      sourcemap: true\r\n    },\r\n    minify: true,\r\n    performance: {\r\n      treeshaking: true,\r\n      bundleAnalyzer: true\r\n    },\r\n    clean: true,\r\n    advancedOutput: {\r\n      splitVendor: true,\r\n      polyfill: true\r\n    }\r\n  },\r\n\r\n  /** 组件库预设 */\r\n  components: {\r\n    output: {\r\n      format: ['esm', 'cjs', 'umd'] as OutputFormat[],\r\n      sourcemap: true\r\n    },\r\n    minify: {\r\n      level: 'basic' as MinifyLevel,\r\n      js: true,\r\n      css: true\r\n    },\r\n    performance: {\r\n      treeshaking: true,\r\n      bundleAnalyzer: false\r\n    },\r\n    clean: true\r\n  },\r\n\r\n  /** 工具库预设 */\r\n  utils: {\r\n    output: {\r\n      format: ['esm', 'cjs'] as OutputFormat[],\r\n      sourcemap: true\r\n    },\r\n    minify: {\r\n      level: 'advanced' as MinifyLevel\r\n    },\r\n    performance: {\r\n      treeshaking: true,\r\n      bundleAnalyzer: false\r\n    },\r\n    clean: true\r\n  }\r\n}\r\n\r\n/**\r\n * 增强的配置定义函数\r\n */\r\nexport function defineEnhancedConfig(options: EnhancedConfigOptions): BuilderConfig {\r\n  const logger = new Logger()\r\n\r\n  // 应用预设配置\r\n  let config = { ...options }\r\n  \r\n  // 如果指定了预设，先应用预设配置\r\n  if ('preset' in options && typeof options.preset === 'string') {\r\n    const preset = CONFIG_PRESETS[options.preset as keyof typeof CONFIG_PRESETS]\r\n    if (preset) {\r\n      config = { ...preset, ...options }\r\n      logger.info(`应用预设配置: ${options.preset}`)\r\n    } else {\r\n      logger.warn(`未知的预设配置: ${options.preset}`)\r\n    }\r\n  }\r\n\r\n  // 配置验证\r\n  if (config.validation?.enabled !== false) {\r\n    const validator = new ConfigValidator({\r\n      strict: config.validation?.strict ?? false,\r\n      checkFiles: config.validation?.checkFiles ?? true\r\n    }, logger)\r\n\r\n    const result = validator.validate(config)\r\n    \r\n    if (!result.valid) {\r\n      const errorMessage = `配置验证失败:\\n${result.errors.join('\\n')}`\r\n      \r\n      if (config.validation?.throwOnError !== false) {\r\n        throw new Error(errorMessage)\r\n      } else {\r\n        logger.error(errorMessage)\r\n      }\r\n    }\r\n\r\n    if (result.warnings.length > 0) {\r\n      logger.warn(`配置警告:\\n${result.warnings.join('\\n')}`)\r\n    }\r\n\r\n    // 获取配置建议\r\n    const suggestions = validator.getSuggestions(config)\r\n    if (suggestions.length > 0) {\r\n      logger.info(`配置建议:\\n${suggestions.join('\\n')}`)\r\n    }\r\n\r\n    // 使用规范化后的配置\r\n    if (result.normalizedConfig) {\r\n      config = result.normalizedConfig\r\n    }\r\n  }\r\n\r\n  // 处理高级选项\r\n  config = processAdvancedOptions(config, logger)\r\n\r\n  return config as BuilderConfig\r\n}\r\n\r\n/**\r\n * 处理高级选项\r\n */\r\nfunction processAdvancedOptions(config: EnhancedConfigOptions, logger: Logger): EnhancedConfigOptions {\r\n  // 处理文件命名规则\r\n  if (config.naming) {\r\n    if (config.naming.template) {\r\n      logger.info(`使用自定义文件命名模板: ${config.naming.template}`)\r\n    }\r\n    if (config.naming.hash) {\r\n      logger.info(`启用文件哈希，长度: ${config.naming.hashLength || 8}`)\r\n    }\r\n  }\r\n\r\n  // 处理高级输出选项\r\n  if (config.advancedOutput) {\r\n    if (config.advancedOutput.splitVendor) {\r\n      logger.info('启用 vendor 分离')\r\n    }\r\n    if (config.advancedOutput.polyfill) {\r\n      logger.info('启用 polyfill 生成')\r\n    }\r\n    if (config.advancedOutput.targets) {\r\n      logger.info(`目标浏览器: ${JSON.stringify(config.advancedOutput.targets)}`)\r\n    }\r\n  }\r\n\r\n  // 处理构建清单\r\n  if (config.manifest?.enabled) {\r\n    logger.info(`启用构建清单，格式: ${config.manifest.formats?.join(', ') || 'json'}`)\r\n  }\r\n\r\n  // 澶勭悊 Banner\r\n  if (config.bannerOptions?.enabled) {\r\n    logger.info(`鍚敤 Banner锛屾牱寮? ${config.bannerOptions.style || 'default'}`)\r\n  }\r\n\r\n  return config\r\n}\r\n\r\n/**\r\n * 创建配置模板\r\n */\r\nexport function createConfigTemplate(type: keyof typeof CONFIG_PRESETS): string {\r\n  const preset = CONFIG_PRESETS[type]\r\n  \r\n  return `import { defineEnhancedConfig } from '@ldesign/builder'\r\n\r\nexport default defineEnhancedConfig({\r\n  // 基础配置\r\n  input: 'src/index.ts',\r\n  \r\n  // 输出配置\r\n  output: ${JSON.stringify(preset.output, null, 4)},\r\n  \r\n  // 压缩配置\r\n  minify: ${JSON.stringify(preset.minify, null, 4)},\r\n  \r\n  // 性能配置\r\n  performance: ${JSON.stringify(preset.performance, null, 4)},\r\n  \r\n  // 清理输出目录\r\n  clean: ${preset.clean},\r\n  \r\n  // 验证配置\r\n  validation: {\r\n    enabled: true,\r\n    strict: false,\r\n    checkFiles: true,\r\n    throwOnError: true\r\n  },\r\n  \r\n  // 构建清单\r\n  manifest: {\r\n    enabled: true,\r\n    formats: ['json', 'markdown'],\r\n    outputPath: 'dist'\r\n  },\r\n  \r\n  // Banner 配置\r\n  banner: {\r\n    enabled: true,\r\n    style: 'default'\r\n  },\r\n  \r\n  // 构建钩子\r\n  hooks: {\r\n    beforeBuild: async (config) => {\r\n      console.log('开始构建...')\r\n    },\r\n    afterBuild: async (result) => {\r\n      console.log('构建完成!')\r\n    },\r\n    onError: async (error) => {\r\n      console.error('构建失败:', error.message)\r\n    }\r\n  }\r\n})\r\n`\r\n}\r\n\r\n/**\r\n * 验证配置文件\r\n */\r\nexport function validateConfigFile(configPath: string): ValidationResult {\r\n  try {\r\n    const config = require(configPath)\r\n    const validator = new ConfigValidator()\r\n    return validator.validate(config.default || config)\r\n  } catch (error) {\r\n    return {\r\n      valid: false,\r\n      errors: [`配置文件加载失败: ${(error as Error).message}`],\r\n      warnings: []\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 生成配置文档\r\n */\r\nexport function generateConfigDocs(): string {\r\n  return `# LDesign Builder 配置文档\r\n\r\n## 基础配置\r\n\r\n\\`\\`\\`typescript\r\nimport { defineEnhancedConfig } from '@ldesign/builder'\r\n\r\nexport default defineEnhancedConfig({\r\n  // 入口文件\r\n  input: 'src/index.ts',\r\n  \r\n  // 输出配置\r\n  output: {\r\n    dir: 'dist',\r\n    format: ['esm', 'cjs'],\r\n    sourcemap: true,\r\n    name: 'MyLibrary' // UMD 格式需要\r\n  },\r\n  \r\n  // 打包器选择\r\n  bundler: 'rollup', // 'rollup' | 'rolldown' | 'auto'\r\n  \r\n  // 压缩配置\r\n  minify: {\r\n    level: 'basic', // 'none' | 'whitespace' | 'basic' | 'advanced'\r\n    js: true,\r\n    css: true\r\n  },\r\n  \r\n  // 外部依赖\r\n  external: ['react', 'vue'],\r\n  \r\n  // 性能配置\r\n  performance: {\r\n    treeshaking: true,\r\n    bundleAnalyzer: false\r\n  }\r\n})\r\n\\`\\`\\`\r\n\r\n## 预设配置\r\n\r\n可以使用预设配置快速开始：\r\n\r\n- \\`library\\`: 库开发\r\n- \\`application\\`: 应用开发\r\n- \\`components\\`: 组件库\r\n- \\`utils\\`: 工具库\r\n\r\n## 高级功能\r\n\r\n### 构建清单\r\n自动生成详细的构建产物清单。\r\n\r\n### Banner 标识\r\n在产物顶部添加构建信息。\r\n\r\n### 配置验证\r\n自动验证配置的正确性。\r\n\r\n### 构建钩子\r\n在构建过程中执行自定义逻辑。\r\n`\r\n}\r\n"]}